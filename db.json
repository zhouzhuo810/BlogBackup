{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/excel.gif","path":"images/excel.gif","modified":0,"renderable":0},{"_id":"source/images/excel1.jpg","path":"images/excel1.jpg","modified":0,"renderable":0},{"_id":"source/images/excel2.jpg","path":"images/excel2.jpg","modified":0,"renderable":0},{"_id":"source/images/excel3.jpg","path":"images/excel3.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"source/images/photo.jpg","path":"images/photo.jpg","modified":0,"renderable":0},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"source/images/curve.png","path":"images/curve.png","modified":0,"renderable":0},{"_id":"source/images/cameracrop1.png","path":"images/cameracrop1.png","modified":0,"renderable":0},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"source/images/mpandroidchart2.png","path":"images/mpandroidchart2.png","modified":0,"renderable":0},{"_id":"source/images/disc.jpg","path":"images/disc.jpg","modified":0,"renderable":0},{"_id":"source/images/mpandroidcahrt.png","path":"images/mpandroidcahrt.png","modified":0,"renderable":0},{"_id":"source/images/cameracrop2.png","path":"images/cameracrop2.png","modified":0,"renderable":0},{"_id":"source/images/zzimagebox.gif","path":"images/zzimagebox.gif","modified":0,"renderable":0}],"Cache":[{"_id":"themes/material-flow/LICENSE","hash":"0e12aed461110e809af1a52728f499f852e85e0a","modified":1501921808338},{"_id":"themes/material-flow/README.md","hash":"5ba268d7ee076bb182f265bd071ceda6d9f42d91","modified":1501921808338},{"_id":"themes/material-flow/_config.yml","hash":"4086b7bef1c52178ffdbbd7263479f3260a05e9d","modified":1502285029759},{"_id":"source/images/excel.gif","hash":"aadd61b7f8965fe76efb54567df2ddaf350faacc","modified":1502366494263},{"_id":"source/images/excel1.jpg","hash":"5b7f7d78b829ad3860d29e8a3e9cc3d6c0f2a22f","modified":1502366494264},{"_id":"source/images/excel2.jpg","hash":"44a78424dda6f3835ce98652820bce07c42fff39","modified":1502366494265},{"_id":"source/images/excel3.jpg","hash":"768475cdde509f02883e7e6a24e47b2f678a8033","modified":1502366494266},{"_id":"source/images/favicon.ico","hash":"606cc1173c28fff3aa35d966858ff721ec6e61d9","modified":1502366494267},{"_id":"source/images/logo.png","hash":"9ba7a355b0fba56417604b2e1aad7bd7e6a288c6","modified":1502366494267},{"_id":"source/images/photo.jpg","hash":"b8cff802145a8efcbf61e8fb8606c5e7a6fbd394","modified":1502366494273},{"_id":"source/about/index.md","hash":"96c6dc4e8d21a3ddb68d3d77148144d31301895c","modified":1502366494252},{"_id":"source/about/~$index.html","hash":"55fcebd75119d16c41eac3d1ef07ecd0f8f40f49","modified":1502366494252},{"_id":"source/_posts/ACM-A-B问题.md","hash":"dc3837deed50c4441d0795649176134cb82efe78","modified":1502366494218},{"_id":"source/_posts/ACM-单词拼接问题.md","hash":"6002f1e95f6e00090646fd91350258732794ea2d","modified":1502366494219},{"_id":"source/_posts/ACM-复杂排序问题.md","hash":"3454987f63c6ed8e7c5c3614887ebe8a58cf56e3","modified":1502366494220},{"_id":"source/_posts/ACM-奇偶分离问题.md","hash":"bb4938f7cf6765f333fd5dbd98a3d54c5165a742","modified":1502366494220},{"_id":"source/_posts/ACM-括号配对问题.md","hash":"e35b8871f4eec213c23718922ff5fa35b8a6b5db","modified":1502366494221},{"_id":"source/_posts/ACM-素数求和问题.md","hash":"9be8da3ad7f95e0163cd980455ea6c58fe00c258","modified":1502366494222},{"_id":"source/_posts/Android-6-0新特性-动态权限申请.md","hash":"29152e420eddcc849e588937d2cfdb7ab9e335ce","modified":1502366494223},{"_id":"source/_posts/Android-7-0新特性-FileUriExposedException.md","hash":"c68228d88d97b2486bad0c8b4aa86c0d61ebc053","modified":1502366494223},{"_id":"source/_posts/Android常用功能-点击隐藏虚拟键盘.md","hash":"c7121dc581cb62a60696307221a11bd53e07238e","modified":1502366494224},{"_id":"source/_posts/Android开源控件-MPAndroidChart.md","hash":"327f5e095f8e4c74c25c7b01487ae8d4e9b42dee","modified":1502366494225},{"_id":"source/_posts/Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题.md","hash":"98cd198ab962c33ee5bfa95688cdc6391d46ed1b","modified":1502366494225},{"_id":"source/_posts/Android疑难杂症-Glide加载圆角或圆形图片.md","hash":"e25105d4e7e9856d69cd0575cca240515110e261","modified":1502366494226},{"_id":"source/_posts/Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效.md","hash":"908e8d10cd43e2a3864138d3d9135cd741ba0615","modified":1502366494227},{"_id":"source/_posts/Android签名打包-指定apk文件名.md","hash":"4a6dbc86b8b6ded509e6c06ff7613484fb8933f8","modified":1502366494228},{"_id":"source/_posts/Android签名打包-获取Mac调试证书的SHA1.md","hash":"a7587ff5d2d506ed145e344f95850b2cc9a88fe6","modified":1502366494228},{"_id":"source/_posts/Android自定义控件-CameraCardCrop.md","hash":"ba396ee7655bcec892236a50980159f3e0e57115","modified":1502366494229},{"_id":"source/_posts/Android自定义控件-ZzExcelCreator.md","hash":"49e68a3549916507f5e4ba9e46a615b5e8ef769c","modified":1502366494230},{"_id":"source/_posts/Android自定义控件-ZzImageBox.md","hash":"e5f56ac067e6ec521ceec6aa4d3743471d8a4ba1","modified":1502366494230},{"_id":"source/_posts/Android自定义控件-ZzWeatherView.md","hash":"6e2dcdf7d5ebb4122632ccf6d8da3d04e4f2d70a","modified":1502366494231},{"_id":"source/_posts/IOS-pod的安装和使用.md","hash":"9e3690af8e85a73c40782f25d08062193ad84c51","modified":1502366494232},{"_id":"source/_posts/JavaEE-SpringMVC之pom-xml.md","hash":"ee8758cfcb34353cc567e7fee7fd959dcdfe41bd","modified":1502366494233},{"_id":"source/_posts/SQL-快速将Excel的数据导入数据库.md","hash":"3bfe35f4b7e14148da9220ba050e5d30b025f937","modified":1502366494233},{"_id":"source/_posts/Swift开源控件-汇总.md","hash":"7912f6fe7c9e121141ee65bcc80859bd41d98ab5","modified":1502366494234},{"_id":"source/_posts/Swift笔记-可选链.md","hash":"6ea72a874d2a14e295b6ee7b8f822a1c801db2b6","modified":1502366494237},{"_id":"source/_posts/Swift笔记-协议.md","hash":"d094c3ec678f6857090a67b46355fbfe94453b4c","modified":1502366494236},{"_id":"source/_posts/Swift笔记-下标脚本.md","hash":"3a593ef1732ec02ce3a9019ab12380f76b9cb3dc","modified":1502366494235},{"_id":"source/_posts/Swift笔记-基础部分.md","hash":"e60fdef0f7ca59fe63cbe1467a662a2384294a85","modified":1502366494238},{"_id":"source/_posts/Swift笔记-函数.md","hash":"d23d04f8ce3934e71ce4c73380e5c640aa4c2b14","modified":1502366494235},{"_id":"source/_posts/Swift笔记-字符串和字符.md","hash":"a4a29c85010780daab75e449762c81f723fa8898","modified":1502366494238},{"_id":"source/_posts/Swift笔记-属性.md","hash":"7df0c1747506f4ca65a9e71ae1bc8674e32b22a4","modified":1502366494239},{"_id":"source/_posts/Swift笔记-扩展.md","hash":"c4cd6758e313ead4057d94994ec69c18b3668167","modified":1502366494240},{"_id":"source/_posts/Swift笔记-控制流.md","hash":"27df441e61134d6206ad7228bad1284a992204cf","modified":1502366494241},{"_id":"source/_posts/Swift笔记-方法.md","hash":"9340548ed158c2c3657f963396a69cfdf4af0ac7","modified":1502366494241},{"_id":"source/_posts/Swift笔记-泛型.md","hash":"e605cd21325694ee938306f02221d194013ddd84","modified":1502366494243},{"_id":"source/_posts/Swift笔记-析构过程.md","hash":"c57d338d9112fb6f54b75bcc5fdda9a2f83f0f46","modified":1502366494242},{"_id":"source/_posts/Swift笔记-枚举.md","hash":"e2c71c4393666a3d5bf4658c394f012a59f57529","modified":1502366494243},{"_id":"source/_posts/Swift笔记-类型转换.md","hash":"d8f10555285ee2e4c971bcfaeda4f4fb5a58c827","modified":1502366494245},{"_id":"source/_posts/Swift笔记-类.md","hash":"b9114844b12804f0886631ca756c15df00ec9c2d","modified":1502366494244},{"_id":"source/_posts/Swift笔记-结构体.md","hash":"695c15b929506101d5fe2a3dce98942394a82954","modified":1502366494246},{"_id":"source/_posts/Swift笔记-自动引用计数.md","hash":"863ede0e94626b8c30a178c563e5617efc9e4797","modified":1502366494247},{"_id":"source/_posts/Swift笔记-继承.md","hash":"a1d1e114819f20d1f4ded2cbd3bab64fbe5df774","modified":1502366494246},{"_id":"source/_posts/Swift笔记-访问控制.md","hash":"96b08d54aa27d2d49ae24f4476a0b51e3b65467f","modified":1502366494248},{"_id":"source/_posts/Swift笔记-运算符.md","hash":"74db6fb38d37778bd15b095b691dd2e55a38b1b6","modified":1502366494248},{"_id":"source/_posts/Swift笔记-闭包.md","hash":"55e8493b39887acd35880e24662c3673233e0c17","modified":1502366494249},{"_id":"source/_posts/Swift笔记-集合类型.md","hash":"b1515ea626db818fa9c7e02071f625f6123d06fe","modified":1502366494250},{"_id":"source/_posts/使用hexo搭建github静态博客.md","hash":"bc64d36a1a9f96fa99fcb0a1fd7dea448984c43e","modified":1502366494251},{"_id":"themes/material-flow/layout/archive.ejs","hash":"ca51625164abe022be8a440fe62b5f66f5b4421b","modified":1501921808351},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1501921808352},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1501921808351},{"_id":"themes/material-flow/layout/layout.ejs","hash":"f493debff25d73371c536f9dc15414e2d0f54af2","modified":1501921808352},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1501921808353},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1501921808354},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1501921808354},{"_id":"themes/material-flow/source/style.less","hash":"a003dab76221b7a4076bb7a15a60dcc456fad672","modified":1501921808381},{"_id":"source/images/curve.png","hash":"145a2484a1f4251fa31c860577031d73c12c581e","modified":1502366494259},{"_id":"source/images/cameracrop1.png","hash":"129c2ec9e2a68a8bd8943a8922b8b01d8a17c6f7","modified":1502366494254},{"_id":"themes/material-flow/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1501921808363},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"302e04b505e04bc1bedaa050b64391ef1f2fcf24","modified":1501921808341},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"a92ccba847e9687b0d118a5de41837fa6d9bf8ee","modified":1501921808340},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"67a1281303e6e32607b232cb2a16c2d8878c011e","modified":1501921808342},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"c9c800d6a2245df41e8a8950c32aab45bc469812","modified":1501921808343},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"81bf99424865dd96bf970f5ff4cea2bdcb1562ce","modified":1501921808342},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"794b705cf6515cc7a6b927135d04c5bf351e1d86","modified":1502285384720},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"6a83c16809f7afa581a1b22be8a933d4e25f4b50","modified":1501921808346},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"02bd745f5177e589c7febe1ee1a02031c861b199","modified":1501921808345},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"97baa21b3428268128f764e89cd85e6d0274cd45","modified":1501921808347},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"9c936ea339d7b4b4453b9430452ef75beed2222c","modified":1501921808346},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"996da086a08172ed5f62876215c0c773ea62561a","modified":1502285074110},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"b092e0f1154ea7f7d045aa374e2fdbde1868022b","modified":1502284513680},{"_id":"themes/material-flow/layout/_widget/links.ejs","hash":"0d97efd3ebbac66923fb4b6b1dff9b701b623909","modified":1502285065007},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"99255c86abc1234443612ccbf758667375f4c26f","modified":1502285106726},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1501921808364},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1501921808366},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"d2f6755d619e577d90537e7e92640a2e1b833f6f","modified":1501921808365},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1501921808366},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"63e57a0fdd6138c8872f8cafa24b951eaf9fd564","modified":1501921808367},{"_id":"themes/material-flow/source/js/app.js","hash":"fbd6b7f2b270a68acf4a92d8519540a06ecaeab0","modified":1501921808368},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"498d2b1a5cfd53ce9b320c9ccd7d53ea7b04ffb7","modified":1501921808369},{"_id":"themes/material-flow/source/js/search.js","hash":"bd98ebee93f42ea04d10a7e77bda30fccdf67822","modified":1501921808370},{"_id":"themes/material-flow/source/less/_archive.less","hash":"306c2e1b4a62ba1a241d11efd3935f69178e0927","modified":1501921808371},{"_id":"themes/material-flow/source/less/_base.less","hash":"c29f0fa4763a869e390e84280fe907b86c1a90ac","modified":1501921808372},{"_id":"themes/material-flow/source/less/_article.less","hash":"50d24a52cb3ceeb3e37394bcb1bc32615bbb1cb1","modified":1501921808371},{"_id":"themes/material-flow/source/less/_defines.less","hash":"c3af828b05c4ae272dc64dd85d2ec1a76754e227","modified":1502285574510},{"_id":"themes/material-flow/source/less/_footer.less","hash":"712ff89e8a4085966ceb5130a07c0a05a2c380b2","modified":1501921808374},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"cdb77d9bd7a3e62ec3f29ece0b258719a8c5691c","modified":1501921808373},{"_id":"themes/material-flow/source/less/_header.less","hash":"83f4fef0a16299b47bcefb16bd5896e436027498","modified":1501921808375},{"_id":"themes/material-flow/source/less/_main.less","hash":"6dba91f400478b6ff526a671a0a6e841c32e3732","modified":1501921808375},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"08678839e42ca4fea4367a847f38464081a4d35b","modified":1501921808376},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1501921808377},{"_id":"themes/material-flow/source/less/_search.less","hash":"d3fdc7b15a80eb0b4204426c2351ea4464d167ff","modified":1501921808377},{"_id":"themes/material-flow/source/less/_side.less","hash":"196ca8a94a40b9bb6694e652bd449b7620a5d5f8","modified":1501921808378},{"_id":"themes/material-flow/source/less/_toc.less","hash":"0d46c18a05e7b26c416791b90a5bd3f4669c3268","modified":1501921808379},{"_id":"themes/material-flow/source/less/_tog.less","hash":"e3b62237766889538c3a6c63d93c888fc6f17a7f","modified":1501921808379},{"_id":"themes/material-flow/source/less/_typo.less","hash":"3bda056dae6ab2fe88b6aeed8c68e7a66d2f6204","modified":1501921808380},{"_id":"themes/material-flow/source/less/_widget.less","hash":"6fbeb4e44bcceeb7dcc4a12f1682672a2ee90596","modified":1501921808381},{"_id":"source/images/mpandroidchart2.png","hash":"7cdda3c16f4e27ced6aed880f022dfaaa5220723","modified":1502366494272},{"_id":"themes/material-flow/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1501921808357},{"_id":"source/images/disc.jpg","hash":"e52dee577a8c7c71ca331349053bedd715384173","modified":1502366494262},{"_id":"source/images/mpandroidcahrt.png","hash":"6f5ab923b1e9c6ca051d13df3408f9ec330ae6ce","modified":1502366494270},{"_id":"source/images/cameracrop2.png","hash":"62d520f3b0303c9a5b5e258b93a862518aede233","modified":1502366494257},{"_id":"themes/material-flow/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1501921808361},{"_id":"source/images/zzimagebox.gif","hash":"91f4c559f5840e81c1d816edfefca6b5072193fb","modified":1502366494279},{"_id":"public/content.json","hash":"79790ae945b2fd2e50a449d1908a7bc5c856e7f1","modified":1502366751451},{"_id":"public/atom.xml","hash":"d93651e32a0d3d7f74a5e80ed0ac34004b38c64c","modified":1502366751949},{"_id":"public/search.xml","hash":"615479cafe8749409fd1b61d4b5e65661359f118","modified":1502366751969},{"_id":"public/about/index.html","hash":"d536f4c26e13a2fc1b3e278e35a7b725ea4ee0f6","modified":1502366751980},{"_id":"public/about/~$index.html","hash":"9024eb0aaa04ede32ec2a634b4c5a421e96f7251","modified":1502366751980},{"_id":"public/2017/08/10/Android常用功能-点击隐藏虚拟键盘/index.html","hash":"e77da9ac0412dd058857cd9955279686a4ce9798","modified":1502366751980},{"_id":"public/2017/07/28/SQL-快速将Excel的数据导入数据库/index.html","hash":"1a3438124dea2685107a5508199e63e49691c209","modified":1502366751980},{"_id":"public/2017/07/28/Android签名打包-获取Mac调试证书的SHA1/index.html","hash":"fb1fdd233391fcd731865c8ac28fe5620cb84b71","modified":1502366751980},{"_id":"public/2017/07/27/Android签名打包-指定apk文件名/index.html","hash":"3104f213dc1ebeb072e5ed839f2fe3d6a5e0d237","modified":1502366751980},{"_id":"public/2017/07/18/Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题/index.html","hash":"2b8028cc699ee716bb3cbbe19bca06d05d4f4b5e","modified":1502366751980},{"_id":"public/2017/06/29/Swift开源控件-汇总/index.html","hash":"61c90696ee7b0a19afb0996fb4924adf5e9528e1","modified":1502366751980},{"_id":"public/2017/06/13/Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效/index.html","hash":"ac39bd889a9adb13753d7fdb5c8bf59dbb36703f","modified":1502366751980},{"_id":"public/2017/06/08/IOS-pod的安装和使用/index.html","hash":"1bd9cb7b5b020418c1b89611aa3ff8a21a1b436b","modified":1502366751980},{"_id":"public/2017/06/07/ACM-A-B问题/index.html","hash":"a3198adf3320179e48bb7c0580fb0012c812617c","modified":1502366751980},{"_id":"public/2017/06/06/Swift笔记-析构过程/index.html","hash":"bc2c2cc5802e811577d33f22922205905ac273d4","modified":1502366751980},{"_id":"public/categories/Android版本特性/index.html","hash":"d94e3a6ef86669718c83758f69d75d2201dff319","modified":1502366751980},{"_id":"public/categories/Android常用代码/index.html","hash":"025ca3b07840416aa1f9589108ee527a63ec298d","modified":1502366751980},{"_id":"public/categories/Android开源控件/index.html","hash":"bdf806d992b7663a567428dadd9bed8e84115183","modified":1502366751980},{"_id":"public/categories/Android疑难杂症/index.html","hash":"effa9981820d4b593ff765a1a4c9ca9e005a5e84","modified":1502366751980},{"_id":"public/categories/Android签名打包/index.html","hash":"dd084c7b81b6aa8574618912e783372cbba43910","modified":1502366751980},{"_id":"public/categories/Android自定义控件/index.html","hash":"e532b05c9c859dced444d6b9167422da9939b678","modified":1502366751980},{"_id":"public/categories/IOS/index.html","hash":"cefacb289b137ff68b88ec54e218b6dec6a07762","modified":1502366751980},{"_id":"public/categories/SpringMVC/index.html","hash":"d602ee994ea22a1c86754914e3c90e6c17ee86ea","modified":1502366751980},{"_id":"public/categories/SQL/index.html","hash":"7426711cb2cca9861fb11964daa32a2e39543a42","modified":1502366751980},{"_id":"public/categories/Swift开源控件/index.html","hash":"ff04e7b5468ddfd2591faea5abf4940260c6135f","modified":1502366751980},{"_id":"public/categories/Swift/page/3/index.html","hash":"10d2378386b8ad14fb0ce15cd590d18ff57e41d4","modified":1502366751980},{"_id":"public/categories/hexo/index.html","hash":"933177197d7b5a4cc6eb936476face3428c0b980","modified":1502366751980},{"_id":"public/tags/Android/page/2/index.html","hash":"b51669858b8bc9c53e0015e321a45bdccd55c313","modified":1502366751980},{"_id":"public/tags/IOS/index.html","hash":"1d114ea4872fe82833762e6d51713fa117c0932d","modified":1502366751980},{"_id":"public/tags/JavaEE/index.html","hash":"80994f491121f6045464272d7269c387ddd94c5a","modified":1502366751980},{"_id":"public/tags/SQL/index.html","hash":"9c5f54b414b9f38236626484751ea3b4615dec2b","modified":1502366751980},{"_id":"public/tags/Swift/page/3/index.html","hash":"7a8d6bd8ee6c86bba529df8b9120482a909f34d6","modified":1502366751981},{"_id":"public/tags/hexo/index.html","hash":"3ee4a4c0437b42becd4c26b28e2dbb3f90b60b5a","modified":1502366751981},{"_id":"public/archives/2017/07/index.html","hash":"6309d55ac8e95a52fbf08b5a6356755f50215a19","modified":1502366751981},{"_id":"public/archives/2017/08/index.html","hash":"006cac0e47b81af97565170b36a15b5d747822d7","modified":1502366751981},{"_id":"public/2017/07/27/Android疑难杂症-Glide加载圆角或圆形图片/index.html","hash":"166840443007a58806ccfd974a6b96910a79719e","modified":1502366751981},{"_id":"public/2017/07/20/JavaEE-SpringMVC之pom-xml/index.html","hash":"11a241060f8f48bfa16385f05a72e2ed7a86fd96","modified":1502366751981},{"_id":"public/2017/06/22/Android自定义控件-CameraCardCrop/index.html","hash":"008398235e7d14991f7e43d2b30fef3ceb2d28fa","modified":1502366751981},{"_id":"public/2017/06/21/Android开源控件-MPAndroidChart/index.html","hash":"c8371c4eb6a8f4a2fea886ce9a1025a45303d149","modified":1502366751981},{"_id":"public/2017/06/14/Android-6-0新特性-动态权限申请/index.html","hash":"eb27e5911b98fbb68b7a6b93d858682443f7685c","modified":1502366751981},{"_id":"public/2017/06/14/Android-7-0新特性-FileUriExposedException/index.html","hash":"17e0eb68b6344c54bc395519c2cd912147052f7a","modified":1502366751981},{"_id":"public/2017/06/14/Android自定义控件-ZzExcelCreator/index.html","hash":"62025a680529552541962450415a9fd4ae599b13","modified":1502366751981},{"_id":"public/2017/06/14/Android自定义控件-ZzImageBox/index.html","hash":"1b58b8c1ca2bb2de979bdd78d1d5c8343ad058d3","modified":1502366751981},{"_id":"public/2017/06/14/Android自定义控件-ZzWeatherView/index.html","hash":"50d0075827a410fbfa3217679d094238f41b8e37","modified":1502366751981},{"_id":"public/2017/06/08/ACM-单词拼接问题/index.html","hash":"017be31dda12faca5c72fa1ad3763c114ca7f152","modified":1502366751981},{"_id":"public/2017/06/07/ACM-复杂排序问题/index.html","hash":"c5fa98c10a65c8846dba4e28838c5ac362e90f27","modified":1502366751981},{"_id":"public/2017/06/07/ACM-奇偶分离问题/index.html","hash":"d09f75b92f0215875f363ca70179dbd48f529b11","modified":1502366751981},{"_id":"public/2017/06/07/ACM-素数求和问题/index.html","hash":"7ef5fe0f7785378f3c3b995a92313b0347ab37d6","modified":1502366751981},{"_id":"public/2017/06/07/ACM-括号配对问题/index.html","hash":"7d1d701dc6973950755cc3352a13e5e80553608c","modified":1502366751981},{"_id":"public/2017/06/07/Swift笔记-访问控制/index.html","hash":"ff254969c15eb1045d936009bb35d6343b2a8489","modified":1502366751981},{"_id":"public/2017/06/07/Swift笔记-泛型/index.html","hash":"1d1ac48c04dfc8aae752b36b63b0ffc9f889318b","modified":1502366751981},{"_id":"public/2017/06/07/Swift笔记-协议/index.html","hash":"7fe924929259be730d8bc47d84bde711a7828c2d","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-扩展/index.html","hash":"75eda8914511b2483babad89f137fc9587462f95","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-类型转换/index.html","hash":"09399fc6cc31b3b783d2c2a35600c5ca3830cee7","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-自动引用计数/index.html","hash":"16a29549eb05705785c893a41efc3b1fe19fa8c1","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-可选链/index.html","hash":"0920805d32a869559cbcea19e84d246600a54e6d","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-继承/index.html","hash":"f5a1f5017ef1ec57cde69ad40ae0190f2c09de6c","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-下标脚本/index.html","hash":"b5387aa7642ad3f62651aa81eb10a95eb696c82d","modified":1502366751981},{"_id":"public/2017/06/06/Swift笔记-方法/index.html","hash":"906dbfada254d08e7129eace8fc7c558cad34557","modified":1502366751982},{"_id":"public/2017/06/06/Swift笔记-属性/index.html","hash":"743b63f953e256796fdc64317173ecc5b28eff44","modified":1502366751982},{"_id":"public/2017/06/06/Swift笔记-类/index.html","hash":"e2c6e2e899ea457369b4593e5efdc8a36301a850","modified":1502366751982},{"_id":"public/2017/06/06/Swift笔记-结构体/index.html","hash":"6d9d5d3276ba423af683b92ee5191cc99417b672","modified":1502366751982},{"_id":"public/2017/06/06/Swift笔记-枚举/index.html","hash":"1ebf13880d20e3509227e7d185ba13db60a0c67a","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-闭包/index.html","hash":"26b14a02d5c3e1c6f79ef3b2e84be8efbaf81b87","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-函数/index.html","hash":"d22cfb70822453dc56707e4a6b6706f634cde122","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-控制流/index.html","hash":"9b11e4097f734e4af2363dd25b1e3b5727a3a62c","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-集合类型/index.html","hash":"c075760e6101176e33c89dcc0666f5420bf3b65b","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-字符串和字符/index.html","hash":"f4cbdfd259825321a476d9eda665ffb7d2658d97","modified":1502366751982},{"_id":"public/2017/06/05/Swift笔记-运算符/index.html","hash":"fa2c24500b35aba4ffda4374e135fe414b6d1cd1","modified":1502366751982},{"_id":"public/2017/06/02/Swift笔记-基础部分/index.html","hash":"2a614e5dc9d924df27a61b0b8a19e420083c4d80","modified":1502366751982},{"_id":"public/2017/06/01/使用hexo搭建github静态博客/index.html","hash":"99a4197a56383087a0cdf9b8e30706de1c4fae95","modified":1502366751982},{"_id":"public/categories/ACM/index.html","hash":"476a27d0038b3683841cb0d21d2608120d10fa8b","modified":1502366751982},{"_id":"public/categories/Swift/index.html","hash":"79a63450aaa7a3098541b1b7d297eefeb43a6788","modified":1502366751982},{"_id":"public/categories/Swift/page/2/index.html","hash":"786e5a01d1d7801b63b2d8d3ebd61fc8fe72fd71","modified":1502366751982},{"_id":"public/index.html","hash":"cddaf7098be7e2b2746f3d3c563235de54e5c20a","modified":1502366751982},{"_id":"public/page/2/index.html","hash":"cb64b3f1344ea889aeb8fc5c9d531d323afee31b","modified":1502366751982},{"_id":"public/page/3/index.html","hash":"be69aa6f567e996be4f5db457537d7b07090346d","modified":1502366751982},{"_id":"public/page/4/index.html","hash":"757e956232c91ec53cb6e63055ddd03234691f99","modified":1502366751982},{"_id":"public/page/5/index.html","hash":"c4ea3522a52f42990a8d11befef58274312e9468","modified":1502366751982},{"_id":"public/tags/ACM/index.html","hash":"4f90d4ac828e1e18d32400f2e89722812ad5b71d","modified":1502366751983},{"_id":"public/tags/Android/index.html","hash":"51b17e72390d208e3430fbc12283c82c58dfc401","modified":1502366751983},{"_id":"public/tags/Swift/index.html","hash":"f83fc74e506fe98b83e6727daa97f790cf4791a1","modified":1502366751983},{"_id":"public/tags/Swift/page/2/index.html","hash":"564ae117b2611efbf54632b627f97de0925d2c37","modified":1502366751983},{"_id":"public/archives/index.html","hash":"1fb2b064297378c1da3c544598983f3d8d03d1e0","modified":1502366751983},{"_id":"public/archives/page/2/index.html","hash":"ba6c38c4ea65d27082f2546e55251b037fe790f2","modified":1502366751983},{"_id":"public/archives/page/3/index.html","hash":"9bfeac8aa3b8a1ca476f91df38d6b9556e41083e","modified":1502366751983},{"_id":"public/archives/page/4/index.html","hash":"2b74509f6cd1b72f438df7acce86be17d245503c","modified":1502366751983},{"_id":"public/archives/page/5/index.html","hash":"3c1a30874d35e22a7856097ad25a872179b9309f","modified":1502366751983},{"_id":"public/archives/2017/index.html","hash":"28e1d060b56078931591b17e0f070f1d16625f2f","modified":1502366751983},{"_id":"public/archives/2017/page/2/index.html","hash":"e46884fc29f661d81782eb7e7ac6f095015d47bc","modified":1502366751983},{"_id":"public/archives/2017/page/3/index.html","hash":"eb61ef4094200efe9f3442aff68554dc558c1c1a","modified":1502366751983},{"_id":"public/archives/2017/page/4/index.html","hash":"959f1e23da70aca813485671e4cbc56a1f67a21d","modified":1502366751983},{"_id":"public/archives/2017/page/5/index.html","hash":"18d6aec4840b0d9d24dfd231d1aa432eeea9144f","modified":1502366751983},{"_id":"public/archives/2017/06/index.html","hash":"bf97bb985d4abbd8b71084e1444871906ace0d1e","modified":1502366751983},{"_id":"public/archives/2017/06/page/2/index.html","hash":"9c65b29579acd53f621017831916cb9fcb08b0c4","modified":1502366751983},{"_id":"public/archives/2017/06/page/3/index.html","hash":"3ed963d198d361f334710c05638a8fb31014881c","modified":1502366751983},{"_id":"public/archives/2017/06/page/4/index.html","hash":"f56f83d99a17886e217d78bb421a52282d269bf8","modified":1502366751983},{"_id":"public/images/excel.gif","hash":"aadd61b7f8965fe76efb54567df2ddaf350faacc","modified":1502366751993},{"_id":"public/images/excel1.jpg","hash":"5b7f7d78b829ad3860d29e8a3e9cc3d6c0f2a22f","modified":1502366751993},{"_id":"public/images/favicon.ico","hash":"606cc1173c28fff3aa35d966858ff721ec6e61d9","modified":1502366751993},{"_id":"public/images/logo.png","hash":"9ba7a355b0fba56417604b2e1aad7bd7e6a288c6","modified":1502366751993},{"_id":"public/images/photo.jpg","hash":"b8cff802145a8efcbf61e8fb8606c5e7a6fbd394","modified":1502366751993},{"_id":"public/images/excel2.jpg","hash":"44a78424dda6f3835ce98652820bce07c42fff39","modified":1502366751993},{"_id":"public/images/excel3.jpg","hash":"768475cdde509f02883e7e6a24e47b2f678a8033","modified":1502366751993},{"_id":"public/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1502366751993},{"_id":"public/fonts/icomoon.svg","hash":"d2f6755d619e577d90537e7e92640a2e1b833f6f","modified":1502366751993},{"_id":"public/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1502366751993},{"_id":"public/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1502366751993},{"_id":"public/images/curve.png","hash":"145a2484a1f4251fa31c860577031d73c12c581e","modified":1502366752005},{"_id":"public/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1502366752010},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1502366752010},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1502366752010},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1502366752010},{"_id":"public/images/cameracrop1.png","hash":"129c2ec9e2a68a8bd8943a8922b8b01d8a17c6f7","modified":1502366752010},{"_id":"public/images/mpandroidchart2.png","hash":"7cdda3c16f4e27ced6aed880f022dfaaa5220723","modified":1502366752012},{"_id":"public/images/disc.jpg","hash":"e52dee577a8c7c71ca331349053bedd715384173","modified":1502366752017},{"_id":"public/images/mpandroidcahrt.png","hash":"6f5ab923b1e9c6ca051d13df3408f9ec330ae6ce","modified":1502366752017},{"_id":"public/images/cameracrop2.png","hash":"62d520f3b0303c9a5b5e258b93a862518aede233","modified":1502366752036},{"_id":"public/style.css","hash":"2dfcaabaf673895c33737f80fa65bf3fca42d1e1","modified":1502366752294},{"_id":"public/images/zzimagebox.gif","hash":"91f4c559f5840e81c1d816edfefca6b5072193fb","modified":1502366752385}],"Category":[{"name":"ACM","_id":"cj66edfrr0004wou58jmml444"},{"name":"Android版本特性","_id":"cj66edfs8000owou58qnutp9v"},{"name":"Android常用代码","_id":"cj66edfsl0014wou5aenbyh7w"},{"name":"Android开源控件","_id":"cj66edfso001bwou5444ypujf"},{"name":"Android疑难杂症","_id":"cj66edfsr001iwou5364qzagf"},{"name":"Android签名打包","_id":"cj66edft20023wou521iu12xb"},{"name":"Android自定义控件","_id":"cj66edft7002ewou56130d89w"},{"name":"IOS","_id":"cj66edftk0035wou56mra6ghz"},{"name":"SpringMVC","_id":"cj66edfto003ewou5kkrr37yj"},{"name":"SQL","_id":"cj66edftr003lwou5pnebh4up"},{"name":"Swift开源控件","_id":"cj66edftu003rwou5hcxbfow4"},{"name":"Swift","_id":"cj66edftz003xwou5fjum9kvh"},{"name":"hexo","_id":"cj66edfuj005fwou5yeuazok6"}],"Data":[],"Page":[{"title":"关于我","date":"2017-06-01T08:19:18.000Z","_content":"\n![头像](/images/photo.jpg)\n\n* Positiion : Android开发工程师\n* Email : admin@zhouzhuo810.me\n* QQ : 244570672\n* Github: [https://github.com/zhouzhuo810](https://github.com/zhouzhuo810)\n* 简书: [去看看](http://www.jianshu.com/u/df02ae5d5e46)\n* 个人网站: [去看看](http://www.zhouzhuo810.me/)","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-06-01 16:19:18\n---\n\n![头像](/images/photo.jpg)\n\n* Positiion : Android开发工程师\n* Email : admin@zhouzhuo810.me\n* QQ : 244570672\n* Github: [https://github.com/zhouzhuo810](https://github.com/zhouzhuo810)\n* 简书: [去看看](http://www.jianshu.com/u/df02ae5d5e46)\n* 个人网站: [去看看](http://www.zhouzhuo810.me/)","updated":"2017-08-10T12:01:34.252Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj66edfrk0000wou570cw0ekb","content":"<p><img src=\"/images/photo.jpg\" alt=\"头像\"></p>\n<ul>\n<li>Positiion : Android开发工程师</li>\n<li>Email : admin@zhouzhuo810.me</li>\n<li>QQ : 244570672</li>\n<li>Github: <a href=\"https://github.com/zhouzhuo810\" target=\"_blank\" rel=\"external\">https://github.com/zhouzhuo810</a></li>\n<li>简书: <a href=\"http://www.jianshu.com/u/df02ae5d5e46\" target=\"_blank\" rel=\"external\">去看看</a></li>\n<li>个人网站: <a href=\"http://www.zhouzhuo810.me/\" target=\"_blank\" rel=\"external\">去看看</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/photo.jpg\" alt=\"头像\"></p>\n<ul>\n<li>Positiion : Android开发工程师</li>\n<li>Email : admin@zhouzhuo810.me</li>\n<li>QQ : 244570672</li>\n<li>Github: <a href=\"https://github.com/zhouzhuo810\" target=\"_blank\" rel=\"external\">https://github.com/zhouzhuo810</a></li>\n<li>简书: <a href=\"http://www.jianshu.com/u/df02ae5d5e46\" target=\"_blank\" rel=\"external\">去看看</a></li>\n<li>个人网站: <a href=\"http://www.zhouzhuo810.me/\" target=\"_blank\" rel=\"external\">去看看</a></li>\n</ul>\n"},{"_content":"\u0003998\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u00009\u00009\u00008\u0000\u0000\u0000\u0000\u0000\u0005\u0000D\u0000o\u0000t\u0000u\u0000m\u0000��*2\u0000\u0000\u0000\u0000��*2�]�2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p^�2\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 _�2\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000�_�2\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000�`�2\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000Xa�2\u0000\u0000\u0000\u0000","source":"about/~$index.html","raw":"\u0003998\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u00009\u00009\u00008\u0000\u0000\u0000\u0000\u0000\u0005\u0000D\u0000o\u0000t\u0000u\u0000m\u0000��*2\u0000\u0000\u0000\u0000��*2�]�2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p^�2\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 _�2\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000�_�2\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000�`�2\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000Xa�2\u0000\u0000\u0000\u0000","date":"2017-08-10T12:01:34.252Z","updated":"2017-08-10T12:01:34.252Z","path":"about/~$index.html","title":"","comments":1,"layout":"page","_id":"cj66edfrp0002wou5jhr2vyu6","content":"\u0003998\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u00009\u00009\u00008\u0000\u0000\u0000\u0000\u0000\u0005\u0000D\u0000o\u0000t\u0000u\u0000m\u0000��*2\u0000\u0000\u0000\u0000��*2�]�2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p^�2\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 _�2\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000�_�2\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000�`�2\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000Xa�2\u0000\u0000\u0000\u0000","site":{"data":{}},"excerpt":"","more":"\u0003998\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u00009\u00009\u00008\u0000\u0000\u0000\u0000\u0000\u0005\u0000D\u0000o\u0000t\u0000u\u0000m\u0000��*2\u0000\u0000\u0000\u0000��*2�]�2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p^�2\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 _�2\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000�_�2\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000�`�2\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000Xa�2\u0000\u0000\u0000\u0000"}],"Post":[{"title":"ACM-(A+B问题)","date":"2017-06-07T06:35:15.000Z","_content":"\n**描述**\n\n此题为练手用题，请大家计算一下a+b的值.\n\n**输入**\n\n输入两个数，a,b\n\n**输出**\n\n输出a+b的值\n\n**样例输入**\n\n```\n2 3\n```\n\n\n样例输出\n\n```\n5\n```\n\n<!-- more -->\n\n## 参考答案\n\n### C语言版\n\n```C\n#include<stdio.h>\nint main()\n{\nint a,b;\nscanf(\"%d%d\",&a,&b);\nprintf(\"%d\\n\",a+b);\n}\n```\n\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main\n{\npublic static void main(String args[]) throws Exception\n{\nScanner cin=new Scanner(System.in);\nint a=cin.nextInt(),b=cin.nextInt();\nSystem.out.println(a+b);\n}\n}\n```\n","source":"_posts/ACM-A-B问题.md","raw":"---\ntitle: ACM-(A+B问题)\ndate: 2017-06-07 14:35:15\ntags: \n\t- ACM \ncategories: ACM \n---\n\n**描述**\n\n此题为练手用题，请大家计算一下a+b的值.\n\n**输入**\n\n输入两个数，a,b\n\n**输出**\n\n输出a+b的值\n\n**样例输入**\n\n```\n2 3\n```\n\n\n样例输出\n\n```\n5\n```\n\n<!-- more -->\n\n## 参考答案\n\n### C语言版\n\n```C\n#include<stdio.h>\nint main()\n{\nint a,b;\nscanf(\"%d%d\",&a,&b);\nprintf(\"%d\\n\",a+b);\n}\n```\n\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main\n{\npublic static void main(String args[]) throws Exception\n{\nScanner cin=new Scanner(System.in);\nint a=cin.nextInt(),b=cin.nextInt();\nSystem.out.println(a+b);\n}\n}\n```\n","slug":"ACM-A-B问题","published":1,"updated":"2017-08-10T12:01:34.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfrl0001wou5kw8h16cd","content":"<p><strong>描述</strong></p>\n<p>此题为练手用题，请大家计算一下a+b的值.</p>\n<p><strong>输入</strong></p>\n<p>输入两个数，a,b</p>\n<p><strong>输出</strong></p>\n<p>输出a+b的值</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2 3</div></pre></td></tr></table></figure>\n<p>样例输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">5</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"C语言版\"><a href=\"#C语言版\" class=\"headerlink\" title=\"C语言版\"></a>C语言版</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> a,b;</div><div class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a+b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">&#123;</div><div class=\"line\">Scanner cin=<span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"><span class=\"keyword\">int</span> a=cin.nextInt(),b=cin.nextInt();</div><div class=\"line\">System.out.println(a+b);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>此题为练手用题，请大家计算一下a+b的值.</p>\n<p><strong>输入</strong></p>\n<p>输入两个数，a,b</p>\n<p><strong>输出</strong></p>\n<p>输出a+b的值</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2 3</div></pre></td></tr></table></figure>\n<p>样例输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">5</div></pre></td></tr></table></figure>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"C语言版\"><a href=\"#C语言版\" class=\"headerlink\" title=\"C语言版\"></a>C语言版</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> a,b;</div><div class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a+b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">&#123;</div><div class=\"line\">Scanner cin=<span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"><span class=\"keyword\">int</span> a=cin.nextInt(),b=cin.nextInt();</div><div class=\"line\">System.out.println(a+b);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ACM-(奇偶分离问题)","date":"2017-06-07T07:46:07.000Z","_content":"\n\n**描述**\n\n有一个整型偶数n(2<= n <=10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。\n\n**输入**\n\n第一行有一个整数i（2<=i<30)表示有 i 组测试数据；\n每组有一个整型偶数n。\n\n**输出**\n\n第一行输出所有的奇数\n第二行输出所有的偶数\n\n**样例输入**\n\n```\n2\n10\n14\n```\n\n**样例输出**\n\n```\n1 3 5 7 9 \n2 4 6 8 10 \n\n1 3 5 7 9 11 13 \n2 4 6 8 10 12 14\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint count = sc.nextInt();\n\t\tString[] result = new String[count];\n\t\tfor(int i=0; i<count; i++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tStringBuilder sbj = new StringBuilder();\n\t\t\tStringBuilder sbo = new StringBuilder();\n\t\t\tfor (int j=1; j<=n; j++) {\n\t\t\t\tif (isOval(j)) {\n\t\t\t\t\tsbo.append(j).append(\" \");\n\t\t\t\t} else {\n\t\t\t\t\tsbj.append(j).append(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = sbj.toString()+\"\\n\"+sbo.toString();\n\t\t}\n\n\t\tfor (int i=0; i<count; i++) {\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n\n\tpublic static boolean isOval(int i) {\n\t\treturn i%2==0;\n\t}\n}\n```\n","source":"_posts/ACM-奇偶分离问题.md","raw":"---\ntitle: ACM-(奇偶分离问题)\ndate: 2017-06-07 15:46:07\ntags: \n\t- ACM \ncategories: ACM \n---\n\n\n**描述**\n\n有一个整型偶数n(2<= n <=10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。\n\n**输入**\n\n第一行有一个整数i（2<=i<30)表示有 i 组测试数据；\n每组有一个整型偶数n。\n\n**输出**\n\n第一行输出所有的奇数\n第二行输出所有的偶数\n\n**样例输入**\n\n```\n2\n10\n14\n```\n\n**样例输出**\n\n```\n1 3 5 7 9 \n2 4 6 8 10 \n\n1 3 5 7 9 11 13 \n2 4 6 8 10 12 14\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint count = sc.nextInt();\n\t\tString[] result = new String[count];\n\t\tfor(int i=0; i<count; i++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tStringBuilder sbj = new StringBuilder();\n\t\t\tStringBuilder sbo = new StringBuilder();\n\t\t\tfor (int j=1; j<=n; j++) {\n\t\t\t\tif (isOval(j)) {\n\t\t\t\t\tsbo.append(j).append(\" \");\n\t\t\t\t} else {\n\t\t\t\t\tsbj.append(j).append(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = sbj.toString()+\"\\n\"+sbo.toString();\n\t\t}\n\n\t\tfor (int i=0; i<count; i++) {\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n\n\tpublic static boolean isOval(int i) {\n\t\treturn i%2==0;\n\t}\n}\n```\n","slug":"ACM-奇偶分离问题","published":1,"updated":"2017-08-10T12:01:34.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfrp0003wou5jdzry7yh","content":"<p><strong>描述</strong></p>\n<p>有一个整型偶数n(2&lt;= n &lt;=10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>\n<p><strong>输入</strong></p>\n<p>第一行有一个整数i（2&lt;=i&lt;30)表示有 i 组测试数据；<br>每组有一个整型偶数n。</p>\n<p><strong>输出</strong></p>\n<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">10</div><div class=\"line\">14</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 3 5 7 9 </div><div class=\"line\">2 4 6 8 10 </div><div class=\"line\"></div><div class=\"line\">1 3 5 7 9 11 13 </div><div class=\"line\">2 4 6 8 10 12 14</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = sc.nextInt();</div><div class=\"line\">\t\tString[] result = <span class=\"keyword\">new</span> String[count];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\tStringBuilder sbj = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\tStringBuilder sbo = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=n; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isOval(j)) &#123;</div><div class=\"line\">\t\t\t\t\tsbo.append(j).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tsbj.append(j).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tresult[i] = sbj.toString()+<span class=\"string\">\"\\n\"</span>+sbo.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(result[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOval</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i%<span class=\"number\">2</span>==<span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>有一个整型偶数n(2&lt;= n &lt;=10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>\n<p><strong>输入</strong></p>\n<p>第一行有一个整数i（2&lt;=i&lt;30)表示有 i 组测试数据；<br>每组有一个整型偶数n。</p>\n<p><strong>输出</strong></p>\n<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">10</div><div class=\"line\">14</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 3 5 7 9 </div><div class=\"line\">2 4 6 8 10 </div><div class=\"line\"></div><div class=\"line\">1 3 5 7 9 11 13 </div><div class=\"line\">2 4 6 8 10 12 14</div></pre></td></tr></table></figure>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = sc.nextInt();</div><div class=\"line\">\t\tString[] result = <span class=\"keyword\">new</span> String[count];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\t\tStringBuilder sbj = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\tStringBuilder sbo = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=n; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isOval(j)) &#123;</div><div class=\"line\">\t\t\t\t\tsbo.append(j).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tsbj.append(j).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tresult[i] = sbj.toString()+<span class=\"string\">\"\\n\"</span>+sbo.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(result[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOval</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i%<span class=\"number\">2</span>==<span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ACM-单词拼接问题","date":"2017-06-08T02:37:50.000Z","_content":"\n\n**描述**\n\n给你一些单词，请你判断能否把它们首尾串起来串成一串。\n\n前一个单词的结尾应该与下一个单词的道字母相同。\n\n**输入**\n\n第一行是一个整数N(0<N<20)，表示测试数据的组数\n每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2<M<1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。\n\n**输出**\n\n如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号\".\")\n如果不存在拼接方案，则输出\n\n```\n***\n```\n\n\n**样例输入**\n\n```\n2\n6\naloha\narachnid\ndog\ngopher\nrat\ntiger\n3\noak\nmaple\nelm\n```\n\n**样例输出**\n\n```\naloha.arachnid.dog.gopher.rat.tiger\n***\n```\n\n<!-- more -->\n\n\n## 参考答案\n\n### Java版\n\n```java\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Stack;\n//欧拉通路(路径) 只有一个点的入度比出度小一, 一个点的出度比入度大一 其余点的入度与出度相等\n//欧拉回路 所有点的入度与出度相等\n//并查集判断连通性 只有一个点的父节点是他本身\n//消圈算法遍历结果\n  \nclass Node {\n\tQueue<String> queue = new PriorityQueue<String>();// 首字母相同的单词可能有多个\n}\n  \npublic class Main {\n\tpublic static final int LEN = 26;\n\tprivate int start;\n\tprivate int[] father, num, inDegree, outDegree;\n\tprivate Node[] nodes;\n  \n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t, n;\n\t\tMain main;\n\t\tString str;\n\t\tNode[] nodes = new Node[LEN];\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tnodes[i] = new Node();\n\t\t}\n\t\tt = sc.nextInt();\n\t\twhile (t-- != 0) {\n\t\t\tn = sc.nextInt();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tstr = sc.next();\n\t\t\t\tnodes[str.charAt(0) - 'a'].queue.add(str);// 单词首字母\n\t\t\t}\n\t\t\tmain = new Main(nodes);\n\t\t\tmain.execute();\n\t\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\t\tnodes[i].queue.clear();\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t}\n  \n\tpublic Main(Node[] nodes) {\n\t\tthis.nodes = nodes;\n\t\tfather = new int[LEN];\n\t\tnum = new int[LEN];\n\t\tinDegree = new int[LEN];\n\t\toutDegree = new int[LEN];\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tfather[i] = i;\n\t\t\tnum[i] = 1;\n\t\t}\n\t\tfor (int i = 0, start, end; i < LEN; i++) {\n\t\t\tfor (String str : nodes[i].queue) {\n\t\t\t\tstart = str.charAt(0) - 'a';// 单词首\n\t\t\t\tend = str.charAt(str.length() - 1) - 'a';// 单词尾\n\t\t\t\tinDegree[end]++;\n\t\t\t\toutDegree[start]++;\n\t\t\t\tstart = find(start);\n\t\t\t\tend = find(end);\n\t\t\t\tif (start != end) {\n\t\t\t\t\tunion(start, end);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\tprivate int find(int i) {\n\t\treturn i == father[i] ? i : find(father[i]);\n\t}\n  \n\tprivate void union(int i, int j) {\n\t\tfather[i] = j;\n\t}\n  \n\tprivate boolean isEularRoute() {\n\t\tstart = -1;\n\t\tint count = 0;\n\t\tboolean find = false;\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tif (inDegree[i] != outDegree[i]) {\n\t\t\t\tif (Math.abs(inDegree[i] - outDegree[i]) != 1)\n\t\t\t\t\treturn false;\n\t\t\t\tif (!find && inDegree[i] < outDegree[i]) {\n\t\t\t\t\tfind = true;\n\t\t\t\t\tstart = i;\n\t\t\t\t}\n\t\t\t\tif (++count > 2)\n\t\t\t\t\treturn false;\n\t\t\t} else if (outDegree[i] > 0 && start == -1) {\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n  \n\tprivate boolean isConnected() {\n\t\tfor (int i = 0, count = 0; i < LEN; i++) {\n\t\t\tif (outDegree[i] > 0 && father[i] == i) {\n\t\t\t\tif (++count > 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n  \n\tprivate void printResult(int i) {\n\t\tdfs(i);\n\t\tif (!stack.isEmpty())\n\t\t\tSystem.out.print(stack.pop());\n\t\twhile (!stack.isEmpty()) {\n\t\t\tSystem.out.print(\".\" + stack.pop());\n\t\t}\n\t\tSystem.out.println();\n\t}\n  \n\tStack<String> stack = new Stack<String>();\n  \n\tprivate void dfs(int i) {\n\t\twhile (!nodes[i].queue.isEmpty()) {\n\t\t\tString str = nodes[i].queue.poll();\n\t\t\tdfs(str.charAt(str.length() - 1) - 'a');\n\t\t\tstack.push(str);\n\t\t}\n\t}\n  \n\tpublic void execute() {\n\t\tif (!isConnected() || !isEularRoute()) {\n\t\t\tSystem.out.println(\"***\");\n\t\t\treturn;\n\t\t}\n\t\tprintResult(start);\n\t}\n}\n  \n/**\n * 欧拉回路:若图G中存在这样一条路径，使得它恰通过G中每条边一次，则称该路径为欧拉路径。若该路径是一个圈， 则成为欧拉回路。\n * 具有欧拉回路的图成为欧拉图，具有欧拉路径但不具有欧拉回路的图成为半欧拉图。 1.无向连通图G是欧拉图，当且仅当G不含奇数度结点(G的所有结点度数为偶数)；\n * 2.无向连通图G含有欧拉通路，当且仅当G有零个或两个奇数度的结点； 3.有向连通图D是欧拉图，当且仅当该图为连通图且D中每个结点的入度=出度\n * 4.有向连通图D含有欧拉通路，当且仅当该图为连通图且D中除两个结点外， 其余每个结点的入度=出度，且此两点满足deg－(u)－deg+(v)=±1。\n * （起始点s的入度=出度-1，结束点t的出度=入度-1 或两个点的入度=出度）\n *\n * 连通图：若图中任意两点都是连通的，则该图是连通图。\n */\n```","source":"_posts/ACM-单词拼接问题.md","raw":"---\ntitle: ACM-单词拼接问题\ndate: 2017-06-08 10:37:50\ntags: \n\t- ACM \ncategories: ACM \n---\n\n\n**描述**\n\n给你一些单词，请你判断能否把它们首尾串起来串成一串。\n\n前一个单词的结尾应该与下一个单词的道字母相同。\n\n**输入**\n\n第一行是一个整数N(0<N<20)，表示测试数据的组数\n每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2<M<1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。\n\n**输出**\n\n如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号\".\")\n如果不存在拼接方案，则输出\n\n```\n***\n```\n\n\n**样例输入**\n\n```\n2\n6\naloha\narachnid\ndog\ngopher\nrat\ntiger\n3\noak\nmaple\nelm\n```\n\n**样例输出**\n\n```\naloha.arachnid.dog.gopher.rat.tiger\n***\n```\n\n<!-- more -->\n\n\n## 参考答案\n\n### Java版\n\n```java\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Stack;\n//欧拉通路(路径) 只有一个点的入度比出度小一, 一个点的出度比入度大一 其余点的入度与出度相等\n//欧拉回路 所有点的入度与出度相等\n//并查集判断连通性 只有一个点的父节点是他本身\n//消圈算法遍历结果\n  \nclass Node {\n\tQueue<String> queue = new PriorityQueue<String>();// 首字母相同的单词可能有多个\n}\n  \npublic class Main {\n\tpublic static final int LEN = 26;\n\tprivate int start;\n\tprivate int[] father, num, inDegree, outDegree;\n\tprivate Node[] nodes;\n  \n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t, n;\n\t\tMain main;\n\t\tString str;\n\t\tNode[] nodes = new Node[LEN];\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tnodes[i] = new Node();\n\t\t}\n\t\tt = sc.nextInt();\n\t\twhile (t-- != 0) {\n\t\t\tn = sc.nextInt();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tstr = sc.next();\n\t\t\t\tnodes[str.charAt(0) - 'a'].queue.add(str);// 单词首字母\n\t\t\t}\n\t\t\tmain = new Main(nodes);\n\t\t\tmain.execute();\n\t\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\t\tnodes[i].queue.clear();\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t}\n  \n\tpublic Main(Node[] nodes) {\n\t\tthis.nodes = nodes;\n\t\tfather = new int[LEN];\n\t\tnum = new int[LEN];\n\t\tinDegree = new int[LEN];\n\t\toutDegree = new int[LEN];\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tfather[i] = i;\n\t\t\tnum[i] = 1;\n\t\t}\n\t\tfor (int i = 0, start, end; i < LEN; i++) {\n\t\t\tfor (String str : nodes[i].queue) {\n\t\t\t\tstart = str.charAt(0) - 'a';// 单词首\n\t\t\t\tend = str.charAt(str.length() - 1) - 'a';// 单词尾\n\t\t\t\tinDegree[end]++;\n\t\t\t\toutDegree[start]++;\n\t\t\t\tstart = find(start);\n\t\t\t\tend = find(end);\n\t\t\t\tif (start != end) {\n\t\t\t\t\tunion(start, end);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\tprivate int find(int i) {\n\t\treturn i == father[i] ? i : find(father[i]);\n\t}\n  \n\tprivate void union(int i, int j) {\n\t\tfather[i] = j;\n\t}\n  \n\tprivate boolean isEularRoute() {\n\t\tstart = -1;\n\t\tint count = 0;\n\t\tboolean find = false;\n\t\tfor (int i = 0; i < LEN; i++) {\n\t\t\tif (inDegree[i] != outDegree[i]) {\n\t\t\t\tif (Math.abs(inDegree[i] - outDegree[i]) != 1)\n\t\t\t\t\treturn false;\n\t\t\t\tif (!find && inDegree[i] < outDegree[i]) {\n\t\t\t\t\tfind = true;\n\t\t\t\t\tstart = i;\n\t\t\t\t}\n\t\t\t\tif (++count > 2)\n\t\t\t\t\treturn false;\n\t\t\t} else if (outDegree[i] > 0 && start == -1) {\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n  \n\tprivate boolean isConnected() {\n\t\tfor (int i = 0, count = 0; i < LEN; i++) {\n\t\t\tif (outDegree[i] > 0 && father[i] == i) {\n\t\t\t\tif (++count > 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n  \n\tprivate void printResult(int i) {\n\t\tdfs(i);\n\t\tif (!stack.isEmpty())\n\t\t\tSystem.out.print(stack.pop());\n\t\twhile (!stack.isEmpty()) {\n\t\t\tSystem.out.print(\".\" + stack.pop());\n\t\t}\n\t\tSystem.out.println();\n\t}\n  \n\tStack<String> stack = new Stack<String>();\n  \n\tprivate void dfs(int i) {\n\t\twhile (!nodes[i].queue.isEmpty()) {\n\t\t\tString str = nodes[i].queue.poll();\n\t\t\tdfs(str.charAt(str.length() - 1) - 'a');\n\t\t\tstack.push(str);\n\t\t}\n\t}\n  \n\tpublic void execute() {\n\t\tif (!isConnected() || !isEularRoute()) {\n\t\t\tSystem.out.println(\"***\");\n\t\t\treturn;\n\t\t}\n\t\tprintResult(start);\n\t}\n}\n  \n/**\n * 欧拉回路:若图G中存在这样一条路径，使得它恰通过G中每条边一次，则称该路径为欧拉路径。若该路径是一个圈， 则成为欧拉回路。\n * 具有欧拉回路的图成为欧拉图，具有欧拉路径但不具有欧拉回路的图成为半欧拉图。 1.无向连通图G是欧拉图，当且仅当G不含奇数度结点(G的所有结点度数为偶数)；\n * 2.无向连通图G含有欧拉通路，当且仅当G有零个或两个奇数度的结点； 3.有向连通图D是欧拉图，当且仅当该图为连通图且D中每个结点的入度=出度\n * 4.有向连通图D含有欧拉通路，当且仅当该图为连通图且D中除两个结点外， 其余每个结点的入度=出度，且此两点满足deg－(u)－deg+(v)=±1。\n * （起始点s的入度=出度-1，结束点t的出度=入度-1 或两个点的入度=出度）\n *\n * 连通图：若图中任意两点都是连通的，则该图是连通图。\n */\n```","slug":"ACM-单词拼接问题","published":1,"updated":"2017-08-10T12:01:34.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfru0006wou5hrwvejx8","content":"<p><strong>描述</strong></p>\n<p>给你一些单词，请你判断能否把它们首尾串起来串成一串。</p>\n<p>前一个单词的结尾应该与下一个单词的道字母相同。</p>\n<p><strong>输入</strong></p>\n<p>第一行是一个整数N(0&lt;N&lt;20)，表示测试数据的组数<br>每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2&lt;M&lt;1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。</p>\n<p><strong>输出</strong></p>\n<p>如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号”.”)<br>如果不存在拼接方案，则输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">***</div></pre></td></tr></table></figure>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">6</div><div class=\"line\">aloha</div><div class=\"line\">arachnid</div><div class=\"line\">dog</div><div class=\"line\">gopher</div><div class=\"line\">rat</div><div class=\"line\">tiger</div><div class=\"line\">3</div><div class=\"line\">oak</div><div class=\"line\">maple</div><div class=\"line\">elm</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">aloha.arachnid.dog.gopher.rat.tiger</div><div class=\"line\">***</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</div><div class=\"line\"><span class=\"comment\">//欧拉通路(路径) 只有一个点的入度比出度小一, 一个点的出度比入度大一 其余点的入度与出度相等</span></div><div class=\"line\"><span class=\"comment\">//欧拉回路 所有点的入度与出度相等</span></div><div class=\"line\"><span class=\"comment\">//并查集判断连通性 只有一个点的父节点是他本身</span></div><div class=\"line\"><span class=\"comment\">//消圈算法遍历结果</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</div><div class=\"line\">\tQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> PriorityQueue&lt;String&gt;();<span class=\"comment\">// 首字母相同的单词可能有多个</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEN = <span class=\"number\">26</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] father, num, inDegree, outDegree;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node[] nodes;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t, n;</div><div class=\"line\">\t\tMain main;</div><div class=\"line\">\t\tString str;</div><div class=\"line\">\t\tNode[] nodes = <span class=\"keyword\">new</span> Node[LEN];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\tnodes[i] = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tt = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (t-- != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tn = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">\t\t\t\tstr = sc.next();</div><div class=\"line\">\t\t\t\tnodes[str.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>].queue.add(str);<span class=\"comment\">// 单词首字母</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tmain = <span class=\"keyword\">new</span> Main(nodes);</div><div class=\"line\">\t\t\tmain.execute();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t\tnodes[i].queue.clear();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(Node[] nodes)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nodes = nodes;</div><div class=\"line\">\t\tfather = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\tnum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\tinDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\toutDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\tfather[i] = i;</div><div class=\"line\">\t\t\tnum[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, start, end; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String str : nodes[i].queue) &#123;</div><div class=\"line\">\t\t\t\tstart = str.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;<span class=\"comment\">// 单词首</span></div><div class=\"line\">\t\t\t\tend = str.charAt(str.length() - <span class=\"number\">1</span>) - <span class=\"string\">'a'</span>;<span class=\"comment\">// 单词尾</span></div><div class=\"line\">\t\t\t\tinDegree[end]++;</div><div class=\"line\">\t\t\t\toutDegree[start]++;</div><div class=\"line\">\t\t\t\tstart = find(start);</div><div class=\"line\">\t\t\t\tend = find(end);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (start != end) &#123;</div><div class=\"line\">\t\t\t\t\tunion(start, end);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i == father[i] ? i : find(father[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\tfather[i] = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEularRoute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tstart = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> find = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (inDegree[i] != outDegree[i]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Math.abs(inDegree[i] - outDegree[i]) != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!find &amp;&amp; inDegree[i] &lt; outDegree[i]) &#123;</div><div class=\"line\">\t\t\t\t\tfind = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tstart = i;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (++count &gt; <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (outDegree[i] &gt; <span class=\"number\">0</span> &amp;&amp; start == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tstart = i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (outDegree[i] &gt; <span class=\"number\">0</span> &amp;&amp; father[i] == i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (++count &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printResult</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\tdfs(i);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!stack.isEmpty())</div><div class=\"line\">\t\t\tSystem.out.print(stack.pop());</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tSystem.out.print(<span class=\"string\">\".\"</span> + stack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\tStack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!nodes[i].queue.isEmpty()) &#123;</div><div class=\"line\">\t\t\tString str = nodes[i].queue.poll();</div><div class=\"line\">\t\t\tdfs(str.charAt(str.length() - <span class=\"number\">1</span>) - <span class=\"string\">'a'</span>);</div><div class=\"line\">\t\t\tstack.push(str);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isConnected() || !isEularRoute()) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"***\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprintResult(start);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 欧拉回路:若图G中存在这样一条路径，使得它恰通过G中每条边一次，则称该路径为欧拉路径。若该路径是一个圈， 则成为欧拉回路。</div><div class=\"line\"> * 具有欧拉回路的图成为欧拉图，具有欧拉路径但不具有欧拉回路的图成为半欧拉图。 1.无向连通图G是欧拉图，当且仅当G不含奇数度结点(G的所有结点度数为偶数)；</div><div class=\"line\"> * 2.无向连通图G含有欧拉通路，当且仅当G有零个或两个奇数度的结点； 3.有向连通图D是欧拉图，当且仅当该图为连通图且D中每个结点的入度=出度</div><div class=\"line\"> * 4.有向连通图D含有欧拉通路，当且仅当该图为连通图且D中除两个结点外， 其余每个结点的入度=出度，且此两点满足deg－(u)－deg+(v)=±1。</div><div class=\"line\"> * （起始点s的入度=出度-1，结束点t的出度=入度-1 或两个点的入度=出度）</div><div class=\"line\"> *</div><div class=\"line\"> * 连通图：若图中任意两点都是连通的，则该图是连通图。</div><div class=\"line\"> */</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>给你一些单词，请你判断能否把它们首尾串起来串成一串。</p>\n<p>前一个单词的结尾应该与下一个单词的道字母相同。</p>\n<p><strong>输入</strong></p>\n<p>第一行是一个整数N(0&lt;N&lt;20)，表示测试数据的组数<br>每组测试数据的第一行是一个整数M,表示该组测试数据中有M(2&lt;M&lt;1000)个互不相同的单词，随后的M行，每行是一个长度不超过30的单词,单词全部由小写字母组成。</p>\n<p><strong>输出</strong></p>\n<p>如果存在拼接方案，请输出所有拼接方案中字典序最小的方案。(两个单词之间输出一个英文句号”.”)<br>如果不存在拼接方案，则输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">***</div></pre></td></tr></table></figure>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">6</div><div class=\"line\">aloha</div><div class=\"line\">arachnid</div><div class=\"line\">dog</div><div class=\"line\">gopher</div><div class=\"line\">rat</div><div class=\"line\">tiger</div><div class=\"line\">3</div><div class=\"line\">oak</div><div class=\"line\">maple</div><div class=\"line\">elm</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">aloha.arachnid.dog.gopher.rat.tiger</div><div class=\"line\">***</div></pre></td></tr></table></figure>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</div><div class=\"line\"><span class=\"comment\">//欧拉通路(路径) 只有一个点的入度比出度小一, 一个点的出度比入度大一 其余点的入度与出度相等</span></div><div class=\"line\"><span class=\"comment\">//欧拉回路 所有点的入度与出度相等</span></div><div class=\"line\"><span class=\"comment\">//并查集判断连通性 只有一个点的父节点是他本身</span></div><div class=\"line\"><span class=\"comment\">//消圈算法遍历结果</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</div><div class=\"line\">\tQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> PriorityQueue&lt;String&gt;();<span class=\"comment\">// 首字母相同的单词可能有多个</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEN = <span class=\"number\">26</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> start;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] father, num, inDegree, outDegree;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Node[] nodes;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t, n;</div><div class=\"line\">\t\tMain main;</div><div class=\"line\">\t\tString str;</div><div class=\"line\">\t\tNode[] nodes = <span class=\"keyword\">new</span> Node[LEN];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\tnodes[i] = <span class=\"keyword\">new</span> Node();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tt = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (t-- != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tn = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">\t\t\t\tstr = sc.next();</div><div class=\"line\">\t\t\t\tnodes[str.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>].queue.add(str);<span class=\"comment\">// 单词首字母</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tmain = <span class=\"keyword\">new</span> Main(nodes);</div><div class=\"line\">\t\t\tmain.execute();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t\tnodes[i].queue.clear();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsc.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(Node[] nodes)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.nodes = nodes;</div><div class=\"line\">\t\tfather = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\tnum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\tinDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\toutDegree = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[LEN];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\tfather[i] = i;</div><div class=\"line\">\t\t\tnum[i] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, start, end; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String str : nodes[i].queue) &#123;</div><div class=\"line\">\t\t\t\tstart = str.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;<span class=\"comment\">// 单词首</span></div><div class=\"line\">\t\t\t\tend = str.charAt(str.length() - <span class=\"number\">1</span>) - <span class=\"string\">'a'</span>;<span class=\"comment\">// 单词尾</span></div><div class=\"line\">\t\t\t\tinDegree[end]++;</div><div class=\"line\">\t\t\t\toutDegree[start]++;</div><div class=\"line\">\t\t\t\tstart = find(start);</div><div class=\"line\">\t\t\t\tend = find(end);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (start != end) &#123;</div><div class=\"line\">\t\t\t\t\tunion(start, end);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> i == father[i] ? i : find(father[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">\t\tfather[i] = j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEularRoute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tstart = -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">boolean</span> find = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (inDegree[i] != outDegree[i]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Math.abs(inDegree[i] - outDegree[i]) != <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!find &amp;&amp; inDegree[i] &lt; outDegree[i]) &#123;</div><div class=\"line\">\t\t\t\t\tfind = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\tstart = i;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (++count &gt; <span class=\"number\">2</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (outDegree[i] &gt; <span class=\"number\">0</span> &amp;&amp; start == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tstart = i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>; i &lt; LEN; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (outDegree[i] &gt; <span class=\"number\">0</span> &amp;&amp; father[i] == i) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (++count &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printResult</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\tdfs(i);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!stack.isEmpty())</div><div class=\"line\">\t\t\tSystem.out.print(stack.pop());</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tSystem.out.print(<span class=\"string\">\".\"</span> + stack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\tStack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (!nodes[i].queue.isEmpty()) &#123;</div><div class=\"line\">\t\t\tString str = nodes[i].queue.poll();</div><div class=\"line\">\t\t\tdfs(str.charAt(str.length() - <span class=\"number\">1</span>) - <span class=\"string\">'a'</span>);</div><div class=\"line\">\t\t\tstack.push(str);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isConnected() || !isEularRoute()) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"***\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tprintResult(start);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 欧拉回路:若图G中存在这样一条路径，使得它恰通过G中每条边一次，则称该路径为欧拉路径。若该路径是一个圈， 则成为欧拉回路。</div><div class=\"line\"> * 具有欧拉回路的图成为欧拉图，具有欧拉路径但不具有欧拉回路的图成为半欧拉图。 1.无向连通图G是欧拉图，当且仅当G不含奇数度结点(G的所有结点度数为偶数)；</div><div class=\"line\"> * 2.无向连通图G含有欧拉通路，当且仅当G有零个或两个奇数度的结点； 3.有向连通图D是欧拉图，当且仅当该图为连通图且D中每个结点的入度=出度</div><div class=\"line\"> * 4.有向连通图D含有欧拉通路，当且仅当该图为连通图且D中除两个结点外， 其余每个结点的入度=出度，且此两点满足deg－(u)－deg+(v)=±1。</div><div class=\"line\"> * （起始点s的入度=出度-1，结束点t的出度=入度-1 或两个点的入度=出度）</div><div class=\"line\"> *</div><div class=\"line\"> * 连通图：若图中任意两点都是连通的，则该图是连通图。</div><div class=\"line\"> */</div></pre></td></tr></table></figure>"},{"title":"ACM-(括号配对问题)","date":"2017-06-07T06:41:38.000Z","_content":"\n**描述**\n\n现在，有一行括号序列，请你检查这行括号是否配对。\n\n**输入**\n\n第一行输入一个数N（0<N<=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有\"[\",\"]\",\"(\",\")\"四种字符\n\n**输出**\n\n每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No\n\n**样例输入**\n```\n3\n[(])\n(])\n([[]()])\n```\n\n**样例输出**\n```\nNo\nNo\nYes\n```\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int count= sc.nextInt();\n        String[] strs = new String[count];\n        for(int i=0; i<count; i++) {\n            strs[i] = sc.next();\n        }\n        Stack<Character> stack = null;  \n        for(int j=0; j<count; j++) {\n            String str = strs[j];\n            if(str.length() % 2 == 1){  \n                System.out.println(\"No\");  \n            }else{    \n                stack = new Stack<Character>();  \n                for(int i=0;i<str.length();i++){  \n                    if(stack.isEmpty()){  \n                        stack.push(str.charAt(i));  \n                    }else if(stack.peek() == '[' && str.charAt(i) == ']' || stack.peek() == '(' && str.charAt(i) == ')'){   \n                        stack.pop();  \n                    }else{  \n                        stack.push(str.charAt(i));  \n                    }  \n                }  \n                if(stack.isEmpty()){  \n                    //如果栈是空的，说明括号匹配  \n                    System.out.println(\"Yes\");  \n                }else{  \n                    //说明栈不为空，括号不匹配  \n                    System.out.println(\"No\");  \n                }  \n            }\n        }\n    }\n}\n```\n\n","source":"_posts/ACM-括号配对问题.md","raw":"---\ntitle: ACM-(括号配对问题)\ndate: 2017-06-07 14:41:38\ntags: \n\t- ACM \ncategories: ACM \n---\n\n**描述**\n\n现在，有一行括号序列，请你检查这行括号是否配对。\n\n**输入**\n\n第一行输入一个数N（0<N<=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有\"[\",\"]\",\"(\",\")\"四种字符\n\n**输出**\n\n每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No\n\n**样例输入**\n```\n3\n[(])\n(])\n([[]()])\n```\n\n**样例输出**\n```\nNo\nNo\nYes\n```\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int count= sc.nextInt();\n        String[] strs = new String[count];\n        for(int i=0; i<count; i++) {\n            strs[i] = sc.next();\n        }\n        Stack<Character> stack = null;  \n        for(int j=0; j<count; j++) {\n            String str = strs[j];\n            if(str.length() % 2 == 1){  \n                System.out.println(\"No\");  \n            }else{    \n                stack = new Stack<Character>();  \n                for(int i=0;i<str.length();i++){  \n                    if(stack.isEmpty()){  \n                        stack.push(str.charAt(i));  \n                    }else if(stack.peek() == '[' && str.charAt(i) == ']' || stack.peek() == '(' && str.charAt(i) == ')'){   \n                        stack.pop();  \n                    }else{  \n                        stack.push(str.charAt(i));  \n                    }  \n                }  \n                if(stack.isEmpty()){  \n                    //如果栈是空的，说明括号匹配  \n                    System.out.println(\"Yes\");  \n                }else{  \n                    //说明栈不为空，括号不匹配  \n                    System.out.println(\"No\");  \n                }  \n            }\n        }\n    }\n}\n```\n\n","slug":"ACM-括号配对问题","published":1,"updated":"2017-08-10T12:01:34.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfrw0007wou5gi4nhaqb","content":"<p><strong>描述</strong></p>\n<p>现在，有一行括号序列，请你检查这行括号是否配对。</p>\n<p><strong>输入</strong></p>\n<p>第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有”[“,”]”,”(“,”)”四种字符</p>\n<p><strong>输出</strong></p>\n<p>每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No</p>\n<p><strong>样例输入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">[(])</div><div class=\"line\">(])</div><div class=\"line\">([[]()])</div></pre></td></tr></table></figure></p>\n<p><strong>样例输出</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">No</div><div class=\"line\">No</div><div class=\"line\">Yes</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">int</span> count= sc.nextInt();</div><div class=\"line\">        String[] strs = <span class=\"keyword\">new</span> String[count];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">            strs[i] = sc.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">        Stack&lt;Character&gt; stack = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;count; j++) &#123;</div><div class=\"line\">            String str = strs[j];</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.length() % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;  </div><div class=\"line\">                System.out.println(<span class=\"string\">\"No\"</span>);  </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;    </div><div class=\"line\">                stack = <span class=\"keyword\">new</span> Stack&lt;Character&gt;();  </div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;str.length();i++)&#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span>(stack.isEmpty())&#123;  </div><div class=\"line\">                        stack.push(str.charAt(i));  </div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack.peek() == <span class=\"string\">'['</span> &amp;&amp; str.charAt(i) == <span class=\"string\">']'</span> || stack.peek() == <span class=\"string\">'('</span> &amp;&amp; str.charAt(i) == <span class=\"string\">')'</span>)&#123;   </div><div class=\"line\">                        stack.pop();  </div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                        stack.push(str.charAt(i));  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty())&#123;  </div><div class=\"line\">                    <span class=\"comment\">//如果栈是空的，说明括号匹配  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Yes\"</span>);  </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                    <span class=\"comment\">//说明栈不为空，括号不匹配  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"No\"</span>);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>现在，有一行括号序列，请你检查这行括号是否配对。</p>\n<p><strong>输入</strong></p>\n<p>第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有”[“,”]”,”(“,”)”四种字符</p>\n<p><strong>输出</strong></p>\n<p>每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No</p>\n<p><strong>样例输入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">[(])</div><div class=\"line\">(])</div><div class=\"line\">([[]()])</div></pre></td></tr></table></figure></p>\n<p><strong>样例输出</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">No</div><div class=\"line\">No</div><div class=\"line\">Yes</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">int</span> count= sc.nextInt();</div><div class=\"line\">        String[] strs = <span class=\"keyword\">new</span> String[count];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;count; i++) &#123;</div><div class=\"line\">            strs[i] = sc.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">        Stack&lt;Character&gt; stack = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;count; j++) &#123;</div><div class=\"line\">            String str = strs[j];</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.length() % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;  </div><div class=\"line\">                System.out.println(<span class=\"string\">\"No\"</span>);  </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;    </div><div class=\"line\">                stack = <span class=\"keyword\">new</span> Stack&lt;Character&gt;();  </div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;str.length();i++)&#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span>(stack.isEmpty())&#123;  </div><div class=\"line\">                        stack.push(str.charAt(i));  </div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack.peek() == <span class=\"string\">'['</span> &amp;&amp; str.charAt(i) == <span class=\"string\">']'</span> || stack.peek() == <span class=\"string\">'('</span> &amp;&amp; str.charAt(i) == <span class=\"string\">')'</span>)&#123;   </div><div class=\"line\">                        stack.pop();  </div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                        stack.push(str.charAt(i));  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty())&#123;  </div><div class=\"line\">                    <span class=\"comment\">//如果栈是空的，说明括号匹配  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Yes\"</span>);  </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                    <span class=\"comment\">//说明栈不为空，括号不匹配  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"No\"</span>);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ACM-(素数求和问题)","date":"2017-06-07T07:20:35.000Z","_content":"\n**描述**\n\n现在给你N个数（0<N<1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。\n\n**输入**\n\n第一行给出整数M(0<M<10)代表多少组测试数据\n每组测试数据第一行给你N，代表该组测试数据的数量。\n接下来的N个数为要测试的数据，每个数小于1000\n\n**输出**\n\n每组测试数据结果占一行，输出给出的测试数据的所有素数和\n\n**样例输入**\n\n\n```\n3\n5\n1 2 3 4 5\n8\n11 12 13 14 15 16 17 18\n10\n21 22 23 24 25 26 27 28 29 30\n```\n\n**样例输出**\n\n```\n10\n41\n52\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint zu = sc.nextInt();\n\t\tint[] sum = new int[zu];\n\t\tfor(int i=0; i<zu; i++) {\n\t\t\tint count = sc.nextInt();\n\t\t\tint s = 0;\n\t\t\tfor(int j=0; j<count; j++) {\n\t\t\t\tint value = sc.nextInt();\n\t\t\t\tif (isPrime(value)) {\n\t\t\t\t\ts += value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsum[i] = s;\n\t\t} \n\t\tfor(int i=0; i<zu; i++) {\n\t\t\tSystem.out.println(sum[i]);\n\t\t}\n\t}\n\n    public static boolean isPrime(int a) {  \n        boolean flag = true;  \n        if (a < 2) {// 素数不小于2  \n            return false;  \n        } else {  \n            for (int i = 2; i <= Math.sqrt(a); i++) {  \n                if (a % i == 0) {// 若能被整除，则说明不是素数，返回false  \n                    flag = false;  \n                    break;// 跳出循环  \n                }  \n            }  \n        }  \n        return flag;  \n    }  \n}\n```\n","source":"_posts/ACM-素数求和问题.md","raw":"---\ntitle: ACM-(素数求和问题)\ndate: 2017-06-07 15:20:35\ntags: \n\t- ACM \ncategories: ACM \n---\n\n**描述**\n\n现在给你N个数（0<N<1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。\n\n**输入**\n\n第一行给出整数M(0<M<10)代表多少组测试数据\n每组测试数据第一行给你N，代表该组测试数据的数量。\n接下来的N个数为要测试的数据，每个数小于1000\n\n**输出**\n\n每组测试数据结果占一行，输出给出的测试数据的所有素数和\n\n**样例输入**\n\n\n```\n3\n5\n1 2 3 4 5\n8\n11 12 13 14 15 16 17 18\n10\n21 22 23 24 25 26 27 28 29 30\n```\n\n**样例输出**\n\n```\n10\n41\n52\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint zu = sc.nextInt();\n\t\tint[] sum = new int[zu];\n\t\tfor(int i=0; i<zu; i++) {\n\t\t\tint count = sc.nextInt();\n\t\t\tint s = 0;\n\t\t\tfor(int j=0; j<count; j++) {\n\t\t\t\tint value = sc.nextInt();\n\t\t\t\tif (isPrime(value)) {\n\t\t\t\t\ts += value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsum[i] = s;\n\t\t} \n\t\tfor(int i=0; i<zu; i++) {\n\t\t\tSystem.out.println(sum[i]);\n\t\t}\n\t}\n\n    public static boolean isPrime(int a) {  \n        boolean flag = true;  \n        if (a < 2) {// 素数不小于2  \n            return false;  \n        } else {  \n            for (int i = 2; i <= Math.sqrt(a); i++) {  \n                if (a % i == 0) {// 若能被整除，则说明不是素数，返回false  \n                    flag = false;  \n                    break;// 跳出循环  \n                }  \n            }  \n        }  \n        return flag;  \n    }  \n}\n```\n","slug":"ACM-素数求和问题","published":1,"updated":"2017-08-10T12:01:34.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfry0008wou5jevjj41b","content":"<p><strong>描述</strong></p>\n<p>现在给你N个数（0&lt;N&lt;1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。</p>\n<p><strong>输入</strong></p>\n<p>第一行给出整数M(0&lt;M&lt;10)代表多少组测试数据<br>每组测试数据第一行给你N，代表该组测试数据的数量。<br>接下来的N个数为要测试的数据，每个数小于1000</p>\n<p><strong>输出</strong></p>\n<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">5</div><div class=\"line\">1 2 3 4 5</div><div class=\"line\">8</div><div class=\"line\">11 12 13 14 15 16 17 18</div><div class=\"line\">10</div><div class=\"line\">21 22 23 24 25 26 27 28 29 30</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">10</div><div class=\"line\">41</div><div class=\"line\">52</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> zu = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] sum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[zu];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;zu; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;count; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isPrime(value)) &#123;</div><div class=\"line\">\t\t\t\t\ts += value;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tsum[i] = s;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;zu; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(sum[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">2</span>) &#123;<span class=\"comment\">// 素数不小于2  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(a); i++) &#123;  </div><div class=\"line\">                <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 若能被整除，则说明不是素数，返回false  </span></div><div class=\"line\">                    flag = <span class=\"keyword\">false</span>;  </div><div class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">// 跳出循环  </span></div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> flag;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>现在给你N个数（0&lt;N&lt;1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。</p>\n<p><strong>输入</strong></p>\n<p>第一行给出整数M(0&lt;M&lt;10)代表多少组测试数据<br>每组测试数据第一行给你N，代表该组测试数据的数量。<br>接下来的N个数为要测试的数据，每个数小于1000</p>\n<p><strong>输出</strong></p>\n<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">5</div><div class=\"line\">1 2 3 4 5</div><div class=\"line\">8</div><div class=\"line\">11 12 13 14 15 16 17 18</div><div class=\"line\">10</div><div class=\"line\">21 22 23 24 25 26 27 28 29 30</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">10</div><div class=\"line\">41</div><div class=\"line\">52</div></pre></td></tr></table></figure>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> zu = sc.nextInt();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span>[] sum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[zu];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;zu; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;count; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isPrime(value)) &#123;</div><div class=\"line\">\t\t\t\t\ts += value;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tsum[i] = s;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;zu; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(sum[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">2</span>) &#123;<span class=\"comment\">// 素数不小于2  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= Math.sqrt(a); i++) &#123;  </div><div class=\"line\">                <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 若能被整除，则说明不是素数，返回false  </span></div><div class=\"line\">                    flag = <span class=\"keyword\">false</span>;  </div><div class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">// 跳出循环  </span></div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> flag;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ACM-(复杂排序问题)","date":"2017-06-07T08:36:38.000Z","_content":"\n**描述**\n\n现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）；\n\n1.按照编号从小到大排序\n\n2.对于编号相等的长方形，按照长方形的长排序；\n\n3.如果编号和长都相同，按照长方形的宽排序；\n\n4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形；\n\n**输入**\n\n第一行有一个整数 0<n<10000,表示接下来有n组测试数据；\n每一组第一行有一个整数 0<m<1000，表示有m个长方形；\n接下来的m行，每一行有三个数 ，第一个数表示长方形的编号，\n\n第二个和第三个数值大的表示长，数值小的表示宽，相等\n说明这是一个正方形（数据约定长宽与编号都小于10000）；\n\n**输出**\n\n顺序输出每组数据的所有符合条件的长方形的 编号 长 宽\n\n**样例输入**\n\n```\n1\n8\n1 1 1\n1 1 1\n1 1 2\n1 2 1\n1 2 2\n2 1 1\n2 1 2\n2 2 1\n```\n\n**样例输出**\n\n```\n1 1 1\n1 2 1\n1 2 2\n2 1 1\n2 2 1\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tList<Rect> list = new ArrayList<Rect>();\n\t\t\tint m = sc.nextInt();\n\t\t\tfor (int j=0; j<m; j++) {\n\t\t\t\tint no = sc.nextInt();\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tint b = sc.nextInt();\n\t\t\t\tRect r = new Rect(no, a>b?a:b, a<b?a:b);\n\t\t\t\tif (!isExist(list,r)) {\n\t\t\t\t\tlist.add(r);\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(list, new Comparator<Rect>(){  \n\t            @Override  \n\t            public int compare(Rect r1, Rect r2) {  \n\t\t            if (r1.no != r2.no) {\n\t\t            \treturn r1.no > r2.no ? 1 : -1;\n\t\t            } else {\n\t\t            \tif (r1.a != r2.a) {\n\t\t            \t\treturn r1.a > r2.a ? 1: -1;\n\t\t            \t} else {\n\t\t            \t\treturn r1.b > r2.b ? 1 : -1;\n\t\t            \t} else {\n\t\t            \t\treturn 0;\n\t\t            \t}\n\t\t            }\n\t            }  \n\t              \n\t        });  \n\t        for(int j=0 ; j<list.size(); j++) {\n\t        \tresult.append(list.get(j).toString()).append(\"\\n\");\n\t        }\n\t\t}\n\n\t\tSystem.out.println(result.toString());\n\t}\n\n\tpublic static boolean isExist(List<Rect> list, Rect r) {\n\t\tfor (int i=0; i<list.size(); i++) {\n\t\t\tRect r1 = list.get(i);\n\t\t\tif (r1.no == r.no && r1.a==r.a && r1.b == r.b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static class Rect {\n\t\tpublic int no;\n\t\tpublic int a;\n\t\tpublic int b;\n\n\t\tpublic Rect(int no, int a, int b) {\n\t\t\tthis.no = no;\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn no + \" \" + a +\" \" + b ;\n\t\t}\n\t}\n}\n```","source":"_posts/ACM-复杂排序问题.md","raw":"---\ntitle: ACM-(复杂排序问题)\ndate: 2017-06-07 16:36:38\ntags: \n\t- ACM \ncategories: ACM \n---\n\n**描述**\n\n现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）；\n\n1.按照编号从小到大排序\n\n2.对于编号相等的长方形，按照长方形的长排序；\n\n3.如果编号和长都相同，按照长方形的宽排序；\n\n4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形；\n\n**输入**\n\n第一行有一个整数 0<n<10000,表示接下来有n组测试数据；\n每一组第一行有一个整数 0<m<1000，表示有m个长方形；\n接下来的m行，每一行有三个数 ，第一个数表示长方形的编号，\n\n第二个和第三个数值大的表示长，数值小的表示宽，相等\n说明这是一个正方形（数据约定长宽与编号都小于10000）；\n\n**输出**\n\n顺序输出每组数据的所有符合条件的长方形的 编号 长 宽\n\n**样例输入**\n\n```\n1\n8\n1 1 1\n1 1 1\n1 1 2\n1 2 1\n1 2 2\n2 1 1\n2 1 2\n2 2 1\n```\n\n**样例输出**\n\n```\n1 1 1\n1 2 1\n1 2 2\n2 1 1\n2 2 1\n```\n\n<!-- more -->\n\n## 参考答案\n\n### Java版\n\n\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tList<Rect> list = new ArrayList<Rect>();\n\t\t\tint m = sc.nextInt();\n\t\t\tfor (int j=0; j<m; j++) {\n\t\t\t\tint no = sc.nextInt();\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tint b = sc.nextInt();\n\t\t\t\tRect r = new Rect(no, a>b?a:b, a<b?a:b);\n\t\t\t\tif (!isExist(list,r)) {\n\t\t\t\t\tlist.add(r);\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(list, new Comparator<Rect>(){  \n\t            @Override  \n\t            public int compare(Rect r1, Rect r2) {  \n\t\t            if (r1.no != r2.no) {\n\t\t            \treturn r1.no > r2.no ? 1 : -1;\n\t\t            } else {\n\t\t            \tif (r1.a != r2.a) {\n\t\t            \t\treturn r1.a > r2.a ? 1: -1;\n\t\t            \t} else {\n\t\t            \t\treturn r1.b > r2.b ? 1 : -1;\n\t\t            \t} else {\n\t\t            \t\treturn 0;\n\t\t            \t}\n\t\t            }\n\t            }  \n\t              \n\t        });  \n\t        for(int j=0 ; j<list.size(); j++) {\n\t        \tresult.append(list.get(j).toString()).append(\"\\n\");\n\t        }\n\t\t}\n\n\t\tSystem.out.println(result.toString());\n\t}\n\n\tpublic static boolean isExist(List<Rect> list, Rect r) {\n\t\tfor (int i=0; i<list.size(); i++) {\n\t\t\tRect r1 = list.get(i);\n\t\t\tif (r1.no == r.no && r1.a==r.a && r1.b == r.b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static class Rect {\n\t\tpublic int no;\n\t\tpublic int a;\n\t\tpublic int b;\n\n\t\tpublic Rect(int no, int a, int b) {\n\t\t\tthis.no = no;\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn no + \" \" + a +\" \" + b ;\n\t\t}\n\t}\n}\n```","slug":"ACM-复杂排序问题","published":1,"updated":"2017-08-10T12:01:34.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfs2000cwou5ampmst4k","content":"<p><strong>描述</strong></p>\n<p>现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）；</p>\n<p>1.按照编号从小到大排序</p>\n<p>2.对于编号相等的长方形，按照长方形的长排序；</p>\n<p>3.如果编号和长都相同，按照长方形的宽排序；</p>\n<p>4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形；</p>\n<p><strong>输入</strong></p>\n<p>第一行有一个整数 0&lt;n&lt;10000,表示接下来有n组测试数据；<br>每一组第一行有一个整数 0&lt;m&lt;1000，表示有m个长方形；<br>接下来的m行，每一行有三个数 ，第一个数表示长方形的编号，</p>\n<p>第二个和第三个数值大的表示长，数值小的表示宽，相等<br>说明这是一个正方形（数据约定长宽与编号都小于10000）；</p>\n<p><strong>输出</strong></p>\n<p>顺序输出每组数据的所有符合条件的长方形的 编号 长 宽</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">8</div><div class=\"line\">1 1 1</div><div class=\"line\">1 1 1</div><div class=\"line\">1 1 2</div><div class=\"line\">1 2 1</div><div class=\"line\">1 2 2</div><div class=\"line\">2 1 1</div><div class=\"line\">2 1 2</div><div class=\"line\">2 2 1</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 1 1</div><div class=\"line\">1 2 1</div><div class=\"line\">1 2 2</div><div class=\"line\">2 1 1</div><div class=\"line\">2 2 1</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\tStringBuilder result = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</div><div class=\"line\">\t\t\tList&lt;Rect&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Rect&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;m; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> no = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t\t\tRect r = <span class=\"keyword\">new</span> Rect(no, a&gt;b?a:b, a&lt;b?a:b);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!isExist(list,r)) &#123;</div><div class=\"line\">\t\t\t\t\tlist.add(r);\t</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tCollections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Rect&gt;()&#123;  </div><div class=\"line\">\t            <span class=\"meta\">@Override</span>  </div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Rect r1, Rect r2)</span> </span>&#123;  </div><div class=\"line\">\t\t            <span class=\"keyword\">if</span> (r1.no != r2.no) &#123;</div><div class=\"line\">\t\t            \t<span class=\"keyword\">return</span> r1.no &gt; r2.no ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t<span class=\"keyword\">if</span> (r1.a != r2.a) &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> r1.a &gt; r2.a ? <span class=\"number\">1</span>: -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            \t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> r1.b &gt; r2.b ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            \t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t            \t&#125;</div><div class=\"line\">\t\t            &#125;</div><div class=\"line\">\t            &#125;  </div><div class=\"line\">\t              </div><div class=\"line\">\t        &#125;);  </div><div class=\"line\">\t        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span> ; j&lt;list.size(); j++) &#123;</div><div class=\"line\">\t        \tresult.append(list.get(j).toString()).append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(result.toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExist</span><span class=\"params\">(List&lt;Rect&gt; list, Rect r)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;list.size(); i++) &#123;</div><div class=\"line\">\t\t\tRect r1 = list.get(i);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (r1.no == r.no &amp;&amp; r1.a==r.a &amp;&amp; r1.b == r.b) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rect</span><span class=\"params\">(<span class=\"keyword\">int</span> no, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.no = no;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> no + <span class=\"string\">\" \"</span> + a +<span class=\"string\">\" \"</span> + b ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>描述</strong></p>\n<p>现在有很多长方形，每一个长方形都有一个编号，这个编号可以重复；还知道这个长方形的宽和长，编号、长、宽都是整数；现在要求按照一下方式排序（默认排序规则都是从小到大）；</p>\n<p>1.按照编号从小到大排序</p>\n<p>2.对于编号相等的长方形，按照长方形的长排序；</p>\n<p>3.如果编号和长都相同，按照长方形的宽排序；</p>\n<p>4.如果编号、长、宽都相同，就只保留一个长方形用于排序,删除多余的长方形；最后排好序按照指定格式显示所有的长方形；</p>\n<p><strong>输入</strong></p>\n<p>第一行有一个整数 0&lt;n&lt;10000,表示接下来有n组测试数据；<br>每一组第一行有一个整数 0&lt;m&lt;1000，表示有m个长方形；<br>接下来的m行，每一行有三个数 ，第一个数表示长方形的编号，</p>\n<p>第二个和第三个数值大的表示长，数值小的表示宽，相等<br>说明这是一个正方形（数据约定长宽与编号都小于10000）；</p>\n<p><strong>输出</strong></p>\n<p>顺序输出每组数据的所有符合条件的长方形的 编号 长 宽</p>\n<p><strong>样例输入</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">8</div><div class=\"line\">1 1 1</div><div class=\"line\">1 1 1</div><div class=\"line\">1 1 2</div><div class=\"line\">1 2 1</div><div class=\"line\">1 2 2</div><div class=\"line\">2 1 1</div><div class=\"line\">2 1 2</div><div class=\"line\">2 2 1</div></pre></td></tr></table></figure>\n<p><strong>样例输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 1 1</div><div class=\"line\">1 2 1</div><div class=\"line\">1 2 2</div><div class=\"line\">2 1 1</div><div class=\"line\">2 2 1</div></pre></td></tr></table></figure>","more":"<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><h3 id=\"Java版\"><a href=\"#Java版\" class=\"headerlink\" title=\"Java版\"></a>Java版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> n = sc.nextInt();</div><div class=\"line\">\t\tStringBuilder result = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++) &#123;</div><div class=\"line\">\t\t\tList&lt;Rect&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Rect&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> m = sc.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;m; j++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> no = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> a = sc.nextInt();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b = sc.nextInt();</div><div class=\"line\">\t\t\t\tRect r = <span class=\"keyword\">new</span> Rect(no, a&gt;b?a:b, a&lt;b?a:b);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!isExist(list,r)) &#123;</div><div class=\"line\">\t\t\t\t\tlist.add(r);\t</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tCollections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Rect&gt;()&#123;  </div><div class=\"line\">\t            <span class=\"meta\">@Override</span>  </div><div class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Rect r1, Rect r2)</span> </span>&#123;  </div><div class=\"line\">\t\t            <span class=\"keyword\">if</span> (r1.no != r2.no) &#123;</div><div class=\"line\">\t\t            \t<span class=\"keyword\">return</span> r1.no &gt; r2.no ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t<span class=\"keyword\">if</span> (r1.a != r2.a) &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> r1.a &gt; r2.a ? <span class=\"number\">1</span>: -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            \t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> r1.b &gt; r2.b ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t            \t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t            \t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t            \t&#125;</div><div class=\"line\">\t\t            &#125;</div><div class=\"line\">\t            &#125;  </div><div class=\"line\">\t              </div><div class=\"line\">\t        &#125;);  </div><div class=\"line\">\t        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span> ; j&lt;list.size(); j++) &#123;</div><div class=\"line\">\t        \tresult.append(list.get(j).toString()).append(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(result.toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExist</span><span class=\"params\">(List&lt;Rect&gt; list, Rect r)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;list.size(); i++) &#123;</div><div class=\"line\">\t\t\tRect r1 = list.get(i);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (r1.no == r.no &amp;&amp; r1.a==r.a &amp;&amp; r1.b == r.b) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> b;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rect</span><span class=\"params\">(<span class=\"keyword\">int</span> no, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.no = no;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> no + <span class=\"string\">\" \"</span> + a +<span class=\"string\">\" \"</span> + b ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android 6.0新特性-动态权限申请","date":"2017-06-14T06:45:32.000Z","_content":"\nAndroid 6.0之后，部分权限需要动态申请。\n但是AndroidManifest.xml文件中同样需要申明。\n\n## 常见处理方式\n\n### 请求权限\n```java\n       if (Build.VERSION.SDK_INT > 22) {\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                if (!ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n                    Toast.makeText(MainActivity.this, \"这里提示用户进入设置界面开启权限\", Toast.LENGTH_SHORT).show();\n                } else {\n                    //Request\n                    ActivityCompat.requestPermissions(MainActivity.this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0x01);\n                }\n            } else {\n                //Allow...\n            }\n        } else {\n            //Allow...\n        }\n```\n<!-- more -->\n\n### Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback\n\n### 处理请求结果\n\n```java\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == 0x01) {\n            if (grantResults.length > 0) {\n                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(MainActivity.this, \"Allow\", Toast.LENGTH_SHORT).show();\n                    //allow...\n                } else {\n                    Toast.makeText(MainActivity.this, \"Deny\", Toast.LENGTH_SHORT).show();\n                    //deny...\n                }\n            }\n        }\n    }\n```\n\n## 使用RxPermission(推荐)\n\n[查看Github](https://github.com/tbruyelle/RxPermissions)\n\n## 使用AndPermission\n\n[查看Github](https://github.com/yanzhenjie/AndPermission)\n\n","source":"_posts/Android-6-0新特性-动态权限申请.md","raw":"---\ntitle: Android 6.0新特性-动态权限申请\ndate: 2017-06-14 14:45:32\ntags:\n    - Android\ncategories: Android版本特性\n---\n\nAndroid 6.0之后，部分权限需要动态申请。\n但是AndroidManifest.xml文件中同样需要申明。\n\n## 常见处理方式\n\n### 请求权限\n```java\n       if (Build.VERSION.SDK_INT > 22) {\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                if (!ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n                    Toast.makeText(MainActivity.this, \"这里提示用户进入设置界面开启权限\", Toast.LENGTH_SHORT).show();\n                } else {\n                    //Request\n                    ActivityCompat.requestPermissions(MainActivity.this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0x01);\n                }\n            } else {\n                //Allow...\n            }\n        } else {\n            //Allow...\n        }\n```\n<!-- more -->\n\n### Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback\n\n### 处理请求结果\n\n```java\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == 0x01) {\n            if (grantResults.length > 0) {\n                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(MainActivity.this, \"Allow\", Toast.LENGTH_SHORT).show();\n                    //allow...\n                } else {\n                    Toast.makeText(MainActivity.this, \"Deny\", Toast.LENGTH_SHORT).show();\n                    //deny...\n                }\n            }\n        }\n    }\n```\n\n## 使用RxPermission(推荐)\n\n[查看Github](https://github.com/tbruyelle/RxPermissions)\n\n## 使用AndPermission\n\n[查看Github](https://github.com/yanzhenjie/AndPermission)\n\n","slug":"Android-6-0新特性-动态权限申请","published":1,"updated":"2017-08-10T12:01:34.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfs4000fwou5mqqizgnu","content":"<p>Android 6.0之后，部分权限需要动态申请。<br>但是AndroidManifest.xml文件中同样需要申明。</p>\n<h2 id=\"常见处理方式\"><a href=\"#常见处理方式\" class=\"headerlink\" title=\"常见处理方式\"></a>常见处理方式</h2><h3 id=\"请求权限\"><a href=\"#请求权限\" class=\"headerlink\" title=\"请求权限\"></a>请求权限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">22</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (ActivityCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!ActivityCompat.shouldShowRequestPermissionRationale(<span class=\"keyword\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class=\"line\">             Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"这里提示用户进入设置界面开启权限\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">//Request</span></div><div class=\"line\">             ActivityCompat.requestPermissions(MainActivity.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> String[] &#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class=\"number\">0x01</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"comment\">//Allow...</span></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     <span class=\"comment\">//Allow...</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Activity必须implements-ActivityCompat-OnRequestPermissionsResultCallback\"><a href=\"#Activity必须implements-ActivityCompat-OnRequestPermissionsResultCallback\" class=\"headerlink\" title=\"Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback\"></a>Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback</h3><h3 id=\"处理请求结果\"><a href=\"#处理请求结果\" class=\"headerlink\" title=\"处理请求结果\"></a>处理请求结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">    <span class=\"keyword\">if</span> (requestCode == <span class=\"number\">0x01</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (grantResults.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Allow\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"comment\">//allow...</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Deny\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"comment\">//deny...</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用RxPermission-推荐\"><a href=\"#使用RxPermission-推荐\" class=\"headerlink\" title=\"使用RxPermission(推荐)\"></a>使用RxPermission(推荐)</h2><p><a href=\"https://github.com/tbruyelle/RxPermissions\" target=\"_blank\" rel=\"external\">查看Github</a></p>\n<h2 id=\"使用AndPermission\"><a href=\"#使用AndPermission\" class=\"headerlink\" title=\"使用AndPermission\"></a>使用AndPermission</h2><p><a href=\"https://github.com/yanzhenjie/AndPermission\" target=\"_blank\" rel=\"external\">查看Github</a></p>\n","site":{"data":{}},"excerpt":"<p>Android 6.0之后，部分权限需要动态申请。<br>但是AndroidManifest.xml文件中同样需要申明。</p>\n<h2 id=\"常见处理方式\"><a href=\"#常见处理方式\" class=\"headerlink\" title=\"常见处理方式\"></a>常见处理方式</h2><h3 id=\"请求权限\"><a href=\"#请求权限\" class=\"headerlink\" title=\"请求权限\"></a>请求权限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">22</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (ActivityCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!ActivityCompat.shouldShowRequestPermissionRationale(<span class=\"keyword\">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class=\"line\">             Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"这里提示用户进入设置界面开启权限\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">//Request</span></div><div class=\"line\">             ActivityCompat.requestPermissions(MainActivity.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> String[] &#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class=\"number\">0x01</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"comment\">//Allow...</span></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     <span class=\"comment\">//Allow...</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>","more":"<h3 id=\"Activity必须implements-ActivityCompat-OnRequestPermissionsResultCallback\"><a href=\"#Activity必须implements-ActivityCompat-OnRequestPermissionsResultCallback\" class=\"headerlink\" title=\"Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback\"></a>Activity必须implements ActivityCompat.OnRequestPermissionsResultCallback</h3><h3 id=\"处理请求结果\"><a href=\"#处理请求结果\" class=\"headerlink\" title=\"处理请求结果\"></a>处理请求结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">    <span class=\"keyword\">if</span> (requestCode == <span class=\"number\">0x01</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (grantResults.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Allow\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"comment\">//allow...</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Deny\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                <span class=\"comment\">//deny...</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用RxPermission-推荐\"><a href=\"#使用RxPermission-推荐\" class=\"headerlink\" title=\"使用RxPermission(推荐)\"></a>使用RxPermission(推荐)</h2><p><a href=\"https://github.com/tbruyelle/RxPermissions\" target=\"_blank\" rel=\"external\">查看Github</a></p>\n<h2 id=\"使用AndPermission\"><a href=\"#使用AndPermission\" class=\"headerlink\" title=\"使用AndPermission\"></a>使用AndPermission</h2><p><a href=\"https://github.com/yanzhenjie/AndPermission\" target=\"_blank\" rel=\"external\">查看Github</a></p>"},{"title":"Android 7.0新特性-FileUriExposedException","date":"2017-06-14T05:30:53.000Z","_content":"\n下面两个问题都是同一个错误FileUriExposedException。\n\n## 问题1：App更新\n\n最近有客户反应App自动更新安装失败。\n查看原因报的是FileUriExposedException错误。\n\n查看官网API找到了解决之法。\n\n<!-- more -->\n\n### 新建res/xml/provider_paths.xml文件\n\n```xhtml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-path name=\"external_files\" path=\".\"/>\n</paths>\n```\n\n### 在AndroidManifest.xml中添加provider\n\n```xhtml\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities=\"您的包名.provider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\n        android:resource=\"@xml/provider_paths\"/>\n</provider>\n```\n\n\n### 修改Uri的获取方式\n\n```java\nprivate void installApk(String fileName) {\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    if (Build.VERSION.SDK_INT > 23) {\n        //FIX ME by ZZ : 7.0\n        Uri uri = FileProvider.getUriForFile(MainActivity.this, BuildConfig.APPLICATION_ID+\".provider\", \n        \t\tnew File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName));\n        //这flag很关键\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        intent.setDataAndType(uri, \"application/vnd.android.package-archive\");\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        this.startActivity(intent);\n    } else {\n        intent.setDataAndType(Uri.fromFile(new File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)),\n                \"application/vnd.android.package-archive\");\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        this.startActivity(intent);\n    }\n}\n```\n\n\n## 问题2：调用系统相机拍照\n\n\n### 解决方式1\n\n（1）前两个步骤同上\n\n（2）\n\n```java\nprivate void takePhoto() {\n    File file = new File(PATH);\n    if (!file.isDirectory()) {\n        file.mkdirs();\n    }\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    Uri uri;\n    if (Build.VERSION.SDK_INT > 23) {\n        uri = FileProvider.getUriForFile(MainActivity.this,\n                BuildConfig.APPLICATION_ID+\".provider\",\n                new File(PATH+NAME));\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n    } else {\n        uri = Uri.fromFile(new File(PATH+NAME));\n    }\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    startActivityForResult(intent, 0x01);\n}\n```\n\t\n\n**注意别漏了这句:**\n\n```java\n\tintent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n```\n\n### 解决方式2\n\n```java\nprivate void takePhoto() {\n    final File file = new File(Constants.PIC_UPLOAD_ROOT_PATH);\n    if (!file.isDirectory()) {\n        file.mkdirs();\n    }\n    Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);//构造intent\n    Uri uri;\n    String pathOne = Constants.PIC_UPLOAD_ROOT_PATH + System.currentTimeMillis() + \".jpg\";\n    AbSharedUtil.putString(this, Constants.PUT_FILE_ONE, pathOne);\n    final File fileOne = new File(pathOne);\n    if (Build.VERSION.SDK_INT<24){\n        uri = Uri.fromFile(fileOne);\n    }else {\n        ContentValues contentValues = new ContentValues(1);\n        contentValues.put(MediaStore.Images.Media.DATA, fileOne.getAbsolutePath());\n        uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues);\n    }\n    if (fileOne.exists()) {\n        fileOne.delete();\n    }\n    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    startActivityForResult(cameraIntent, CAMERA_REQUEST_ONE);//发出intent，并要求返回调用结果\n}\n```","source":"_posts/Android-7-0新特性-FileUriExposedException.md","raw":"---\ntitle: Android 7.0新特性-FileUriExposedException\ndate: 2017-06-14 13:30:53\ntags:\n\t- Android\ncategories: Android版本特性\n---\n\n下面两个问题都是同一个错误FileUriExposedException。\n\n## 问题1：App更新\n\n最近有客户反应App自动更新安装失败。\n查看原因报的是FileUriExposedException错误。\n\n查看官网API找到了解决之法。\n\n<!-- more -->\n\n### 新建res/xml/provider_paths.xml文件\n\n```xhtml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <external-path name=\"external_files\" path=\".\"/>\n</paths>\n```\n\n### 在AndroidManifest.xml中添加provider\n\n```xhtml\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities=\"您的包名.provider\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\n        android:resource=\"@xml/provider_paths\"/>\n</provider>\n```\n\n\n### 修改Uri的获取方式\n\n```java\nprivate void installApk(String fileName) {\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    if (Build.VERSION.SDK_INT > 23) {\n        //FIX ME by ZZ : 7.0\n        Uri uri = FileProvider.getUriForFile(MainActivity.this, BuildConfig.APPLICATION_ID+\".provider\", \n        \t\tnew File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName));\n        //这flag很关键\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        intent.setDataAndType(uri, \"application/vnd.android.package-archive\");\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        this.startActivity(intent);\n    } else {\n        intent.setDataAndType(Uri.fromFile(new File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)),\n                \"application/vnd.android.package-archive\");\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        this.startActivity(intent);\n    }\n}\n```\n\n\n## 问题2：调用系统相机拍照\n\n\n### 解决方式1\n\n（1）前两个步骤同上\n\n（2）\n\n```java\nprivate void takePhoto() {\n    File file = new File(PATH);\n    if (!file.isDirectory()) {\n        file.mkdirs();\n    }\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    Uri uri;\n    if (Build.VERSION.SDK_INT > 23) {\n        uri = FileProvider.getUriForFile(MainActivity.this,\n                BuildConfig.APPLICATION_ID+\".provider\",\n                new File(PATH+NAME));\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n    } else {\n        uri = Uri.fromFile(new File(PATH+NAME));\n    }\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    startActivityForResult(intent, 0x01);\n}\n```\n\t\n\n**注意别漏了这句:**\n\n```java\n\tintent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n```\n\n### 解决方式2\n\n```java\nprivate void takePhoto() {\n    final File file = new File(Constants.PIC_UPLOAD_ROOT_PATH);\n    if (!file.isDirectory()) {\n        file.mkdirs();\n    }\n    Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);//构造intent\n    Uri uri;\n    String pathOne = Constants.PIC_UPLOAD_ROOT_PATH + System.currentTimeMillis() + \".jpg\";\n    AbSharedUtil.putString(this, Constants.PUT_FILE_ONE, pathOne);\n    final File fileOne = new File(pathOne);\n    if (Build.VERSION.SDK_INT<24){\n        uri = Uri.fromFile(fileOne);\n    }else {\n        ContentValues contentValues = new ContentValues(1);\n        contentValues.put(MediaStore.Images.Media.DATA, fileOne.getAbsolutePath());\n        uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues);\n    }\n    if (fileOne.exists()) {\n        fileOne.delete();\n    }\n    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n    startActivityForResult(cameraIntent, CAMERA_REQUEST_ONE);//发出intent，并要求返回调用结果\n}\n```","slug":"Android-7-0新特性-FileUriExposedException","published":1,"updated":"2017-08-10T12:01:34.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfs6000kwou56y93uye7","content":"<p>下面两个问题都是同一个错误FileUriExposedException。</p>\n<h2 id=\"问题1：App更新\"><a href=\"#问题1：App更新\" class=\"headerlink\" title=\"问题1：App更新\"></a>问题1：App更新</h2><p>最近有客户反应App自动更新安装失败。<br>查看原因报的是FileUriExposedException错误。</p>\n<p>查看官网API找到了解决之法。</p>\n<a id=\"more\"></a>\n<h3 id=\"新建res-xml-provider-paths-xml文件\"><a href=\"#新建res-xml-provider-paths-xml文件\" class=\"headerlink\" title=\"新建res/xml/provider_paths.xml文件\"></a>新建res/xml/provider_paths.xml文件</h3><figure class=\"highlight xhtml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\".\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"在AndroidManifest-xml中添加provider\"><a href=\"#在AndroidManifest-xml中添加provider\" class=\"headerlink\" title=\"在AndroidManifest.xml中添加provider\"></a>在AndroidManifest.xml中添加provider</h3><figure class=\"highlight xhtml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"您的包名.provider\"</span></div><div class=\"line\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/provider_paths\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"修改Uri的获取方式\"><a href=\"#修改Uri的获取方式\" class=\"headerlink\" title=\"修改Uri的获取方式\"></a>修改Uri的获取方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installApk</span><span class=\"params\">(String fileName)</span> </span>&#123;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//FIX ME by ZZ : 7.0</span></div><div class=\"line\">        Uri uri = FileProvider.getUriForFile(MainActivity.<span class=\"keyword\">this</span>, BuildConfig.APPLICATION_ID+<span class=\"string\">\".provider\"</span>, </div><div class=\"line\">        \t\t<span class=\"keyword\">new</span> File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName));</div><div class=\"line\">        <span class=\"comment\">//这flag很关键</span></div><div class=\"line\">        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class=\"line\">        intent.setDataAndType(uri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        intent.setDataAndType(Uri.fromFile(<span class=\"keyword\">new</span> File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)),</div><div class=\"line\">                <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"问题2：调用系统相机拍照\"><a href=\"#问题2：调用系统相机拍照\" class=\"headerlink\" title=\"问题2：调用系统相机拍照\"></a>问题2：调用系统相机拍照</h2><h3 id=\"解决方式1\"><a href=\"#解决方式1\" class=\"headerlink\" title=\"解决方式1\"></a>解决方式1</h3><p>（1）前两个步骤同上</p>\n<p>（2）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    File file = <span class=\"keyword\">new</span> File(PATH);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</div><div class=\"line\">        file.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    Uri uri;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">        uri = FileProvider.getUriForFile(MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">                BuildConfig.APPLICATION_ID+<span class=\"string\">\".provider\"</span>,</div><div class=\"line\">                <span class=\"keyword\">new</span> File(PATH+NAME));</div><div class=\"line\">        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        uri = Uri.fromFile(<span class=\"keyword\">new</span> File(PATH+NAME));</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">    startActivityForResult(intent, <span class=\"number\">0x01</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意别漏了这句:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div></pre></td></tr></table></figure>\n<h3 id=\"解决方式2\"><a href=\"#解决方式2\" class=\"headerlink\" title=\"解决方式2\"></a>解决方式2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> File file = <span class=\"keyword\">new</span> File(Constants.PIC_UPLOAD_ROOT_PATH);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</div><div class=\"line\">        file.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Intent cameraIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);<span class=\"comment\">//构造intent</span></div><div class=\"line\">    Uri uri;</div><div class=\"line\">    String pathOne = Constants.PIC_UPLOAD_ROOT_PATH + System.currentTimeMillis() + <span class=\"string\">\".jpg\"</span>;</div><div class=\"line\">    AbSharedUtil.putString(<span class=\"keyword\">this</span>, Constants.PUT_FILE_ONE, pathOne);</div><div class=\"line\">    <span class=\"keyword\">final</span> File fileOne = <span class=\"keyword\">new</span> File(pathOne);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT&lt;<span class=\"number\">24</span>)&#123;</div><div class=\"line\">        uri = Uri.fromFile(fileOne);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ContentValues contentValues = <span class=\"keyword\">new</span> ContentValues(<span class=\"number\">1</span>);</div><div class=\"line\">        contentValues.put(MediaStore.Images.Media.DATA, fileOne.getAbsolutePath());</div><div class=\"line\">        uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fileOne.exists()) &#123;</div><div class=\"line\">        fileOne.delete();</div><div class=\"line\">    &#125;</div><div class=\"line\">    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">    startActivityForResult(cameraIntent, CAMERA_REQUEST_ONE);<span class=\"comment\">//发出intent，并要求返回调用结果</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>下面两个问题都是同一个错误FileUriExposedException。</p>\n<h2 id=\"问题1：App更新\"><a href=\"#问题1：App更新\" class=\"headerlink\" title=\"问题1：App更新\"></a>问题1：App更新</h2><p>最近有客户反应App自动更新安装失败。<br>查看原因报的是FileUriExposedException错误。</p>\n<p>查看官网API找到了解决之法。</p>","more":"<h3 id=\"新建res-xml-provider-paths-xml文件\"><a href=\"#新建res-xml-provider-paths-xml文件\" class=\"headerlink\" title=\"新建res/xml/provider_paths.xml文件\"></a>新建res/xml/provider_paths.xml文件</h3><figure class=\"highlight xhtml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\".\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"在AndroidManifest-xml中添加provider\"><a href=\"#在AndroidManifest-xml中添加provider\" class=\"headerlink\" title=\"在AndroidManifest.xml中添加provider\"></a>在AndroidManifest.xml中添加provider</h3><figure class=\"highlight xhtml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"您的包名.provider\"</span></div><div class=\"line\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/provider_paths\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"修改Uri的获取方式\"><a href=\"#修改Uri的获取方式\" class=\"headerlink\" title=\"修改Uri的获取方式\"></a>修改Uri的获取方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installApk</span><span class=\"params\">(String fileName)</span> </span>&#123;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//FIX ME by ZZ : 7.0</span></div><div class=\"line\">        Uri uri = FileProvider.getUriForFile(MainActivity.<span class=\"keyword\">this</span>, BuildConfig.APPLICATION_ID+<span class=\"string\">\".provider\"</span>, </div><div class=\"line\">        \t\t<span class=\"keyword\">new</span> File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName));</div><div class=\"line\">        <span class=\"comment\">//这flag很关键</span></div><div class=\"line\">        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class=\"line\">        intent.setDataAndType(uri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        intent.setDataAndType(Uri.fromFile(<span class=\"keyword\">new</span> File(Constants.APK_DOWNLOAD_DIR + File.separator + fileName)),</div><div class=\"line\">                <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"问题2：调用系统相机拍照\"><a href=\"#问题2：调用系统相机拍照\" class=\"headerlink\" title=\"问题2：调用系统相机拍照\"></a>问题2：调用系统相机拍照</h2><h3 id=\"解决方式1\"><a href=\"#解决方式1\" class=\"headerlink\" title=\"解决方式1\"></a>解决方式1</h3><p>（1）前两个步骤同上</p>\n<p>（2）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    File file = <span class=\"keyword\">new</span> File(PATH);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</div><div class=\"line\">        file.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">    Uri uri;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">        uri = FileProvider.getUriForFile(MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">                BuildConfig.APPLICATION_ID+<span class=\"string\">\".provider\"</span>,</div><div class=\"line\">                <span class=\"keyword\">new</span> File(PATH+NAME));</div><div class=\"line\">        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        uri = Uri.fromFile(<span class=\"keyword\">new</span> File(PATH+NAME));</div><div class=\"line\">    &#125;</div><div class=\"line\">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">    startActivityForResult(intent, <span class=\"number\">0x01</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意别漏了这句:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION|Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div></pre></td></tr></table></figure>\n<h3 id=\"解决方式2\"><a href=\"#解决方式2\" class=\"headerlink\" title=\"解决方式2\"></a>解决方式2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> File file = <span class=\"keyword\">new</span> File(Constants.PIC_UPLOAD_ROOT_PATH);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</div><div class=\"line\">        file.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Intent cameraIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);<span class=\"comment\">//构造intent</span></div><div class=\"line\">    Uri uri;</div><div class=\"line\">    String pathOne = Constants.PIC_UPLOAD_ROOT_PATH + System.currentTimeMillis() + <span class=\"string\">\".jpg\"</span>;</div><div class=\"line\">    AbSharedUtil.putString(<span class=\"keyword\">this</span>, Constants.PUT_FILE_ONE, pathOne);</div><div class=\"line\">    <span class=\"keyword\">final</span> File fileOne = <span class=\"keyword\">new</span> File(pathOne);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT&lt;<span class=\"number\">24</span>)&#123;</div><div class=\"line\">        uri = Uri.fromFile(fileOne);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ContentValues contentValues = <span class=\"keyword\">new</span> ContentValues(<span class=\"number\">1</span>);</div><div class=\"line\">        contentValues.put(MediaStore.Images.Media.DATA, fileOne.getAbsolutePath());</div><div class=\"line\">        uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (fileOne.exists()) &#123;</div><div class=\"line\">        fileOne.delete();</div><div class=\"line\">    &#125;</div><div class=\"line\">    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">    startActivityForResult(cameraIntent, CAMERA_REQUEST_ONE);<span class=\"comment\">//发出intent，并要求返回调用结果</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android常用代码-点击隐藏虚拟键盘","date":"2017-08-10T03:38:24.000Z","_content":"\n\n代码非常简单：\n\n\n```java\n    view.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            InputMethodManager imm = (InputMethodManager)v.getContext().getSystemService(INPUT_METHOD_SERVICE);\n            imm.hideSoftInputFromWindow(v.getWindowToken(), 0);\n        }\n    });\n```","source":"_posts/Android常用功能-点击隐藏虚拟键盘.md","raw":"---\ntitle: Android常用代码-点击隐藏虚拟键盘\ndate: 2017-08-10 11:38:24\ntags: \n\t- Android\ncategories: Android常用代码\n---\n\n\n代码非常简单：\n\n\n```java\n    view.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            InputMethodManager imm = (InputMethodManager)v.getContext().getSystemService(INPUT_METHOD_SERVICE);\n            imm.hideSoftInputFromWindow(v.getWindowToken(), 0);\n        }\n    });\n```","slug":"Android常用功能-点击隐藏虚拟键盘","published":1,"updated":"2017-08-10T12:01:34.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfs7000nwou5gevsi4qm","content":"<p>代码非常简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        InputMethodManager imm = (InputMethodManager)v.getContext().getSystemService(INPUT_METHOD_SERVICE);</div><div class=\"line\">        imm.hideSoftInputFromWindow(v.getWindowToken(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>代码非常简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">        InputMethodManager imm = (InputMethodManager)v.getContext().getSystemService(INPUT_METHOD_SERVICE);</div><div class=\"line\">        imm.hideSoftInputFromWindow(v.getWindowToken(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"Android开源控件-MPAndroidChart","date":"2017-06-21T10:20:41.000Z","_content":"\n## 概述\n\n### 为什么要写这个小结？\n\n- MPAndroidChart文档是英文的，demo没有注释。\n- 为了让以后使用MPAndroidChart更加方便。\n\n\n<!-- more -->\n\n## MPAndroidChart简介\n\n### 项目地址\n\n[https://github.com/PhilJay/MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n\n### 我用的版本\n\n```\ncompile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\n```\n\n## 用法总结\n\n### 折线图/曲线图(LineChart)\n\n- 初始化控件\n\n\n```java\n//是否画背景线\nweekChart.setDrawGridBackground(false);\n//是否画边界\nweekChart.setDrawBorders(false);\n//是否画标记\nweekChart.setDrawMarkers(false);\n//是否画色标\nweekChart.getLegend().setEnabled(false);\n//是否显示描述\nweekChart.getDescription().setEnabled(false);\n//空数据提示文字\nweekChart.setNoDataText(getString(R.string.no_data));\n//横坐标的位置(上，下，或上和下)\nweekChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);\n//是否画横坐标的线(竖线)\nweekChart.getXAxis().setDrawGridLines(false);\n//是否画右边的纵坐标\nweekChart.getAxisRight().setEnabled(false);\n//是否画左边的纵坐标的线\nweekChart.getAxisLeft().setDrawGridLines(false);\n//是否画左边的纵坐标\nweekChart.getAxisLeft().setDrawLabels(true);\n\n```\n\n- 让第一点和最后一点显示全\n\n```java\n//设置最小X坐标小于0\nweekChart.getXAxis().setAxisMinimum(-0.5f);\n//设置最大X坐标大于 (点的数量-0.5)\nweekChart.getXAxis().setAxisMaximum(week.size()-0.5f);\n```\n\n- 设置X坐标不跳过或省略\n\n```java\n//设置X坐标个数，以保证X坐标都显示出来\nweekChart.getXAxis().setLabelCount(week.size());\n```\n\n- 数据填充\n\n\n```java\nprivate void updateWeek(final List<GetDefectiveRateResult.DataEntity.WeekEntity> week) {\n    if (week != null && week.size() > 0) {\n        //设置左右间距\n        weekChart.getXAxis().setAxisMinimum(-0.5f);\n        weekChart.getXAxis().setAxisMaximum(week.size()-0.5f);\n        //设置X坐标不省略\n        weekChart.getXAxis().setLabelCount(week.size());\n        //数据处理\n        List<Entry> values = new ArrayList<>();\n        for (int i = 0; i < week.size(); i++) {\n            GetDefectiveRateResult.DataEntity.WeekEntity weekEntity = week.get(i);\n            values.add(new Entry(i, weekEntity.getValue()));\n        }\n        //修改X坐标的值\n        weekChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n            @Override\n            public String getFormattedValue(float value, AxisBase axis) {\n                return week.get((int) value).getName();\n            }\n        });\n        \n        LineDataSet lineDataSet = new LineDataSet(values, \"周废品率(%)\");\n        //圆圈外圈的半径\n        lineDataSet.setCircleRadius(4f);\n        //圆圈空心的半径\n        lineDataSet.setCircleHoleRadius(3f);\n        //圆环的颜色\n        lineDataSet.setCircleColor(getResources().getColor(R.color.colorBarColor));\n        //折线或曲线的宽度\n        lineDataSet.setLineWidth(2f);\n        //线的模式：决定是 折线还是曲线\n        lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);\n        //线的颜色\n        lineDataSet.setColor(getResources().getColor(R.color.colorBarColor));\n        //线下方是否填充颜色\n        lineDataSet.setDrawFilled(true);\n        //设置线下方填充的颜色\n        if (Build.VERSION.SDK_INT >= 18) {\n            lineDataSet.setFillDrawable(getResources().getDrawable(R.drawable.line_one_shape));\n        } else {\n            lineDataSet.setFillColor(0x4f2F7EDB);\n        }\n        LineData lineData = new LineData(lineDataSet);\n        weekChart.setData(lineData);\n        weekChart.invalidate();\n    } else {\n        //没数据时清理图表\n        weekChart.clear();\n    }\n}\n```\n\nline_one_shape.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">\n    <gradient android:startColor=\"#7f2F7EDB\" android:angle=\"270\"\n        android:endColor=\"@android:color/transparent\"/>\n</shape>\n```\n\n### 饼状图(PieChart)\n\n- 初始化控件\n\n\n```java\n//空数据提示\nreasonPieChart.setNoDataText(getString(R.string.no_data));\n//使用百分比值画图(也就是说按数据的大小比例画图)\nreasonPieChart.setUsePercentValues(true);\n//描述\nreasonPieChart.getDescription().setEnabled(false);\n//饼状图的位置偏移\nreasonPieChart.setExtraOffsets(5, 10, 5, 5);\n  \n//是否可以拖动旋转\nreasonPieChart.setRotationEnabled(true);\n//好像是拖动转圈后松手的惯性(0到1,越大越快)\nreasonPieChart.setDragDecelerationFrictionCoef(0.95f);\n    \n//是否画中间的文字\nreasonPieChart.setDrawCenterText(true);\n//中间的文字\nreasonPieChart.setCenterText(\"原因废品率(%)\");\n   \n//是否画中间的洞\nreasonPieChart.setDrawHoleEnabled(true);\n//中间洞的颜色\nreasonPieChart.setHoleColor(Color.WHITE);\n//中间洞外边一小圈的颜色\nreasonPieChart.setTransparentCircleColor(Color.WHITE);\n//中间洞外边一小圈的透明度\nreasonPieChart.setTransparentCircleAlpha(110);\n//中间洞的半径\nreasonPieChart.setHoleRadius(48f);\n//洞外小圈的半径\nreasonPieChart.setTransparentCircleRadius(51f);\n  \n//设置旋转的角度\nreasonPieChart.setRotationAngle(0);\n    \n//是否画扇形内部的文字\nreasonPieChart.setDrawEntryLabels(false);\n//扇形内部文字的颜色\nreasonPieChart.setEntryLabelColor(Color.BLACK);\n//扇形内部文字的大小\nreasonPieChart.setEntryLabelTextSize(7f);\n  \n    \n//是否启用色标\nreasonPieChart.getLegend().setEnabled(true);\nLegend legend = reasonPieChart.getLegend();\n//色标的方面\nlegend.setOrientation(Legend.LegendOrientation.VERTICAL);\n//色标的水平位置\nlegend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);\n//色标的垂直位置\nlegend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);\n//色标画在图标外面还是里面\nlegend.setDrawInside(false);\n//色标文字的大小\nlegend.setTextSize(11f);\n```\n\n- 数据填充\n\n\n```java\nprivate void updateReason(final List<GetDefectiveRateResult.DataEntity.ReasonEntity> reason) {\n    if (reason != null && reason.size() > 0) {\n        List<PieEntry> yVals = new ArrayList<>();\n        for (int i = 0; i < reason.size(); i++) {\n            GetDefectiveRateResult.DataEntity.ReasonEntity reasonEntity = reason.get(i);\n            //值和名称\n            PieEntry barEntry = new PieEntry(reasonEntity.getValue(), \"[\"+reasonEntity.getValue()+\"%] \"+reasonEntity.getName());\n            yVals.add(barEntry);\n        }\n        PieDataSet set = new PieDataSet(yVals, \"\");\n        ArrayList<Integer> colors = new ArrayList<>();\n        //扇形的颜色\n        for (int vordiplomColor : ColorTemplate.VORDIPLOM_COLORS) {\n            colors.add(vordiplomColor);\n        }\n        for (int libertyColor : ColorTemplate.LIBERTY_COLORS) {\n            colors.add(libertyColor);\n        }\n        set.setColors(colors);\n        //数值的的颜色\n        set.setValueTextColor(Color.BLACK);\n        //分隔线的颜色\n        set.setValueLineColor(Color.WHITE);\n        PieData barData = new PieData(set);\n        //数值的大小\n        barData.setValueTextSize(7f);\n        reasonPieChart.setData(barData);\n        reasonPieChart.invalidate();\n    } else {\n        reasonPieChart.clear();\n    }\n}\n```\n\n\n### 柱状图(BarChart/HorizontalBarChart)\n\n- 初始化控件\n\n```java\n//是否画柱子的底色\nreasonBarChart.setDrawBarShadow(false);\n//是否画数字在柱子顶部\nreasonBarChart.setDrawValueAboveBar(true);\n//是否显示右下角的描述\nreasonBarChart.getDescription().setEnabled(false);\n//是否双向指缩放\nreasonBarChart.setPinchZoom(false);\n//是否画背景格子\nreasonBarChart.setDrawGridBackground(false);\n//是否显示右边的坐标\nreasonBarChart.getAxisRight().setEnabled(false);\n//x轴的位置(左边，右边，两边)\nreasonBarChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);\n//是否显示X轴的坐标线\nreasonBarChart.getXAxis().setDrawGridLines(false);\n//设置X轴坐标的文字大小\nreasonBarChart.getXAxis().setTextSize(9f);\n//设置X轴坐标的旋转角度\n//reasonBarChart.getXAxis().setLabelRotationAngle(45);\n//是否显示左边Y轴的坐标线\nreasonBarChart.getAxisLeft().setDrawGridLines(false);\n//设置左边Y轴的最小值\nreasonBarChart.getAxisLeft().setAxisMinimum(0f);\n//设置左边Y轴的是否显示\nreasonBarChart.getAxisLeft().setEnabled(false);\n\n\n//色标\nLegend legend = reasonBarChart.getLegend();\nlegend.setEnabled(false);\nlegend.setOrientation(Legend.LegendOrientation.HORIZONTAL);\nlegend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);\nlegend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);\nlegend.setForm(Legend.LegendForm.SQUARE);\nlegend.setFormSize(9f);\nlegend.setXEntrySpace(4f);\nlegend.setDrawInside(false);\nlegend.setTextSize(11f);\n```\n\n- X轴坐标转换\n\n```java\nproductBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n    @Override\n    public String getFormattedValue(float value, AxisBase axis) {\n        return product.get((int) value).getName()+\" [\"+product.get((int) value).getValue()+\"%]\";\n    }\n});\n```\n\n- 填充数据\n\n```java\nprivate void updateProduct(final List<GetDefectiveRateResult.DataEntity.ProductEntity> product) {\n    if (product != null && product.size() > 0) {\n        //保证X坐标显示全\n        productBarChart.getXAxis().setLabelCount(product.size());\n        //调整显示顺序\n        Collections.reverse(product);\n        //整理数据\n        List<BarEntry> yVals = new ArrayList<>();\n        for (int i = 0; i < product.size(); i++) {\n            GetDefectiveRateResult.DataEntity.ProductEntity productEntity = product.get(i);\n            BarEntry barEntry = new BarEntry(i, productEntity.getValue());\n            yVals.add(barEntry);\n        }\n        //X轴坐标转换\n        productBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n            @Override\n            public String getFormattedValue(float value, AxisBase axis) {\n                return product.get((int) value).getName()+\" [\"+product.get((int) value).getValue()+\"%]\";\n            }\n        });\n    \n        BarDataSet set = new BarDataSet(yVals, \"\");\n        //设置柱子颜色\n        ArrayList<Integer> colors = new ArrayList<>();\n        for (int joyfulColor : ColorTemplate.JOYFUL_COLORS) {\n            colors.add(joyfulColor);\n        }\n        for (int colorfulColor : ColorTemplate.COLORFUL_COLORS) {\n            colors.add(colorfulColor);\n        }\n        set.setColors(colors);\n        //设置柱子上文字的颜色\n        set.setValueTextColor(Color.BLACK);\n        //设置柱子上文字的值是否显示\n        set.setDrawValues(true);\n        BarData barData = new BarData(set);\n        //设置柱子上文字的大小\n        barData.setValueTextSize(7f);\n        productBarChart.setData(barData);\n        productBarChart.invalidate();\n    } else {\n        productBarChart.clear();\n    }\n}\n```\n\n### 效果图\n\n![图1](../../../../images/mpandroidcahrt.png)\n\n![图2](../../../../images/mpandroidchart2.png)","source":"_posts/Android开源控件-MPAndroidChart.md","raw":"---\ntitle: Android开源控件-MPAndroidChart\ndate: 2017-06-21 18:20:41\ntags:\n\t- Android\ncategories: Android开源控件\n---\n\n## 概述\n\n### 为什么要写这个小结？\n\n- MPAndroidChart文档是英文的，demo没有注释。\n- 为了让以后使用MPAndroidChart更加方便。\n\n\n<!-- more -->\n\n## MPAndroidChart简介\n\n### 项目地址\n\n[https://github.com/PhilJay/MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n\n### 我用的版本\n\n```\ncompile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\n```\n\n## 用法总结\n\n### 折线图/曲线图(LineChart)\n\n- 初始化控件\n\n\n```java\n//是否画背景线\nweekChart.setDrawGridBackground(false);\n//是否画边界\nweekChart.setDrawBorders(false);\n//是否画标记\nweekChart.setDrawMarkers(false);\n//是否画色标\nweekChart.getLegend().setEnabled(false);\n//是否显示描述\nweekChart.getDescription().setEnabled(false);\n//空数据提示文字\nweekChart.setNoDataText(getString(R.string.no_data));\n//横坐标的位置(上，下，或上和下)\nweekChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);\n//是否画横坐标的线(竖线)\nweekChart.getXAxis().setDrawGridLines(false);\n//是否画右边的纵坐标\nweekChart.getAxisRight().setEnabled(false);\n//是否画左边的纵坐标的线\nweekChart.getAxisLeft().setDrawGridLines(false);\n//是否画左边的纵坐标\nweekChart.getAxisLeft().setDrawLabels(true);\n\n```\n\n- 让第一点和最后一点显示全\n\n```java\n//设置最小X坐标小于0\nweekChart.getXAxis().setAxisMinimum(-0.5f);\n//设置最大X坐标大于 (点的数量-0.5)\nweekChart.getXAxis().setAxisMaximum(week.size()-0.5f);\n```\n\n- 设置X坐标不跳过或省略\n\n```java\n//设置X坐标个数，以保证X坐标都显示出来\nweekChart.getXAxis().setLabelCount(week.size());\n```\n\n- 数据填充\n\n\n```java\nprivate void updateWeek(final List<GetDefectiveRateResult.DataEntity.WeekEntity> week) {\n    if (week != null && week.size() > 0) {\n        //设置左右间距\n        weekChart.getXAxis().setAxisMinimum(-0.5f);\n        weekChart.getXAxis().setAxisMaximum(week.size()-0.5f);\n        //设置X坐标不省略\n        weekChart.getXAxis().setLabelCount(week.size());\n        //数据处理\n        List<Entry> values = new ArrayList<>();\n        for (int i = 0; i < week.size(); i++) {\n            GetDefectiveRateResult.DataEntity.WeekEntity weekEntity = week.get(i);\n            values.add(new Entry(i, weekEntity.getValue()));\n        }\n        //修改X坐标的值\n        weekChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n            @Override\n            public String getFormattedValue(float value, AxisBase axis) {\n                return week.get((int) value).getName();\n            }\n        });\n        \n        LineDataSet lineDataSet = new LineDataSet(values, \"周废品率(%)\");\n        //圆圈外圈的半径\n        lineDataSet.setCircleRadius(4f);\n        //圆圈空心的半径\n        lineDataSet.setCircleHoleRadius(3f);\n        //圆环的颜色\n        lineDataSet.setCircleColor(getResources().getColor(R.color.colorBarColor));\n        //折线或曲线的宽度\n        lineDataSet.setLineWidth(2f);\n        //线的模式：决定是 折线还是曲线\n        lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);\n        //线的颜色\n        lineDataSet.setColor(getResources().getColor(R.color.colorBarColor));\n        //线下方是否填充颜色\n        lineDataSet.setDrawFilled(true);\n        //设置线下方填充的颜色\n        if (Build.VERSION.SDK_INT >= 18) {\n            lineDataSet.setFillDrawable(getResources().getDrawable(R.drawable.line_one_shape));\n        } else {\n            lineDataSet.setFillColor(0x4f2F7EDB);\n        }\n        LineData lineData = new LineData(lineDataSet);\n        weekChart.setData(lineData);\n        weekChart.invalidate();\n    } else {\n        //没数据时清理图表\n        weekChart.clear();\n    }\n}\n```\n\nline_one_shape.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">\n    <gradient android:startColor=\"#7f2F7EDB\" android:angle=\"270\"\n        android:endColor=\"@android:color/transparent\"/>\n</shape>\n```\n\n### 饼状图(PieChart)\n\n- 初始化控件\n\n\n```java\n//空数据提示\nreasonPieChart.setNoDataText(getString(R.string.no_data));\n//使用百分比值画图(也就是说按数据的大小比例画图)\nreasonPieChart.setUsePercentValues(true);\n//描述\nreasonPieChart.getDescription().setEnabled(false);\n//饼状图的位置偏移\nreasonPieChart.setExtraOffsets(5, 10, 5, 5);\n  \n//是否可以拖动旋转\nreasonPieChart.setRotationEnabled(true);\n//好像是拖动转圈后松手的惯性(0到1,越大越快)\nreasonPieChart.setDragDecelerationFrictionCoef(0.95f);\n    \n//是否画中间的文字\nreasonPieChart.setDrawCenterText(true);\n//中间的文字\nreasonPieChart.setCenterText(\"原因废品率(%)\");\n   \n//是否画中间的洞\nreasonPieChart.setDrawHoleEnabled(true);\n//中间洞的颜色\nreasonPieChart.setHoleColor(Color.WHITE);\n//中间洞外边一小圈的颜色\nreasonPieChart.setTransparentCircleColor(Color.WHITE);\n//中间洞外边一小圈的透明度\nreasonPieChart.setTransparentCircleAlpha(110);\n//中间洞的半径\nreasonPieChart.setHoleRadius(48f);\n//洞外小圈的半径\nreasonPieChart.setTransparentCircleRadius(51f);\n  \n//设置旋转的角度\nreasonPieChart.setRotationAngle(0);\n    \n//是否画扇形内部的文字\nreasonPieChart.setDrawEntryLabels(false);\n//扇形内部文字的颜色\nreasonPieChart.setEntryLabelColor(Color.BLACK);\n//扇形内部文字的大小\nreasonPieChart.setEntryLabelTextSize(7f);\n  \n    \n//是否启用色标\nreasonPieChart.getLegend().setEnabled(true);\nLegend legend = reasonPieChart.getLegend();\n//色标的方面\nlegend.setOrientation(Legend.LegendOrientation.VERTICAL);\n//色标的水平位置\nlegend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);\n//色标的垂直位置\nlegend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);\n//色标画在图标外面还是里面\nlegend.setDrawInside(false);\n//色标文字的大小\nlegend.setTextSize(11f);\n```\n\n- 数据填充\n\n\n```java\nprivate void updateReason(final List<GetDefectiveRateResult.DataEntity.ReasonEntity> reason) {\n    if (reason != null && reason.size() > 0) {\n        List<PieEntry> yVals = new ArrayList<>();\n        for (int i = 0; i < reason.size(); i++) {\n            GetDefectiveRateResult.DataEntity.ReasonEntity reasonEntity = reason.get(i);\n            //值和名称\n            PieEntry barEntry = new PieEntry(reasonEntity.getValue(), \"[\"+reasonEntity.getValue()+\"%] \"+reasonEntity.getName());\n            yVals.add(barEntry);\n        }\n        PieDataSet set = new PieDataSet(yVals, \"\");\n        ArrayList<Integer> colors = new ArrayList<>();\n        //扇形的颜色\n        for (int vordiplomColor : ColorTemplate.VORDIPLOM_COLORS) {\n            colors.add(vordiplomColor);\n        }\n        for (int libertyColor : ColorTemplate.LIBERTY_COLORS) {\n            colors.add(libertyColor);\n        }\n        set.setColors(colors);\n        //数值的的颜色\n        set.setValueTextColor(Color.BLACK);\n        //分隔线的颜色\n        set.setValueLineColor(Color.WHITE);\n        PieData barData = new PieData(set);\n        //数值的大小\n        barData.setValueTextSize(7f);\n        reasonPieChart.setData(barData);\n        reasonPieChart.invalidate();\n    } else {\n        reasonPieChart.clear();\n    }\n}\n```\n\n\n### 柱状图(BarChart/HorizontalBarChart)\n\n- 初始化控件\n\n```java\n//是否画柱子的底色\nreasonBarChart.setDrawBarShadow(false);\n//是否画数字在柱子顶部\nreasonBarChart.setDrawValueAboveBar(true);\n//是否显示右下角的描述\nreasonBarChart.getDescription().setEnabled(false);\n//是否双向指缩放\nreasonBarChart.setPinchZoom(false);\n//是否画背景格子\nreasonBarChart.setDrawGridBackground(false);\n//是否显示右边的坐标\nreasonBarChart.getAxisRight().setEnabled(false);\n//x轴的位置(左边，右边，两边)\nreasonBarChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);\n//是否显示X轴的坐标线\nreasonBarChart.getXAxis().setDrawGridLines(false);\n//设置X轴坐标的文字大小\nreasonBarChart.getXAxis().setTextSize(9f);\n//设置X轴坐标的旋转角度\n//reasonBarChart.getXAxis().setLabelRotationAngle(45);\n//是否显示左边Y轴的坐标线\nreasonBarChart.getAxisLeft().setDrawGridLines(false);\n//设置左边Y轴的最小值\nreasonBarChart.getAxisLeft().setAxisMinimum(0f);\n//设置左边Y轴的是否显示\nreasonBarChart.getAxisLeft().setEnabled(false);\n\n\n//色标\nLegend legend = reasonBarChart.getLegend();\nlegend.setEnabled(false);\nlegend.setOrientation(Legend.LegendOrientation.HORIZONTAL);\nlegend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);\nlegend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);\nlegend.setForm(Legend.LegendForm.SQUARE);\nlegend.setFormSize(9f);\nlegend.setXEntrySpace(4f);\nlegend.setDrawInside(false);\nlegend.setTextSize(11f);\n```\n\n- X轴坐标转换\n\n```java\nproductBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n    @Override\n    public String getFormattedValue(float value, AxisBase axis) {\n        return product.get((int) value).getName()+\" [\"+product.get((int) value).getValue()+\"%]\";\n    }\n});\n```\n\n- 填充数据\n\n```java\nprivate void updateProduct(final List<GetDefectiveRateResult.DataEntity.ProductEntity> product) {\n    if (product != null && product.size() > 0) {\n        //保证X坐标显示全\n        productBarChart.getXAxis().setLabelCount(product.size());\n        //调整显示顺序\n        Collections.reverse(product);\n        //整理数据\n        List<BarEntry> yVals = new ArrayList<>();\n        for (int i = 0; i < product.size(); i++) {\n            GetDefectiveRateResult.DataEntity.ProductEntity productEntity = product.get(i);\n            BarEntry barEntry = new BarEntry(i, productEntity.getValue());\n            yVals.add(barEntry);\n        }\n        //X轴坐标转换\n        productBarChart.getXAxis().setValueFormatter(new IAxisValueFormatter() {\n            @Override\n            public String getFormattedValue(float value, AxisBase axis) {\n                return product.get((int) value).getName()+\" [\"+product.get((int) value).getValue()+\"%]\";\n            }\n        });\n    \n        BarDataSet set = new BarDataSet(yVals, \"\");\n        //设置柱子颜色\n        ArrayList<Integer> colors = new ArrayList<>();\n        for (int joyfulColor : ColorTemplate.JOYFUL_COLORS) {\n            colors.add(joyfulColor);\n        }\n        for (int colorfulColor : ColorTemplate.COLORFUL_COLORS) {\n            colors.add(colorfulColor);\n        }\n        set.setColors(colors);\n        //设置柱子上文字的颜色\n        set.setValueTextColor(Color.BLACK);\n        //设置柱子上文字的值是否显示\n        set.setDrawValues(true);\n        BarData barData = new BarData(set);\n        //设置柱子上文字的大小\n        barData.setValueTextSize(7f);\n        productBarChart.setData(barData);\n        productBarChart.invalidate();\n    } else {\n        productBarChart.clear();\n    }\n}\n```\n\n### 效果图\n\n![图1](../../../../images/mpandroidcahrt.png)\n\n![图2](../../../../images/mpandroidchart2.png)","slug":"Android开源控件-MPAndroidChart","published":1,"updated":"2017-08-10T12:01:34.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfs9000swou54z2w3s94","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"为什么要写这个小结？\"><a href=\"#为什么要写这个小结？\" class=\"headerlink\" title=\"为什么要写这个小结？\"></a>为什么要写这个小结？</h3><ul>\n<li>MPAndroidChart文档是英文的，demo没有注释。</li>\n<li>为了让以后使用MPAndroidChart更加方便。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"MPAndroidChart简介\"><a href=\"#MPAndroidChart简介\" class=\"headerlink\" title=\"MPAndroidChart简介\"></a>MPAndroidChart简介</h2><h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><p><a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a></p>\n<h3 id=\"我用的版本\"><a href=\"#我用的版本\" class=\"headerlink\" title=\"我用的版本\"></a>我用的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.github.PhilJay:MPAndroidChart:v3.0.2&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h2><h3 id=\"折线图-曲线图-LineChart\"><a href=\"#折线图-曲线图-LineChart\" class=\"headerlink\" title=\"折线图/曲线图(LineChart)\"></a>折线图/曲线图(LineChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否画背景线</span></div><div class=\"line\">weekChart.setDrawGridBackground(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画边界</span></div><div class=\"line\">weekChart.setDrawBorders(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画标记</span></div><div class=\"line\">weekChart.setDrawMarkers(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画色标</span></div><div class=\"line\">weekChart.getLegend().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示描述</span></div><div class=\"line\">weekChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//空数据提示文字</span></div><div class=\"line\">weekChart.setNoDataText(getString(R.string.no_data));</div><div class=\"line\"><span class=\"comment\">//横坐标的位置(上，下，或上和下)</span></div><div class=\"line\">weekChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);</div><div class=\"line\"><span class=\"comment\">//是否画横坐标的线(竖线)</span></div><div class=\"line\">weekChart.getXAxis().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画右边的纵坐标</span></div><div class=\"line\">weekChart.getAxisRight().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画左边的纵坐标的线</span></div><div class=\"line\">weekChart.getAxisLeft().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画左边的纵坐标</span></div><div class=\"line\">weekChart.getAxisLeft().setDrawLabels(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>让第一点和最后一点显示全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置最小X坐标小于0</span></div><div class=\"line\">weekChart.getXAxis().setAxisMinimum(-<span class=\"number\">0.5f</span>);</div><div class=\"line\"><span class=\"comment\">//设置最大X坐标大于 (点的数量-0.5)</span></div><div class=\"line\">weekChart.getXAxis().setAxisMaximum(week.size()-<span class=\"number\">0.5f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>设置X坐标不跳过或省略</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置X坐标个数，以保证X坐标都显示出来</span></div><div class=\"line\">weekChart.getXAxis().setLabelCount(week.size());</div></pre></td></tr></table></figure>\n<ul>\n<li>数据填充</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateWeek</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.WeekEntity&gt; week)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (week != <span class=\"keyword\">null</span> &amp;&amp; week.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//设置左右间距</span></div><div class=\"line\">        weekChart.getXAxis().setAxisMinimum(-<span class=\"number\">0.5f</span>);</div><div class=\"line\">        weekChart.getXAxis().setAxisMaximum(week.size()-<span class=\"number\">0.5f</span>);</div><div class=\"line\">        <span class=\"comment\">//设置X坐标不省略</span></div><div class=\"line\">        weekChart.getXAxis().setLabelCount(week.size());</div><div class=\"line\">        <span class=\"comment\">//数据处理</span></div><div class=\"line\">        List&lt;Entry&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; week.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.WeekEntity weekEntity = week.get(i);</div><div class=\"line\">            values.add(<span class=\"keyword\">new</span> Entry(i, weekEntity.getValue()));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//修改X坐标的值</span></div><div class=\"line\">        weekChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> week.get((<span class=\"keyword\">int</span>) value).getName();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        LineDataSet lineDataSet = <span class=\"keyword\">new</span> LineDataSet(values, <span class=\"string\">\"周废品率(%)\"</span>);</div><div class=\"line\">        <span class=\"comment\">//圆圈外圈的半径</span></div><div class=\"line\">        lineDataSet.setCircleRadius(<span class=\"number\">4f</span>);</div><div class=\"line\">        <span class=\"comment\">//圆圈空心的半径</span></div><div class=\"line\">        lineDataSet.setCircleHoleRadius(<span class=\"number\">3f</span>);</div><div class=\"line\">        <span class=\"comment\">//圆环的颜色</span></div><div class=\"line\">        lineDataSet.setCircleColor(getResources().getColor(R.color.colorBarColor));</div><div class=\"line\">        <span class=\"comment\">//折线或曲线的宽度</span></div><div class=\"line\">        lineDataSet.setLineWidth(<span class=\"number\">2f</span>);</div><div class=\"line\">        <span class=\"comment\">//线的模式：决定是 折线还是曲线</span></div><div class=\"line\">        lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);</div><div class=\"line\">        <span class=\"comment\">//线的颜色</span></div><div class=\"line\">        lineDataSet.setColor(getResources().getColor(R.color.colorBarColor));</div><div class=\"line\">        <span class=\"comment\">//线下方是否填充颜色</span></div><div class=\"line\">        lineDataSet.setDrawFilled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//设置线下方填充的颜色</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">18</span>) &#123;</div><div class=\"line\">            lineDataSet.setFillDrawable(getResources().getDrawable(R.drawable.line_one_shape));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            lineDataSet.setFillColor(<span class=\"number\">0x4f2F7EDB</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        LineData lineData = <span class=\"keyword\">new</span> LineData(lineDataSet);</div><div class=\"line\">        weekChart.setData(lineData);</div><div class=\"line\">        weekChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//没数据时清理图表</span></div><div class=\"line\">        weekChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>line_one_shape.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span> <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#7f2F7EDB\"</span> <span class=\"attr\">android:angle</span>=<span class=\"string\">\"270\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"@android:color/transparent\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"饼状图-PieChart\"><a href=\"#饼状图-PieChart\" class=\"headerlink\" title=\"饼状图(PieChart)\"></a>饼状图(PieChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//空数据提示</span></div><div class=\"line\">reasonPieChart.setNoDataText(getString(R.string.no_data));</div><div class=\"line\"><span class=\"comment\">//使用百分比值画图(也就是说按数据的大小比例画图)</span></div><div class=\"line\">reasonPieChart.setUsePercentValues(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//描述</span></div><div class=\"line\">reasonPieChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//饼状图的位置偏移</span></div><div class=\"line\">reasonPieChart.setExtraOffsets(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//是否可以拖动旋转</span></div><div class=\"line\">reasonPieChart.setRotationEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//好像是拖动转圈后松手的惯性(0到1,越大越快)</span></div><div class=\"line\">reasonPieChart.setDragDecelerationFrictionCoef(<span class=\"number\">0.95f</span>);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否画中间的文字</span></div><div class=\"line\">reasonPieChart.setDrawCenterText(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//中间的文字</span></div><div class=\"line\">reasonPieChart.setCenterText(<span class=\"string\">\"原因废品率(%)\"</span>);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//是否画中间的洞</span></div><div class=\"line\">reasonPieChart.setDrawHoleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//中间洞的颜色</span></div><div class=\"line\">reasonPieChart.setHoleColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//中间洞外边一小圈的颜色</span></div><div class=\"line\">reasonPieChart.setTransparentCircleColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//中间洞外边一小圈的透明度</span></div><div class=\"line\">reasonPieChart.setTransparentCircleAlpha(<span class=\"number\">110</span>);</div><div class=\"line\"><span class=\"comment\">//中间洞的半径</span></div><div class=\"line\">reasonPieChart.setHoleRadius(<span class=\"number\">48f</span>);</div><div class=\"line\"><span class=\"comment\">//洞外小圈的半径</span></div><div class=\"line\">reasonPieChart.setTransparentCircleRadius(<span class=\"number\">51f</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置旋转的角度</span></div><div class=\"line\">reasonPieChart.setRotationAngle(<span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否画扇形内部的文字</span></div><div class=\"line\">reasonPieChart.setDrawEntryLabels(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//扇形内部文字的颜色</span></div><div class=\"line\">reasonPieChart.setEntryLabelColor(Color.BLACK);</div><div class=\"line\"><span class=\"comment\">//扇形内部文字的大小</span></div><div class=\"line\">reasonPieChart.setEntryLabelTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否启用色标</span></div><div class=\"line\">reasonPieChart.getLegend().setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">Legend legend = reasonPieChart.getLegend();</div><div class=\"line\"><span class=\"comment\">//色标的方面</span></div><div class=\"line\">legend.setOrientation(Legend.LegendOrientation.VERTICAL);</div><div class=\"line\"><span class=\"comment\">//色标的水平位置</span></div><div class=\"line\">legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);</div><div class=\"line\"><span class=\"comment\">//色标的垂直位置</span></div><div class=\"line\">legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);</div><div class=\"line\"><span class=\"comment\">//色标画在图标外面还是里面</span></div><div class=\"line\">legend.setDrawInside(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//色标文字的大小</span></div><div class=\"line\">legend.setTextSize(<span class=\"number\">11f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>数据填充</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateReason</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.ReasonEntity&gt; reason)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (reason != <span class=\"keyword\">null</span> &amp;&amp; reason.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        List&lt;PieEntry&gt; yVals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; reason.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.ReasonEntity reasonEntity = reason.get(i);</div><div class=\"line\">            <span class=\"comment\">//值和名称</span></div><div class=\"line\">            PieEntry barEntry = <span class=\"keyword\">new</span> PieEntry(reasonEntity.getValue(), <span class=\"string\">\"[\"</span>+reasonEntity.getValue()+<span class=\"string\">\"%] \"</span>+reasonEntity.getName());</div><div class=\"line\">            yVals.add(barEntry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        PieDataSet set = <span class=\"keyword\">new</span> PieDataSet(yVals, <span class=\"string\">\"\"</span>);</div><div class=\"line\">        ArrayList&lt;Integer&gt; colors = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"comment\">//扇形的颜色</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> vordiplomColor : ColorTemplate.VORDIPLOM_COLORS) &#123;</div><div class=\"line\">            colors.add(vordiplomColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> libertyColor : ColorTemplate.LIBERTY_COLORS) &#123;</div><div class=\"line\">            colors.add(libertyColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        set.setColors(colors);</div><div class=\"line\">        <span class=\"comment\">//数值的的颜色</span></div><div class=\"line\">        set.setValueTextColor(Color.BLACK);</div><div class=\"line\">        <span class=\"comment\">//分隔线的颜色</span></div><div class=\"line\">        set.setValueLineColor(Color.WHITE);</div><div class=\"line\">        PieData barData = <span class=\"keyword\">new</span> PieData(set);</div><div class=\"line\">        <span class=\"comment\">//数值的大小</span></div><div class=\"line\">        barData.setValueTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">        reasonPieChart.setData(barData);</div><div class=\"line\">        reasonPieChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        reasonPieChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"柱状图-BarChart-HorizontalBarChart\"><a href=\"#柱状图-BarChart-HorizontalBarChart\" class=\"headerlink\" title=\"柱状图(BarChart/HorizontalBarChart)\"></a>柱状图(BarChart/HorizontalBarChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否画柱子的底色</span></div><div class=\"line\">reasonBarChart.setDrawBarShadow(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画数字在柱子顶部</span></div><div class=\"line\">reasonBarChart.setDrawValueAboveBar(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示右下角的描述</span></div><div class=\"line\">reasonBarChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否双向指缩放</span></div><div class=\"line\">reasonBarChart.setPinchZoom(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画背景格子</span></div><div class=\"line\">reasonBarChart.setDrawGridBackground(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示右边的坐标</span></div><div class=\"line\">reasonBarChart.getAxisRight().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//x轴的位置(左边，右边，两边)</span></div><div class=\"line\">reasonBarChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);</div><div class=\"line\"><span class=\"comment\">//是否显示X轴的坐标线</span></div><div class=\"line\">reasonBarChart.getXAxis().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//设置X轴坐标的文字大小</span></div><div class=\"line\">reasonBarChart.getXAxis().setTextSize(<span class=\"number\">9f</span>);</div><div class=\"line\"><span class=\"comment\">//设置X轴坐标的旋转角度</span></div><div class=\"line\"><span class=\"comment\">//reasonBarChart.getXAxis().setLabelRotationAngle(45);</span></div><div class=\"line\"><span class=\"comment\">//是否显示左边Y轴的坐标线</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//设置左边Y轴的最小值</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setAxisMinimum(<span class=\"number\">0f</span>);</div><div class=\"line\"><span class=\"comment\">//设置左边Y轴的是否显示</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//色标</span></div><div class=\"line\">Legend legend = reasonBarChart.getLegend();</div><div class=\"line\">legend.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">legend.setOrientation(Legend.LegendOrientation.HORIZONTAL);</div><div class=\"line\">legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);</div><div class=\"line\">legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);</div><div class=\"line\">legend.setForm(Legend.LegendForm.SQUARE);</div><div class=\"line\">legend.setFormSize(<span class=\"number\">9f</span>);</div><div class=\"line\">legend.setXEntrySpace(<span class=\"number\">4f</span>);</div><div class=\"line\">legend.setDrawInside(<span class=\"keyword\">false</span>);</div><div class=\"line\">legend.setTextSize(<span class=\"number\">11f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>X轴坐标转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">productBarChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> product.get((<span class=\"keyword\">int</span>) value).getName()+<span class=\"string\">\" [\"</span>+product.get((<span class=\"keyword\">int</span>) value).getValue()+<span class=\"string\">\"%]\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>填充数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProduct</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.ProductEntity&gt; product)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (product != <span class=\"keyword\">null</span> &amp;&amp; product.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//保证X坐标显示全</span></div><div class=\"line\">        productBarChart.getXAxis().setLabelCount(product.size());</div><div class=\"line\">        <span class=\"comment\">//调整显示顺序</span></div><div class=\"line\">        Collections.reverse(product);</div><div class=\"line\">        <span class=\"comment\">//整理数据</span></div><div class=\"line\">        List&lt;BarEntry&gt; yVals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; product.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.ProductEntity productEntity = product.get(i);</div><div class=\"line\">            BarEntry barEntry = <span class=\"keyword\">new</span> BarEntry(i, productEntity.getValue());</div><div class=\"line\">            yVals.add(barEntry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//X轴坐标转换</span></div><div class=\"line\">        productBarChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> product.get((<span class=\"keyword\">int</span>) value).getName()+<span class=\"string\">\" [\"</span>+product.get((<span class=\"keyword\">int</span>) value).getValue()+<span class=\"string\">\"%]\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    </div><div class=\"line\">        BarDataSet set = <span class=\"keyword\">new</span> BarDataSet(yVals, <span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"comment\">//设置柱子颜色</span></div><div class=\"line\">        ArrayList&lt;Integer&gt; colors = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> joyfulColor : ColorTemplate.JOYFUL_COLORS) &#123;</div><div class=\"line\">            colors.add(joyfulColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> colorfulColor : ColorTemplate.COLORFUL_COLORS) &#123;</div><div class=\"line\">            colors.add(colorfulColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        set.setColors(colors);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的颜色</span></div><div class=\"line\">        set.setValueTextColor(Color.BLACK);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的值是否显示</span></div><div class=\"line\">        set.setDrawValues(<span class=\"keyword\">true</span>);</div><div class=\"line\">        BarData barData = <span class=\"keyword\">new</span> BarData(set);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的大小</span></div><div class=\"line\">        barData.setValueTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">        productBarChart.setData(barData);</div><div class=\"line\">        productBarChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        productBarChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"../../../../images/mpandroidcahrt.png\" alt=\"图1\"></p>\n<p><img src=\"../../../../images/mpandroidchart2.png\" alt=\"图2\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"为什么要写这个小结？\"><a href=\"#为什么要写这个小结？\" class=\"headerlink\" title=\"为什么要写这个小结？\"></a>为什么要写这个小结？</h3><ul>\n<li>MPAndroidChart文档是英文的，demo没有注释。</li>\n<li>为了让以后使用MPAndroidChart更加方便。</li>\n</ul>","more":"<h2 id=\"MPAndroidChart简介\"><a href=\"#MPAndroidChart简介\" class=\"headerlink\" title=\"MPAndroidChart简介\"></a>MPAndroidChart简介</h2><h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><p><a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a></p>\n<h3 id=\"我用的版本\"><a href=\"#我用的版本\" class=\"headerlink\" title=\"我用的版本\"></a>我用的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.github.PhilJay:MPAndroidChart:v3.0.2&apos;</div></pre></td></tr></table></figure>\n<h2 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h2><h3 id=\"折线图-曲线图-LineChart\"><a href=\"#折线图-曲线图-LineChart\" class=\"headerlink\" title=\"折线图/曲线图(LineChart)\"></a>折线图/曲线图(LineChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否画背景线</span></div><div class=\"line\">weekChart.setDrawGridBackground(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画边界</span></div><div class=\"line\">weekChart.setDrawBorders(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画标记</span></div><div class=\"line\">weekChart.setDrawMarkers(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画色标</span></div><div class=\"line\">weekChart.getLegend().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示描述</span></div><div class=\"line\">weekChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//空数据提示文字</span></div><div class=\"line\">weekChart.setNoDataText(getString(R.string.no_data));</div><div class=\"line\"><span class=\"comment\">//横坐标的位置(上，下，或上和下)</span></div><div class=\"line\">weekChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);</div><div class=\"line\"><span class=\"comment\">//是否画横坐标的线(竖线)</span></div><div class=\"line\">weekChart.getXAxis().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画右边的纵坐标</span></div><div class=\"line\">weekChart.getAxisRight().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画左边的纵坐标的线</span></div><div class=\"line\">weekChart.getAxisLeft().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画左边的纵坐标</span></div><div class=\"line\">weekChart.getAxisLeft().setDrawLabels(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>让第一点和最后一点显示全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置最小X坐标小于0</span></div><div class=\"line\">weekChart.getXAxis().setAxisMinimum(-<span class=\"number\">0.5f</span>);</div><div class=\"line\"><span class=\"comment\">//设置最大X坐标大于 (点的数量-0.5)</span></div><div class=\"line\">weekChart.getXAxis().setAxisMaximum(week.size()-<span class=\"number\">0.5f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>设置X坐标不跳过或省略</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置X坐标个数，以保证X坐标都显示出来</span></div><div class=\"line\">weekChart.getXAxis().setLabelCount(week.size());</div></pre></td></tr></table></figure>\n<ul>\n<li>数据填充</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateWeek</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.WeekEntity&gt; week)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (week != <span class=\"keyword\">null</span> &amp;&amp; week.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//设置左右间距</span></div><div class=\"line\">        weekChart.getXAxis().setAxisMinimum(-<span class=\"number\">0.5f</span>);</div><div class=\"line\">        weekChart.getXAxis().setAxisMaximum(week.size()-<span class=\"number\">0.5f</span>);</div><div class=\"line\">        <span class=\"comment\">//设置X坐标不省略</span></div><div class=\"line\">        weekChart.getXAxis().setLabelCount(week.size());</div><div class=\"line\">        <span class=\"comment\">//数据处理</span></div><div class=\"line\">        List&lt;Entry&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; week.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.WeekEntity weekEntity = week.get(i);</div><div class=\"line\">            values.add(<span class=\"keyword\">new</span> Entry(i, weekEntity.getValue()));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//修改X坐标的值</span></div><div class=\"line\">        weekChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> week.get((<span class=\"keyword\">int</span>) value).getName();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        LineDataSet lineDataSet = <span class=\"keyword\">new</span> LineDataSet(values, <span class=\"string\">\"周废品率(%)\"</span>);</div><div class=\"line\">        <span class=\"comment\">//圆圈外圈的半径</span></div><div class=\"line\">        lineDataSet.setCircleRadius(<span class=\"number\">4f</span>);</div><div class=\"line\">        <span class=\"comment\">//圆圈空心的半径</span></div><div class=\"line\">        lineDataSet.setCircleHoleRadius(<span class=\"number\">3f</span>);</div><div class=\"line\">        <span class=\"comment\">//圆环的颜色</span></div><div class=\"line\">        lineDataSet.setCircleColor(getResources().getColor(R.color.colorBarColor));</div><div class=\"line\">        <span class=\"comment\">//折线或曲线的宽度</span></div><div class=\"line\">        lineDataSet.setLineWidth(<span class=\"number\">2f</span>);</div><div class=\"line\">        <span class=\"comment\">//线的模式：决定是 折线还是曲线</span></div><div class=\"line\">        lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);</div><div class=\"line\">        <span class=\"comment\">//线的颜色</span></div><div class=\"line\">        lineDataSet.setColor(getResources().getColor(R.color.colorBarColor));</div><div class=\"line\">        <span class=\"comment\">//线下方是否填充颜色</span></div><div class=\"line\">        lineDataSet.setDrawFilled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//设置线下方填充的颜色</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">18</span>) &#123;</div><div class=\"line\">            lineDataSet.setFillDrawable(getResources().getDrawable(R.drawable.line_one_shape));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            lineDataSet.setFillColor(<span class=\"number\">0x4f2F7EDB</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        LineData lineData = <span class=\"keyword\">new</span> LineData(lineDataSet);</div><div class=\"line\">        weekChart.setData(lineData);</div><div class=\"line\">        weekChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//没数据时清理图表</span></div><div class=\"line\">        weekChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>line_one_shape.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span> <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#7f2F7EDB\"</span> <span class=\"attr\">android:angle</span>=<span class=\"string\">\"270\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"@android:color/transparent\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"饼状图-PieChart\"><a href=\"#饼状图-PieChart\" class=\"headerlink\" title=\"饼状图(PieChart)\"></a>饼状图(PieChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//空数据提示</span></div><div class=\"line\">reasonPieChart.setNoDataText(getString(R.string.no_data));</div><div class=\"line\"><span class=\"comment\">//使用百分比值画图(也就是说按数据的大小比例画图)</span></div><div class=\"line\">reasonPieChart.setUsePercentValues(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//描述</span></div><div class=\"line\">reasonPieChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//饼状图的位置偏移</span></div><div class=\"line\">reasonPieChart.setExtraOffsets(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//是否可以拖动旋转</span></div><div class=\"line\">reasonPieChart.setRotationEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//好像是拖动转圈后松手的惯性(0到1,越大越快)</span></div><div class=\"line\">reasonPieChart.setDragDecelerationFrictionCoef(<span class=\"number\">0.95f</span>);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否画中间的文字</span></div><div class=\"line\">reasonPieChart.setDrawCenterText(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//中间的文字</span></div><div class=\"line\">reasonPieChart.setCenterText(<span class=\"string\">\"原因废品率(%)\"</span>);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//是否画中间的洞</span></div><div class=\"line\">reasonPieChart.setDrawHoleEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//中间洞的颜色</span></div><div class=\"line\">reasonPieChart.setHoleColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//中间洞外边一小圈的颜色</span></div><div class=\"line\">reasonPieChart.setTransparentCircleColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//中间洞外边一小圈的透明度</span></div><div class=\"line\">reasonPieChart.setTransparentCircleAlpha(<span class=\"number\">110</span>);</div><div class=\"line\"><span class=\"comment\">//中间洞的半径</span></div><div class=\"line\">reasonPieChart.setHoleRadius(<span class=\"number\">48f</span>);</div><div class=\"line\"><span class=\"comment\">//洞外小圈的半径</span></div><div class=\"line\">reasonPieChart.setTransparentCircleRadius(<span class=\"number\">51f</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置旋转的角度</span></div><div class=\"line\">reasonPieChart.setRotationAngle(<span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否画扇形内部的文字</span></div><div class=\"line\">reasonPieChart.setDrawEntryLabels(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//扇形内部文字的颜色</span></div><div class=\"line\">reasonPieChart.setEntryLabelColor(Color.BLACK);</div><div class=\"line\"><span class=\"comment\">//扇形内部文字的大小</span></div><div class=\"line\">reasonPieChart.setEntryLabelTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//是否启用色标</span></div><div class=\"line\">reasonPieChart.getLegend().setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">Legend legend = reasonPieChart.getLegend();</div><div class=\"line\"><span class=\"comment\">//色标的方面</span></div><div class=\"line\">legend.setOrientation(Legend.LegendOrientation.VERTICAL);</div><div class=\"line\"><span class=\"comment\">//色标的水平位置</span></div><div class=\"line\">legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);</div><div class=\"line\"><span class=\"comment\">//色标的垂直位置</span></div><div class=\"line\">legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);</div><div class=\"line\"><span class=\"comment\">//色标画在图标外面还是里面</span></div><div class=\"line\">legend.setDrawInside(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//色标文字的大小</span></div><div class=\"line\">legend.setTextSize(<span class=\"number\">11f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>数据填充</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateReason</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.ReasonEntity&gt; reason)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (reason != <span class=\"keyword\">null</span> &amp;&amp; reason.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        List&lt;PieEntry&gt; yVals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; reason.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.ReasonEntity reasonEntity = reason.get(i);</div><div class=\"line\">            <span class=\"comment\">//值和名称</span></div><div class=\"line\">            PieEntry barEntry = <span class=\"keyword\">new</span> PieEntry(reasonEntity.getValue(), <span class=\"string\">\"[\"</span>+reasonEntity.getValue()+<span class=\"string\">\"%] \"</span>+reasonEntity.getName());</div><div class=\"line\">            yVals.add(barEntry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        PieDataSet set = <span class=\"keyword\">new</span> PieDataSet(yVals, <span class=\"string\">\"\"</span>);</div><div class=\"line\">        ArrayList&lt;Integer&gt; colors = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"comment\">//扇形的颜色</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> vordiplomColor : ColorTemplate.VORDIPLOM_COLORS) &#123;</div><div class=\"line\">            colors.add(vordiplomColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> libertyColor : ColorTemplate.LIBERTY_COLORS) &#123;</div><div class=\"line\">            colors.add(libertyColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        set.setColors(colors);</div><div class=\"line\">        <span class=\"comment\">//数值的的颜色</span></div><div class=\"line\">        set.setValueTextColor(Color.BLACK);</div><div class=\"line\">        <span class=\"comment\">//分隔线的颜色</span></div><div class=\"line\">        set.setValueLineColor(Color.WHITE);</div><div class=\"line\">        PieData barData = <span class=\"keyword\">new</span> PieData(set);</div><div class=\"line\">        <span class=\"comment\">//数值的大小</span></div><div class=\"line\">        barData.setValueTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">        reasonPieChart.setData(barData);</div><div class=\"line\">        reasonPieChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        reasonPieChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"柱状图-BarChart-HorizontalBarChart\"><a href=\"#柱状图-BarChart-HorizontalBarChart\" class=\"headerlink\" title=\"柱状图(BarChart/HorizontalBarChart)\"></a>柱状图(BarChart/HorizontalBarChart)</h3><ul>\n<li>初始化控件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否画柱子的底色</span></div><div class=\"line\">reasonBarChart.setDrawBarShadow(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画数字在柱子顶部</span></div><div class=\"line\">reasonBarChart.setDrawValueAboveBar(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示右下角的描述</span></div><div class=\"line\">reasonBarChart.getDescription().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否双向指缩放</span></div><div class=\"line\">reasonBarChart.setPinchZoom(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否画背景格子</span></div><div class=\"line\">reasonBarChart.setDrawGridBackground(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//是否显示右边的坐标</span></div><div class=\"line\">reasonBarChart.getAxisRight().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//x轴的位置(左边，右边，两边)</span></div><div class=\"line\">reasonBarChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);</div><div class=\"line\"><span class=\"comment\">//是否显示X轴的坐标线</span></div><div class=\"line\">reasonBarChart.getXAxis().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//设置X轴坐标的文字大小</span></div><div class=\"line\">reasonBarChart.getXAxis().setTextSize(<span class=\"number\">9f</span>);</div><div class=\"line\"><span class=\"comment\">//设置X轴坐标的旋转角度</span></div><div class=\"line\"><span class=\"comment\">//reasonBarChart.getXAxis().setLabelRotationAngle(45);</span></div><div class=\"line\"><span class=\"comment\">//是否显示左边Y轴的坐标线</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setDrawGridLines(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//设置左边Y轴的最小值</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setAxisMinimum(<span class=\"number\">0f</span>);</div><div class=\"line\"><span class=\"comment\">//设置左边Y轴的是否显示</span></div><div class=\"line\">reasonBarChart.getAxisLeft().setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//色标</span></div><div class=\"line\">Legend legend = reasonBarChart.getLegend();</div><div class=\"line\">legend.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">legend.setOrientation(Legend.LegendOrientation.HORIZONTAL);</div><div class=\"line\">legend.setHorizontalAlignment(Legend.LegendHorizontalAlignment.RIGHT);</div><div class=\"line\">legend.setVerticalAlignment(Legend.LegendVerticalAlignment.CENTER);</div><div class=\"line\">legend.setForm(Legend.LegendForm.SQUARE);</div><div class=\"line\">legend.setFormSize(<span class=\"number\">9f</span>);</div><div class=\"line\">legend.setXEntrySpace(<span class=\"number\">4f</span>);</div><div class=\"line\">legend.setDrawInside(<span class=\"keyword\">false</span>);</div><div class=\"line\">legend.setTextSize(<span class=\"number\">11f</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>X轴坐标转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">productBarChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> product.get((<span class=\"keyword\">int</span>) value).getName()+<span class=\"string\">\" [\"</span>+product.get((<span class=\"keyword\">int</span>) value).getValue()+<span class=\"string\">\"%]\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>填充数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateProduct</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;GetDefectiveRateResult.DataEntity.ProductEntity&gt; product)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (product != <span class=\"keyword\">null</span> &amp;&amp; product.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//保证X坐标显示全</span></div><div class=\"line\">        productBarChart.getXAxis().setLabelCount(product.size());</div><div class=\"line\">        <span class=\"comment\">//调整显示顺序</span></div><div class=\"line\">        Collections.reverse(product);</div><div class=\"line\">        <span class=\"comment\">//整理数据</span></div><div class=\"line\">        List&lt;BarEntry&gt; yVals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; product.size(); i++) &#123;</div><div class=\"line\">            GetDefectiveRateResult.DataEntity.ProductEntity productEntity = product.get(i);</div><div class=\"line\">            BarEntry barEntry = <span class=\"keyword\">new</span> BarEntry(i, productEntity.getValue());</div><div class=\"line\">            yVals.add(barEntry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//X轴坐标转换</span></div><div class=\"line\">        productBarChart.getXAxis().setValueFormatter(<span class=\"keyword\">new</span> IAxisValueFormatter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFormattedValue</span><span class=\"params\">(<span class=\"keyword\">float</span> value, AxisBase axis)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> product.get((<span class=\"keyword\">int</span>) value).getName()+<span class=\"string\">\" [\"</span>+product.get((<span class=\"keyword\">int</span>) value).getValue()+<span class=\"string\">\"%]\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    </div><div class=\"line\">        BarDataSet set = <span class=\"keyword\">new</span> BarDataSet(yVals, <span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"comment\">//设置柱子颜色</span></div><div class=\"line\">        ArrayList&lt;Integer&gt; colors = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> joyfulColor : ColorTemplate.JOYFUL_COLORS) &#123;</div><div class=\"line\">            colors.add(joyfulColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> colorfulColor : ColorTemplate.COLORFUL_COLORS) &#123;</div><div class=\"line\">            colors.add(colorfulColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        set.setColors(colors);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的颜色</span></div><div class=\"line\">        set.setValueTextColor(Color.BLACK);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的值是否显示</span></div><div class=\"line\">        set.setDrawValues(<span class=\"keyword\">true</span>);</div><div class=\"line\">        BarData barData = <span class=\"keyword\">new</span> BarData(set);</div><div class=\"line\">        <span class=\"comment\">//设置柱子上文字的大小</span></div><div class=\"line\">        barData.setValueTextSize(<span class=\"number\">7f</span>);</div><div class=\"line\">        productBarChart.setData(barData);</div><div class=\"line\">        productBarChart.invalidate();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        productBarChart.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"../../../../images/mpandroidcahrt.png\" alt=\"图1\"></p>\n<p><img src=\"../../../../images/mpandroidchart2.png\" alt=\"图2\"></p>"},{"title":"Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题","date":"2017-07-18T00:40:40.000Z","_content":"\n解决方法：\n\n重写ScrollView的这个方法：\n\n```java\n    @Override\n    public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) {\n        return child instanceof EditText;\n    }\n```","source":"_posts/Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题.md","raw":"---\ntitle: Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题\ndate: 2017-07-18 08:40:40\ntags:\n\t- Android\ncategories: Android疑难杂症\n---\n\n解决方法：\n\n重写ScrollView的这个方法：\n\n```java\n    @Override\n    public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate) {\n        return child instanceof EditText;\n    }\n```","slug":"Android疑难杂症-EditText抢占焦点使ScrollView自动滑动问题","published":1,"updated":"2017-08-10T12:01:34.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsa000vwou5xwvjr15x","content":"<p>解决方法：</p>\n<p>重写ScrollView的这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestChildRectangleOnScreen</span><span class=\"params\">(View child, Rect rectangle, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> child <span class=\"keyword\">instanceof</span> EditText;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>解决方法：</p>\n<p>重写ScrollView的这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">requestChildRectangleOnScreen</span><span class=\"params\">(View child, Rect rectangle, <span class=\"keyword\">boolean</span> immediate)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> child <span class=\"keyword\">instanceof</span> EditText;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android疑难杂症-Glide加载圆角或圆形图片","date":"2017-07-27T05:10:18.000Z","_content":"\n\n### 添加类\n\n<!-- more -->\n\n```java\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapShader;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.RectF;\n  \nimport com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;\nimport com.bumptech.glide.load.resource.bitmap.BitmapTransformation;\n  \npublic class GlideCircleTransform {\n    public static class GlideRoundTransform extends BitmapTransformation {\n  \n        private float radius = 0f;\n  \n        public GlideRoundTransform(Context context) {\n            this(context, 6);\n        }\n  \n        public GlideRoundTransform(Context context, int dp) {\n            super(context);\n            this.radius = Resources.getSystem().getDisplayMetrics().density * dp;\n        }\n  \n        @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n            return roundCrop(pool, toTransform);\n        }\n  \n        private Bitmap roundCrop(BitmapPool pool, Bitmap source) {\n  \n            if (source == null) return null;\n  \n            Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);\n            if (result == null) {\n                result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);\n            }\n  \n            Canvas canvas = new Canvas(result);\n            Paint paint = new Paint();\n            paint.setShader(new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n            paint.setAntiAlias(true);\n            RectF rectF = new RectF(0f, 0f, source.getWidth(), source.getHeight());\n            canvas.drawRoundRect(rectF, radius, radius, paint);\n            return result;\n        }\n  \n        @Override public String getId() {\n            return getClass().getName() + Math.round(radius);\n        }\n    }\n}\n```\n\n### 使用方式\n\n```java\nGlide.with(context)\n\t.load(url)\n\t.transform(new CenterCrop(mContext), \n\t\tnew GlideCircleTransform.GlideRoundTransform(mContext, 300))\n\t.into(imageView);\n```","source":"_posts/Android疑难杂症-Glide加载圆角或圆形图片.md","raw":"---\ntitle: Android疑难杂症-Glide加载圆角或圆形图片\ndate: 2017-07-27 13:10:18\ntags:\n\t- Android\ncategories: Android疑难杂症\n---\n\n\n### 添加类\n\n<!-- more -->\n\n```java\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapShader;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.RectF;\n  \nimport com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;\nimport com.bumptech.glide.load.resource.bitmap.BitmapTransformation;\n  \npublic class GlideCircleTransform {\n    public static class GlideRoundTransform extends BitmapTransformation {\n  \n        private float radius = 0f;\n  \n        public GlideRoundTransform(Context context) {\n            this(context, 6);\n        }\n  \n        public GlideRoundTransform(Context context, int dp) {\n            super(context);\n            this.radius = Resources.getSystem().getDisplayMetrics().density * dp;\n        }\n  \n        @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {\n            return roundCrop(pool, toTransform);\n        }\n  \n        private Bitmap roundCrop(BitmapPool pool, Bitmap source) {\n  \n            if (source == null) return null;\n  \n            Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);\n            if (result == null) {\n                result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);\n            }\n  \n            Canvas canvas = new Canvas(result);\n            Paint paint = new Paint();\n            paint.setShader(new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));\n            paint.setAntiAlias(true);\n            RectF rectF = new RectF(0f, 0f, source.getWidth(), source.getHeight());\n            canvas.drawRoundRect(rectF, radius, radius, paint);\n            return result;\n        }\n  \n        @Override public String getId() {\n            return getClass().getName() + Math.round(radius);\n        }\n    }\n}\n```\n\n### 使用方式\n\n```java\nGlide.with(context)\n\t.load(url)\n\t.transform(new CenterCrop(mContext), \n\t\tnew GlideCircleTransform.GlideRoundTransform(mContext, 300))\n\t.into(imageView);\n```","slug":"Android疑难杂症-Glide加载圆角或圆形图片","published":1,"updated":"2017-08-10T12:01:34.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsj0010wou5f3ey9za4","content":"<h3 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.Resources;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapShader;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.RectF;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;</div><div class=\"line\"><span class=\"keyword\">import</span> com.bumptech.glide.load.resource.bitmap.BitmapTransformation;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideCircleTransform</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideRoundTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>(context, <span class=\"number\">6</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> dp)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(context);</div><div class=\"line\">            <span class=\"keyword\">this</span>.radius = Resources.getSystem().getDisplayMetrics().density * dp;</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool, Bitmap toTransform, <span class=\"keyword\">int</span> outWidth, <span class=\"keyword\">int</span> outHeight)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> roundCrop(pool, toTransform);</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">roundCrop</span><span class=\"params\">(BitmapPool pool, Bitmap source)</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">            <span class=\"keyword\">if</span> (source == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  </div><div class=\"line\">            Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class=\"line\">            <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class=\"line\">            &#125;</div><div class=\"line\">  </div><div class=\"line\">            Canvas canvas = <span class=\"keyword\">new</span> Canvas(result);</div><div class=\"line\">            Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">            paint.setShader(<span class=\"keyword\">new</span> BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</div><div class=\"line\">            paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">            RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, source.getWidth(), source.getHeight());</div><div class=\"line\">            canvas.drawRoundRect(rectF, radius, radius, paint);</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> getClass().getName() + Math.round(radius);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.transform(<span class=\"keyword\">new</span> CenterCrop(mContext), </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> GlideCircleTransform.GlideRoundTransform(mContext, <span class=\"number\">300</span>))</div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.Resources;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapShader;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.RectF;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;</div><div class=\"line\"><span class=\"keyword\">import</span> com.bumptech.glide.load.resource.bitmap.BitmapTransformation;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideCircleTransform</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideRoundTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>(context, <span class=\"number\">6</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> dp)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(context);</div><div class=\"line\">            <span class=\"keyword\">this</span>.radius = Resources.getSystem().getDisplayMetrics().density * dp;</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool, Bitmap toTransform, <span class=\"keyword\">int</span> outWidth, <span class=\"keyword\">int</span> outHeight)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> roundCrop(pool, toTransform);</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">roundCrop</span><span class=\"params\">(BitmapPool pool, Bitmap source)</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">            <span class=\"keyword\">if</span> (source == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  </div><div class=\"line\">            Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class=\"line\">            <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class=\"line\">            &#125;</div><div class=\"line\">  </div><div class=\"line\">            Canvas canvas = <span class=\"keyword\">new</span> Canvas(result);</div><div class=\"line\">            Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">            paint.setShader(<span class=\"keyword\">new</span> BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</div><div class=\"line\">            paint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">            RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, source.getWidth(), source.getHeight());</div><div class=\"line\">            canvas.drawRoundRect(rectF, radius, radius, paint);</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> getClass().getName() + Math.round(radius);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(context)</div><div class=\"line\">\t.load(url)</div><div class=\"line\">\t.transform(<span class=\"keyword\">new</span> CenterCrop(mContext), </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> GlideCircleTransform.GlideRoundTransform(mContext, <span class=\"number\">300</span>))</div><div class=\"line\">\t.into(imageView);</div></pre></td></tr></table></figure>"},{"title":"Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效","date":"2017-06-13T06:34:39.000Z","_content":"\n解决方法：\n\n在addView()之前\n\n添加如下代码\n\n```java\n        mTextView.measure(View.MeasureSpec.makeMeasureSpec(mWidth, View.MeasureSpec.EXACTLY),\n                View.MeasureSpec.makeMeasureSpec(mHeight, View.MeasureSpec.EXACTLY));\n```","source":"_posts/Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效.md","raw":"---\ntitle: Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效\ndate: 2017-06-13 14:34:39\ntags: \n\t- Android\ncategories: Android疑难杂症\n---\n\n解决方法：\n\n在addView()之前\n\n添加如下代码\n\n```java\n        mTextView.measure(View.MeasureSpec.makeMeasureSpec(mWidth, View.MeasureSpec.EXACTLY),\n                View.MeasureSpec.makeMeasureSpec(mHeight, View.MeasureSpec.EXACTLY));\n```","slug":"Android疑难杂症-自定义ViewGroup添加TextView的Gravity失效","published":1,"updated":"2017-08-10T12:01:34.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsk0012wou5qv5d27m7","content":"<p>解决方法：</p>\n<p>在addView()之前</p>\n<p>添加如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTextView.measure(View.MeasureSpec.makeMeasureSpec(mWidth, View.MeasureSpec.EXACTLY),</div><div class=\"line\">        View.MeasureSpec.makeMeasureSpec(mHeight, View.MeasureSpec.EXACTLY));</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>解决方法：</p>\n<p>在addView()之前</p>\n<p>添加如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mTextView.measure(View.MeasureSpec.makeMeasureSpec(mWidth, View.MeasureSpec.EXACTLY),</div><div class=\"line\">        View.MeasureSpec.makeMeasureSpec(mHeight, View.MeasureSpec.EXACTLY));</div></pre></td></tr></table></figure>"},{"title":"Android签名打包-指定apk文件名","date":"2017-07-27T05:03:36.000Z","_content":"\n\n## 开发工具\n\n- Android Studio\n\n## 操作方法\n\n在build.gradle中加入\n\n<!-- more -->\n\n```\nandroid {\n  \n\t//...\n  \n    applicationVariants.all {variant ->\n        variant.outputs.each {output ->\n            def outputFile = output.outputFile\n            def fileName\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                if (variant.buildType.name.equals('release')) {\n                    fileName = \"APP名称_${defaultConfig.versionName}_${defaultConfig.versionCode}.apk\"\n                } else if (variant.buildType.name.equals('debug')) {\n                    fileName = \"APP名称_${defaultConfig.versionName}_${defaultConfig.versionCode}_debug.apk\"\n                }\n                output.outputFile = new File(outputFile.parent, fileName)\n            }\n        }\n    }\n  \n}\n  \n```","source":"_posts/Android签名打包-指定apk文件名.md","raw":"---\ntitle: Android签名打包-指定apk文件名\ndate: 2017-07-27 13:03:36\ntags:\n\t- Android\ncategories: Android签名打包\n---\n\n\n## 开发工具\n\n- Android Studio\n\n## 操作方法\n\n在build.gradle中加入\n\n<!-- more -->\n\n```\nandroid {\n  \n\t//...\n  \n    applicationVariants.all {variant ->\n        variant.outputs.each {output ->\n            def outputFile = output.outputFile\n            def fileName\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                if (variant.buildType.name.equals('release')) {\n                    fileName = \"APP名称_${defaultConfig.versionName}_${defaultConfig.versionCode}.apk\"\n                } else if (variant.buildType.name.equals('debug')) {\n                    fileName = \"APP名称_${defaultConfig.versionName}_${defaultConfig.versionCode}_debug.apk\"\n                }\n                output.outputFile = new File(outputFile.parent, fileName)\n            }\n        }\n    }\n  \n}\n  \n```","slug":"Android签名打包-指定apk文件名","published":1,"updated":"2017-08-10T12:01:34.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsm0017wou5lo48a3c1","content":"<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>Android Studio</li>\n</ul>\n<h2 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h2><p>在build.gradle中加入</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">  </div><div class=\"line\">\t//...</div><div class=\"line\">  </div><div class=\"line\">    applicationVariants.all &#123;variant -&gt;</div><div class=\"line\">        variant.outputs.each &#123;output -&gt;</div><div class=\"line\">            def outputFile = output.outputFile</div><div class=\"line\">            def fileName</div><div class=\"line\">            if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class=\"line\">                if (variant.buildType.name.equals(&apos;release&apos;)) &#123;</div><div class=\"line\">                    fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;.apk&quot;</div><div class=\"line\">                &#125; else if (variant.buildType.name.equals(&apos;debug&apos;)) &#123;</div><div class=\"line\">                    fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;_debug.apk&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">                output.outputFile = new File(outputFile.parent, fileName)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>Android Studio</li>\n</ul>\n<h2 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h2><p>在build.gradle中加入</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">  </div><div class=\"line\">\t//...</div><div class=\"line\">  </div><div class=\"line\">    applicationVariants.all &#123;variant -&gt;</div><div class=\"line\">        variant.outputs.each &#123;output -&gt;</div><div class=\"line\">            def outputFile = output.outputFile</div><div class=\"line\">            def fileName</div><div class=\"line\">            if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class=\"line\">                if (variant.buildType.name.equals(&apos;release&apos;)) &#123;</div><div class=\"line\">                    fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;.apk&quot;</div><div class=\"line\">                &#125; else if (variant.buildType.name.equals(&apos;debug&apos;)) &#123;</div><div class=\"line\">                    fileName = &quot;APP名称_$&#123;defaultConfig.versionName&#125;_$&#123;defaultConfig.versionCode&#125;_debug.apk&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">                output.outputFile = new File(outputFile.parent, fileName)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android签名打包-获取Mac调试证书的SHA1","date":"2017-07-28T00:46:46.000Z","_content":"\n### 打开Android Studio\n\n### 进入Terminal\n\n### 输入如下命令：\n\n```\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```","source":"_posts/Android签名打包-获取Mac调试证书的SHA1.md","raw":"---\ntitle: Android签名打包-获取Mac调试证书的SHA1\ndate: 2017-07-28 08:46:46\ntags:\n\t- Android\ncategories: Android签名打包\n---\n\n### 打开Android Studio\n\n### 进入Terminal\n\n### 输入如下命令：\n\n```\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```","slug":"Android签名打包-获取Mac调试证书的SHA1","published":1,"updated":"2017-08-10T12:01:34.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsn0019wou5a714f92l","content":"<h3 id=\"打开Android-Studio\"><a href=\"#打开Android-Studio\" class=\"headerlink\" title=\"打开Android Studio\"></a>打开Android Studio</h3><h3 id=\"进入Terminal\"><a href=\"#进入Terminal\" class=\"headerlink\" title=\"进入Terminal\"></a>进入Terminal</h3><h3 id=\"输入如下命令：\"><a href=\"#输入如下命令：\" class=\"headerlink\" title=\"输入如下命令：\"></a>输入如下命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"打开Android-Studio\"><a href=\"#打开Android-Studio\" class=\"headerlink\" title=\"打开Android Studio\"></a>打开Android Studio</h3><h3 id=\"进入Terminal\"><a href=\"#进入Terminal\" class=\"headerlink\" title=\"进入Terminal\"></a>进入Terminal</h3><h3 id=\"输入如下命令：\"><a href=\"#输入如下命令：\" class=\"headerlink\" title=\"输入如下命令：\"></a>输入如下命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android</div></pre></td></tr></table></figure>"},{"title":"Android自定义控件-CameraCardCrop","date":"2017-06-22T09:31:54.000Z","_content":"\n# CameraCardCrop\n一个卡片（证件）拍照裁剪框架。\n(A cutting framework for card-photo.)\n\n## Gradle\n\n```\ncompile 'me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2'\n```\n\n<!-- more -->\n\n## Screenshot\n\n<img src=\"../../../../images/cameracrop2.png\"  width=\"300px\"/>\n<img src=\"../../../../images/cameracrop1.png\"  width=\"300px\"/>\n\n## Notice\n\n```\ncard\n\n---------------------\n|       width       |\n|                   |\n|                   |height\n|                   |\n---------------------\nphone\n------------------------------------\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|      mask                         |\n|                                   |\n|                width              |\n|    ------------------------       |\n|    |                       |      |\n|    |                height |      | screen height\n|    |         rect          |      |\n|    |                       |      |\n|    ------------------------       |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|            screen width           |\n-------------------------------------\nCameraConfig.RATIO_WIDTH = card's width\nCameraConfig.RATIO_HEIGHT = card's height\nCameraConfig.PERCENT_WIDTH = rect'swidth / screen's width\n```\n\n## Usage\n\n### step 1. Add Activity in your AndroidManifest.xml file.\n\n```xml\n    <activity android:name=\"me.zhouzhuo810.cameracardcrop.CropActivity\"\n        android:screenOrientation=\"portrait\"\n        android:theme=\"@style/Theme.AppCompat.NoActionBar\">\n    </activity>\n```\n\n### step 2. Add permissions in your AndroidManifest.xml file.\n\n```xml\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" />\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n```\n\n### step 3. Example for use.\n\n\n```java\n    public void takePhoto(View v) {\n        Intent intent = new Intent(MainActivity.this, CropActivity.class);\n        intent.putExtra(CameraConfig.RATIO_WIDTH, 855);\n        intent.putExtra(CameraConfig.RATIO_HEIGHT, 541);  \n        intent.putExtra(CameraConfig.PERCENT_WIDTH, 0.8f); //[0,1]\n        intent.putExtra(CameraConfig.MASK_COLOR, 0x2f000000);\n        intent.putExtra(CameraConfig.RECT_CORNER_COLOR, 0xff00ff00);\n        intent.putExtra(CameraConfig.TEXT_COLOR, 0xffffffff);\n        intent.putExtra(CameraConfig.HINT_TEXT, \"请将方框对准证件拍照\");\n        intent.putExtra(CameraConfig.IMAGE_PATH, Environment.getExternalStorageDirectory().getAbsolutePath()+\"/CameraCardCrop/\"+System.currentTimeMillis()+\".jpg\");\n        startActivityForResult(intent, 0x01);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == RESULT_OK) {\n            if (requestCode == 0x01) {\n                String path = data.getStringExtra(CameraConfig.IMAGE_PATH);\n                ivPic.setImageURI(Uri.parse(\"file://\"+path));\n            }\n        }\n    }\n\n```\n","source":"_posts/Android自定义控件-CameraCardCrop.md","raw":"---\ntitle: Android自定义控件-CameraCardCrop\ndate: 2017-06-22 17:31:54\ntags:\n\t- Android\ncategories: Android自定义控件\n---\n\n# CameraCardCrop\n一个卡片（证件）拍照裁剪框架。\n(A cutting framework for card-photo.)\n\n## Gradle\n\n```\ncompile 'me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2'\n```\n\n<!-- more -->\n\n## Screenshot\n\n<img src=\"../../../../images/cameracrop2.png\"  width=\"300px\"/>\n<img src=\"../../../../images/cameracrop1.png\"  width=\"300px\"/>\n\n## Notice\n\n```\ncard\n\n---------------------\n|       width       |\n|                   |\n|                   |height\n|                   |\n---------------------\nphone\n------------------------------------\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|      mask                         |\n|                                   |\n|                width              |\n|    ------------------------       |\n|    |                       |      |\n|    |                height |      | screen height\n|    |         rect          |      |\n|    |                       |      |\n|    ------------------------       |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|                                   |\n|            screen width           |\n-------------------------------------\nCameraConfig.RATIO_WIDTH = card's width\nCameraConfig.RATIO_HEIGHT = card's height\nCameraConfig.PERCENT_WIDTH = rect'swidth / screen's width\n```\n\n## Usage\n\n### step 1. Add Activity in your AndroidManifest.xml file.\n\n```xml\n    <activity android:name=\"me.zhouzhuo810.cameracardcrop.CropActivity\"\n        android:screenOrientation=\"portrait\"\n        android:theme=\"@style/Theme.AppCompat.NoActionBar\">\n    </activity>\n```\n\n### step 2. Add permissions in your AndroidManifest.xml file.\n\n```xml\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" />\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n```\n\n### step 3. Example for use.\n\n\n```java\n    public void takePhoto(View v) {\n        Intent intent = new Intent(MainActivity.this, CropActivity.class);\n        intent.putExtra(CameraConfig.RATIO_WIDTH, 855);\n        intent.putExtra(CameraConfig.RATIO_HEIGHT, 541);  \n        intent.putExtra(CameraConfig.PERCENT_WIDTH, 0.8f); //[0,1]\n        intent.putExtra(CameraConfig.MASK_COLOR, 0x2f000000);\n        intent.putExtra(CameraConfig.RECT_CORNER_COLOR, 0xff00ff00);\n        intent.putExtra(CameraConfig.TEXT_COLOR, 0xffffffff);\n        intent.putExtra(CameraConfig.HINT_TEXT, \"请将方框对准证件拍照\");\n        intent.putExtra(CameraConfig.IMAGE_PATH, Environment.getExternalStorageDirectory().getAbsolutePath()+\"/CameraCardCrop/\"+System.currentTimeMillis()+\".jpg\");\n        startActivityForResult(intent, 0x01);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == RESULT_OK) {\n            if (requestCode == 0x01) {\n                String path = data.getStringExtra(CameraConfig.IMAGE_PATH);\n                ivPic.setImageURI(Uri.parse(\"file://\"+path));\n            }\n        }\n    }\n\n```\n","slug":"Android自定义控件-CameraCardCrop","published":1,"updated":"2017-08-10T12:01:34.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsp001dwou5ehx69ha5","content":"<h1 id=\"CameraCardCrop\"><a href=\"#CameraCardCrop\" class=\"headerlink\" title=\"CameraCardCrop\"></a>CameraCardCrop</h1><p>一个卡片（证件）拍照裁剪框架。<br>(A cutting framework for card-photo.)</p>\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2&apos;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Screenshot\"><a href=\"#Screenshot\" class=\"headerlink\" title=\"Screenshot\"></a>Screenshot</h2><p><img src=\"../../../../images/cameracrop2.png\" width=\"300px\"><br><img src=\"../../../../images/cameracrop1.png\" width=\"300px\"></p>\n<h2 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">card</div><div class=\"line\"></div><div class=\"line\">---------------------</div><div class=\"line\">|       width       |</div><div class=\"line\">|                   |</div><div class=\"line\">|                   |height</div><div class=\"line\">|                   |</div><div class=\"line\">---------------------</div><div class=\"line\">phone</div><div class=\"line\">------------------------------------</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|      mask                         |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                width              |</div><div class=\"line\">|    ------------------------       |</div><div class=\"line\">|    |                       |      |</div><div class=\"line\">|    |                height |      | screen height</div><div class=\"line\">|    |         rect          |      |</div><div class=\"line\">|    |                       |      |</div><div class=\"line\">|    ------------------------       |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|            screen width           |</div><div class=\"line\">-------------------------------------</div><div class=\"line\">CameraConfig.RATIO_WIDTH = card&apos;s width</div><div class=\"line\">CameraConfig.RATIO_HEIGHT = card&apos;s height</div><div class=\"line\">CameraConfig.PERCENT_WIDTH = rect&apos;swidth / screen&apos;s width</div></pre></td></tr></table></figure>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><h3 id=\"step-1-Add-Activity-in-your-AndroidManifest-xml-file\"><a href=\"#step-1-Add-Activity-in-your-AndroidManifest-xml-file\" class=\"headerlink\" title=\"step 1. Add Activity in your AndroidManifest.xml file.\"></a>step 1. Add Activity in your AndroidManifest.xml file.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"me.zhouzhuo810.cameracardcrop.CropActivity\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat.NoActionBar\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"step-2-Add-permissions-in-your-AndroidManifest-xml-file\"><a href=\"#step-2-Add-permissions-in-your-AndroidManifest-xml-file\" class=\"headerlink\" title=\"step 2. Add permissions in your AndroidManifest.xml file.\"></a>step 2. Add permissions in your AndroidManifest.xml file.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"step-3-Example-for-use\"><a href=\"#step-3-Example-for-use\" class=\"headerlink\" title=\"step 3. Example for use.\"></a>step 3. Example for use.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, CropActivity.class);</div><div class=\"line\">    intent.putExtra(CameraConfig.RATIO_WIDTH, <span class=\"number\">855</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.RATIO_HEIGHT, <span class=\"number\">541</span>);  </div><div class=\"line\">    intent.putExtra(CameraConfig.PERCENT_WIDTH, <span class=\"number\">0.8f</span>); <span class=\"comment\">//[0,1]</span></div><div class=\"line\">    intent.putExtra(CameraConfig.MASK_COLOR, <span class=\"number\">0x2f000000</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.RECT_CORNER_COLOR, <span class=\"number\">0xff00ff00</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.TEXT_COLOR, <span class=\"number\">0xffffffff</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.HINT_TEXT, <span class=\"string\">\"请将方框对准证件拍照\"</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.IMAGE_PATH, Environment.getExternalStorageDirectory().getAbsolutePath()+<span class=\"string\">\"/CameraCardCrop/\"</span>+System.currentTimeMillis()+<span class=\"string\">\".jpg\"</span>);</div><div class=\"line\">    startActivityForResult(intent, <span class=\"number\">0x01</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode == <span class=\"number\">0x01</span>) &#123;</div><div class=\"line\">            String path = data.getStringExtra(CameraConfig.IMAGE_PATH);</div><div class=\"line\">            ivPic.setImageURI(Uri.parse(<span class=\"string\">\"file://\"</span>+path));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"CameraCardCrop\"><a href=\"#CameraCardCrop\" class=\"headerlink\" title=\"CameraCardCrop\"></a>CameraCardCrop</h1><p>一个卡片（证件）拍照裁剪框架。<br>(A cutting framework for card-photo.)</p>\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo810.cameracardcrop:camera-card-crop:1.0.2&apos;</div></pre></td></tr></table></figure>","more":"<h2 id=\"Screenshot\"><a href=\"#Screenshot\" class=\"headerlink\" title=\"Screenshot\"></a>Screenshot</h2><p><img src=\"../../../../images/cameracrop2.png\" width=\"300px\"><br><img src=\"../../../../images/cameracrop1.png\" width=\"300px\"></p>\n<h2 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">card</div><div class=\"line\"></div><div class=\"line\">---------------------</div><div class=\"line\">|       width       |</div><div class=\"line\">|                   |</div><div class=\"line\">|                   |height</div><div class=\"line\">|                   |</div><div class=\"line\">---------------------</div><div class=\"line\">phone</div><div class=\"line\">------------------------------------</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|      mask                         |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                width              |</div><div class=\"line\">|    ------------------------       |</div><div class=\"line\">|    |                       |      |</div><div class=\"line\">|    |                height |      | screen height</div><div class=\"line\">|    |         rect          |      |</div><div class=\"line\">|    |                       |      |</div><div class=\"line\">|    ------------------------       |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|                                   |</div><div class=\"line\">|            screen width           |</div><div class=\"line\">-------------------------------------</div><div class=\"line\">CameraConfig.RATIO_WIDTH = card&apos;s width</div><div class=\"line\">CameraConfig.RATIO_HEIGHT = card&apos;s height</div><div class=\"line\">CameraConfig.PERCENT_WIDTH = rect&apos;swidth / screen&apos;s width</div></pre></td></tr></table></figure>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><h3 id=\"step-1-Add-Activity-in-your-AndroidManifest-xml-file\"><a href=\"#step-1-Add-Activity-in-your-AndroidManifest-xml-file\" class=\"headerlink\" title=\"step 1. Add Activity in your AndroidManifest.xml file.\"></a>step 1. Add Activity in your AndroidManifest.xml file.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"me.zhouzhuo810.cameracardcrop.CropActivity\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait\"</span></div><div class=\"line\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat.NoActionBar\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"step-2-Add-permissions-in-your-AndroidManifest-xml-file\"><a href=\"#step-2-Add-permissions-in-your-AndroidManifest-xml-file\" class=\"headerlink\" title=\"step 2. Add permissions in your AndroidManifest.xml file.\"></a>step 2. Add permissions in your AndroidManifest.xml file.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"step-3-Example-for-use\"><a href=\"#step-3-Example-for-use\" class=\"headerlink\" title=\"step 3. Example for use.\"></a>step 3. Example for use.</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takePhoto</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, CropActivity.class);</div><div class=\"line\">    intent.putExtra(CameraConfig.RATIO_WIDTH, <span class=\"number\">855</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.RATIO_HEIGHT, <span class=\"number\">541</span>);  </div><div class=\"line\">    intent.putExtra(CameraConfig.PERCENT_WIDTH, <span class=\"number\">0.8f</span>); <span class=\"comment\">//[0,1]</span></div><div class=\"line\">    intent.putExtra(CameraConfig.MASK_COLOR, <span class=\"number\">0x2f000000</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.RECT_CORNER_COLOR, <span class=\"number\">0xff00ff00</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.TEXT_COLOR, <span class=\"number\">0xffffffff</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.HINT_TEXT, <span class=\"string\">\"请将方框对准证件拍照\"</span>);</div><div class=\"line\">    intent.putExtra(CameraConfig.IMAGE_PATH, Environment.getExternalStorageDirectory().getAbsolutePath()+<span class=\"string\">\"/CameraCardCrop/\"</span>+System.currentTimeMillis()+<span class=\"string\">\".jpg\"</span>);</div><div class=\"line\">    startActivityForResult(intent, <span class=\"number\">0x01</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode == <span class=\"number\">0x01</span>) &#123;</div><div class=\"line\">            String path = data.getStringExtra(CameraConfig.IMAGE_PATH);</div><div class=\"line\">            ivPic.setImageURI(Uri.parse(<span class=\"string\">\"file://\"</span>+path));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Android自定义控件-ZzExcelCreator","date":"2017-06-14T05:12:18.000Z","_content":"\n# ZzExcelCreator\nExcel表格生成工具\n\n项目地址:https://github.com/zhouzhuo810/ZzExcelCreator\n（欢迎star!）\n\n<!-- more -->\n\n效果图：\n\n![excel1.jpg](../../../../images/excel1.jpg)\n![excel2.jpg](../../../../images/excel2.jpg)\n![excel3.jpg](../../../../images/excel3.jpg)\n\n最近做项目用到jxl.jar来生成Excel表格；\n\n但是发现jxl源码都没有注释的，方法也没有说明，\n虽然最后在网上找到了对应的方法。\n\n不过这不是我的style，果断自己封装一下，添加注释。\n\n\n下面介绍一下用法：\n\n### Gradle：\n\n```\ncompile 'me.zhouzhuo.zzexcelcreator:zz-excel-creator:1.0.0'\n```\n\n\n### 创建Excel文件和工作表\n\n```java\nZzExcelCreator\n    .getInstance()\n    .createExcel(PATH, params[0])  //生成excel文件\n    .createSheet(params[1])        //生成sheet工作表\n    .close();\n```\n### 打开Excel文件和工作表\n```java\nZzExcelCreator\n    .getInstance()\n    .openExcel(new File(PATH + fileName + \".xls\"))  //打开Excel文件\n    .openSheet(0)                                   //打开Sheet工作表\n    ... ...\n    .close();\n```\n\n### 设置单元格内容格式：\n\n```java\n//设置单元格内容格式\nWritableCellFormat format = ZzFormatCreator\n\t.getInstance()\n\t.createCellFont(WritableFont.ARIAL)  //设置字体\n\t.setAlignment(Alignment.CENTRE, VerticalAlignment.CENTRE)  //设置对齐方式(水平和垂直)\n\t.setFontSize(14)                    //设置字体大小\n\t.setFontColor(Colour.ROSE)          //设置字体颜色\n\t.getCellFormat();\n```\n\n### 设置行高、列宽和写入字符串或数字\n\n```java\nZzExcelCreator\n    .getInstance()\n    .openExcel(new File(PATH + fileName + \".xls\"))  \n    .openSheet(0)\n    .setColumnWidth(Integer.parseInt(col), 25)   //设置列宽\n    .setRowHeight(Integer.parseInt(row), 400)    //设置行高\n    .fillContent(Integer.parseInt(col), Integer.parseInt(row), str, format)  //填入字符串\n    .fillNumber(Integer.parseInt(col), Integer.parseInt(row), Double.parseDouble(str), format)  //填入数字\n    .close();\n```\n\n### 最后就是，这些操作最好在子线程操作。\n","source":"_posts/Android自定义控件-ZzExcelCreator.md","raw":"---\ntitle: Android自定义控件-ZzExcelCreator\ndate: 2017-06-14 13:12:18\ntags:\n\t- Android\ncategories: Android自定义控件\n---\n\n# ZzExcelCreator\nExcel表格生成工具\n\n项目地址:https://github.com/zhouzhuo810/ZzExcelCreator\n（欢迎star!）\n\n<!-- more -->\n\n效果图：\n\n![excel1.jpg](../../../../images/excel1.jpg)\n![excel2.jpg](../../../../images/excel2.jpg)\n![excel3.jpg](../../../../images/excel3.jpg)\n\n最近做项目用到jxl.jar来生成Excel表格；\n\n但是发现jxl源码都没有注释的，方法也没有说明，\n虽然最后在网上找到了对应的方法。\n\n不过这不是我的style，果断自己封装一下，添加注释。\n\n\n下面介绍一下用法：\n\n### Gradle：\n\n```\ncompile 'me.zhouzhuo.zzexcelcreator:zz-excel-creator:1.0.0'\n```\n\n\n### 创建Excel文件和工作表\n\n```java\nZzExcelCreator\n    .getInstance()\n    .createExcel(PATH, params[0])  //生成excel文件\n    .createSheet(params[1])        //生成sheet工作表\n    .close();\n```\n### 打开Excel文件和工作表\n```java\nZzExcelCreator\n    .getInstance()\n    .openExcel(new File(PATH + fileName + \".xls\"))  //打开Excel文件\n    .openSheet(0)                                   //打开Sheet工作表\n    ... ...\n    .close();\n```\n\n### 设置单元格内容格式：\n\n```java\n//设置单元格内容格式\nWritableCellFormat format = ZzFormatCreator\n\t.getInstance()\n\t.createCellFont(WritableFont.ARIAL)  //设置字体\n\t.setAlignment(Alignment.CENTRE, VerticalAlignment.CENTRE)  //设置对齐方式(水平和垂直)\n\t.setFontSize(14)                    //设置字体大小\n\t.setFontColor(Colour.ROSE)          //设置字体颜色\n\t.getCellFormat();\n```\n\n### 设置行高、列宽和写入字符串或数字\n\n```java\nZzExcelCreator\n    .getInstance()\n    .openExcel(new File(PATH + fileName + \".xls\"))  \n    .openSheet(0)\n    .setColumnWidth(Integer.parseInt(col), 25)   //设置列宽\n    .setRowHeight(Integer.parseInt(row), 400)    //设置行高\n    .fillContent(Integer.parseInt(col), Integer.parseInt(row), str, format)  //填入字符串\n    .fillNumber(Integer.parseInt(col), Integer.parseInt(row), Double.parseDouble(str), format)  //填入数字\n    .close();\n```\n\n### 最后就是，这些操作最好在子线程操作。\n","slug":"Android自定义控件-ZzExcelCreator","published":1,"updated":"2017-08-10T12:01:34.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsp001fwou5srakp686","content":"<h1 id=\"ZzExcelCreator\"><a href=\"#ZzExcelCreator\" class=\"headerlink\" title=\"ZzExcelCreator\"></a>ZzExcelCreator</h1><p>Excel表格生成工具</p>\n<p>项目地址:<a href=\"https://github.com/zhouzhuo810/ZzExcelCreator\" target=\"_blank\" rel=\"external\">https://github.com/zhouzhuo810/ZzExcelCreator</a><br>（欢迎star!）</p>\n<a id=\"more\"></a>\n<p>效果图：</p>\n<p><img src=\"../../../../images/excel1.jpg\" alt=\"excel1.jpg\"><br><img src=\"../../../../images/excel2.jpg\" alt=\"excel2.jpg\"><br><img src=\"../../../../images/excel3.jpg\" alt=\"excel3.jpg\"></p>\n<p>最近做项目用到jxl.jar来生成Excel表格；</p>\n<p>但是发现jxl源码都没有注释的，方法也没有说明，<br>虽然最后在网上找到了对应的方法。</p>\n<p>不过这不是我的style，果断自己封装一下，添加注释。</p>\n<p>下面介绍一下用法：</p>\n<h3 id=\"Gradle：\"><a href=\"#Gradle：\" class=\"headerlink\" title=\"Gradle：\"></a>Gradle：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzexcelcreator:zz-excel-creator:1.0.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"创建Excel文件和工作表\"><a href=\"#创建Excel文件和工作表\" class=\"headerlink\" title=\"创建Excel文件和工作表\"></a>创建Excel文件和工作表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .createExcel(PATH, params[<span class=\"number\">0</span>])  <span class=\"comment\">//生成excel文件</span></div><div class=\"line\">    .createSheet(params[<span class=\"number\">1</span>])        <span class=\"comment\">//生成sheet工作表</span></div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"打开Excel文件和工作表\"><a href=\"#打开Excel文件和工作表\" class=\"headerlink\" title=\"打开Excel文件和工作表\"></a>打开Excel文件和工作表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .openExcel(<span class=\"keyword\">new</span> File(PATH + fileName + <span class=\"string\">\".xls\"</span>))  <span class=\"comment\">//打开Excel文件</span></div><div class=\"line\">    .openSheet(<span class=\"number\">0</span>)                                   <span class=\"comment\">//打开Sheet工作表</span></div><div class=\"line\">    ... ...</div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"设置单元格内容格式：\"><a href=\"#设置单元格内容格式：\" class=\"headerlink\" title=\"设置单元格内容格式：\"></a>设置单元格内容格式：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置单元格内容格式</span></div><div class=\"line\">WritableCellFormat format = ZzFormatCreator</div><div class=\"line\">\t.getInstance()</div><div class=\"line\">\t.createCellFont(WritableFont.ARIAL)  <span class=\"comment\">//设置字体</span></div><div class=\"line\">\t.setAlignment(Alignment.CENTRE, VerticalAlignment.CENTRE)  <span class=\"comment\">//设置对齐方式(水平和垂直)</span></div><div class=\"line\">\t.setFontSize(<span class=\"number\">14</span>)                    <span class=\"comment\">//设置字体大小</span></div><div class=\"line\">\t.setFontColor(Colour.ROSE)          <span class=\"comment\">//设置字体颜色</span></div><div class=\"line\">\t.getCellFormat();</div></pre></td></tr></table></figure>\n<h3 id=\"设置行高、列宽和写入字符串或数字\"><a href=\"#设置行高、列宽和写入字符串或数字\" class=\"headerlink\" title=\"设置行高、列宽和写入字符串或数字\"></a>设置行高、列宽和写入字符串或数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .openExcel(<span class=\"keyword\">new</span> File(PATH + fileName + <span class=\"string\">\".xls\"</span>))  </div><div class=\"line\">    .openSheet(<span class=\"number\">0</span>)</div><div class=\"line\">    .setColumnWidth(Integer.parseInt(col), <span class=\"number\">25</span>)   <span class=\"comment\">//设置列宽</span></div><div class=\"line\">    .setRowHeight(Integer.parseInt(row), <span class=\"number\">400</span>)    <span class=\"comment\">//设置行高</span></div><div class=\"line\">    .fillContent(Integer.parseInt(col), Integer.parseInt(row), str, format)  <span class=\"comment\">//填入字符串</span></div><div class=\"line\">    .fillNumber(Integer.parseInt(col), Integer.parseInt(row), Double.parseDouble(str), format)  <span class=\"comment\">//填入数字</span></div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"最后就是，这些操作最好在子线程操作。\"><a href=\"#最后就是，这些操作最好在子线程操作。\" class=\"headerlink\" title=\"最后就是，这些操作最好在子线程操作。\"></a>最后就是，这些操作最好在子线程操作。</h3>","site":{"data":{}},"excerpt":"<h1 id=\"ZzExcelCreator\"><a href=\"#ZzExcelCreator\" class=\"headerlink\" title=\"ZzExcelCreator\"></a>ZzExcelCreator</h1><p>Excel表格生成工具</p>\n<p>项目地址:<a href=\"https://github.com/zhouzhuo810/ZzExcelCreator\" target=\"_blank\" rel=\"external\">https://github.com/zhouzhuo810/ZzExcelCreator</a><br>（欢迎star!）</p>","more":"<p>效果图：</p>\n<p><img src=\"../../../../images/excel1.jpg\" alt=\"excel1.jpg\"><br><img src=\"../../../../images/excel2.jpg\" alt=\"excel2.jpg\"><br><img src=\"../../../../images/excel3.jpg\" alt=\"excel3.jpg\"></p>\n<p>最近做项目用到jxl.jar来生成Excel表格；</p>\n<p>但是发现jxl源码都没有注释的，方法也没有说明，<br>虽然最后在网上找到了对应的方法。</p>\n<p>不过这不是我的style，果断自己封装一下，添加注释。</p>\n<p>下面介绍一下用法：</p>\n<h3 id=\"Gradle：\"><a href=\"#Gradle：\" class=\"headerlink\" title=\"Gradle：\"></a>Gradle：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzexcelcreator:zz-excel-creator:1.0.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"创建Excel文件和工作表\"><a href=\"#创建Excel文件和工作表\" class=\"headerlink\" title=\"创建Excel文件和工作表\"></a>创建Excel文件和工作表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .createExcel(PATH, params[<span class=\"number\">0</span>])  <span class=\"comment\">//生成excel文件</span></div><div class=\"line\">    .createSheet(params[<span class=\"number\">1</span>])        <span class=\"comment\">//生成sheet工作表</span></div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"打开Excel文件和工作表\"><a href=\"#打开Excel文件和工作表\" class=\"headerlink\" title=\"打开Excel文件和工作表\"></a>打开Excel文件和工作表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .openExcel(<span class=\"keyword\">new</span> File(PATH + fileName + <span class=\"string\">\".xls\"</span>))  <span class=\"comment\">//打开Excel文件</span></div><div class=\"line\">    .openSheet(<span class=\"number\">0</span>)                                   <span class=\"comment\">//打开Sheet工作表</span></div><div class=\"line\">    ... ...</div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"设置单元格内容格式：\"><a href=\"#设置单元格内容格式：\" class=\"headerlink\" title=\"设置单元格内容格式：\"></a>设置单元格内容格式：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置单元格内容格式</span></div><div class=\"line\">WritableCellFormat format = ZzFormatCreator</div><div class=\"line\">\t.getInstance()</div><div class=\"line\">\t.createCellFont(WritableFont.ARIAL)  <span class=\"comment\">//设置字体</span></div><div class=\"line\">\t.setAlignment(Alignment.CENTRE, VerticalAlignment.CENTRE)  <span class=\"comment\">//设置对齐方式(水平和垂直)</span></div><div class=\"line\">\t.setFontSize(<span class=\"number\">14</span>)                    <span class=\"comment\">//设置字体大小</span></div><div class=\"line\">\t.setFontColor(Colour.ROSE)          <span class=\"comment\">//设置字体颜色</span></div><div class=\"line\">\t.getCellFormat();</div></pre></td></tr></table></figure>\n<h3 id=\"设置行高、列宽和写入字符串或数字\"><a href=\"#设置行高、列宽和写入字符串或数字\" class=\"headerlink\" title=\"设置行高、列宽和写入字符串或数字\"></a>设置行高、列宽和写入字符串或数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzExcelCreator</div><div class=\"line\">    .getInstance()</div><div class=\"line\">    .openExcel(<span class=\"keyword\">new</span> File(PATH + fileName + <span class=\"string\">\".xls\"</span>))  </div><div class=\"line\">    .openSheet(<span class=\"number\">0</span>)</div><div class=\"line\">    .setColumnWidth(Integer.parseInt(col), <span class=\"number\">25</span>)   <span class=\"comment\">//设置列宽</span></div><div class=\"line\">    .setRowHeight(Integer.parseInt(row), <span class=\"number\">400</span>)    <span class=\"comment\">//设置行高</span></div><div class=\"line\">    .fillContent(Integer.parseInt(col), Integer.parseInt(row), str, format)  <span class=\"comment\">//填入字符串</span></div><div class=\"line\">    .fillNumber(Integer.parseInt(col), Integer.parseInt(row), Double.parseDouble(str), format)  <span class=\"comment\">//填入数字</span></div><div class=\"line\">    .close();</div></pre></td></tr></table></figure>\n<h3 id=\"最后就是，这些操作最好在子线程操作。\"><a href=\"#最后就是，这些操作最好在子线程操作。\" class=\"headerlink\" title=\"最后就是，这些操作最好在子线程操作。\"></a>最后就是，这些操作最好在子线程操作。</h3>"},{"title":"Android自定义控件-ZzImageBox","date":"2017-06-14T02:43:05.000Z","_content":"\n# ZzImageBox\n\nA powerful image container for adding and removing images.\n\n### 功能简介：\n\n1.支持添加、删除、默认图片的配置；\n\n2.支持最大行数限制；\n\n3.支持每行数量修改；\n\n4.支持添加、删除、图片点击回调接口。\n\n5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))；\n\n6.支持加载本地图片(使用方法.addImage(String imagePath))；\n\n7.支持左右margin设置。\n\n### Gradle\n\n\n```\ncompile 'me.zhouzhuo.zzimagebox:zz-image-box:1.0.4'\n```\n\n<!-- more -->\n\n### Maven\n\n```xml\n<dependency>\n  <groupId>me.zhouzhuo.zzimagebox</groupId>\n  <artifactId>zz-image-box</artifactId>\n  <version>1.0.4</version>\n  <type>pom</type>\n</dependency>\n```\n\n## What does it look like?\n\n\n![zzimagebox](../../../../images/zzimagebox.gif)\n\n\n## How to use it ?\n\n\nxml:\n\n```xml\n    <me.zhouzhuo.zzimagebox.ZzImageBox\n        android:id=\"@+id/zz_image_box\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:zib_left_margin=\"20dp\"\n        app:zib_right_margin=\"20dp\"\n        app:zib_img_padding=\"5dp\"\n        app:zib_img_size_one_line=\"4\"\n        app:zib_max_line=\"3\"\n        app:zib_img_deletable=\"true\"\n        app:zib_img_add=\"@drawable/iv_add\"\n        app:zib_img_default=\"@drawable/iv_default\"\n        app:zib_img_delete=\"@drawable/iv_delete\"\n        />\n```\n\n\njava:\n\n```java\n        final ZzImageBox imageBox = (ZzImageBox) findViewById(R.id.zz_image_box);\n        imageBox.setOnImageClickListener(new ZzImageBox.OnImageClickListener() {\n            @Override\n            public void onImageClick(int position, String filePath) {\n                Log.d(\"ZzImageBox\", \"image clicked:\" + position + \",\" + filePath);\n            }\n  \n            @Override\n            public void onDeleteClick(int position, String filePath) {\n                imageBox.removeImage(position);\n                Log.d(\"ZzImageBox\", \"delete clicked:\" + position + \",\" + filePath);\n                Log.d(\"ZzImageBox\", \"all images\\n\"+imageBox.getAllImages().toString());\n            }\n  \n            @Override\n            public void onAddClick() {\n                imageBox.addImage(null);\n                Log.d(\"ZzImageBox\", \"add clicked\");\n                Log.d(\"ZzImageBox\", \"all images\\n\"+imageBox.getAllImages().toString());\n            }\n        });\n```\n\n## 属性说明：\n\n\n```\n    <declare-styleable name=\"ZzImageBox\">\n        <attr name=\"zib_max_line\" format=\"integer\" />\n        <attr name=\"zib_img_size_one_line\" format=\"integer\" />\n        <attr name=\"zib_img_padding\" format=\"dimension|reference\" />\n        <attr name=\"zib_img_default\" format=\"color|reference\" />\n        <attr name=\"zib_img_delete\" format=\"color|reference\" />\n        <attr name=\"zib_img_add\" format=\"color|reference\" />\n        <attr name=\"zib_img_deletable\" format=\"boolean\" />\n        <attr name=\"zib_left_margin\" format=\"dimension|reference\" />\n        <attr name=\"zib_right_margin\" format=\"dimension|reference\" />\n    </declare-styleable>\n```\n\n\n| 属性名| 属性类型 | 属性功能 |\n|:--------- |:-------------|:-------|\n| zib_max_line | integer | 最大行数 |\n| zib_img_size_one_line | integer | 每行数量 |\n| zib_img_padding| dimension | 图片之间的间距 |\n| zib_img_default | drawable|color | 默认图片资源id |\n| zib_img_delete |drawable|color | 删除图片资源id |\n| zib_img_add | drawable|color | 添加图片资源id |\n| zib_img_deletable |boolean | 是否显示删除图片 |\n| zib_left_margin| dimension | 控件距离屏幕左边距离 |\n| zib_right_margin| dimension | 控件距离屏幕右边距离 |\n\n","source":"_posts/Android自定义控件-ZzImageBox.md","raw":"---\ntitle: Android自定义控件-ZzImageBox\ndate: 2017-06-14 10:43:05\ntags:\n\t- Android\ncategories: Android自定义控件\n---\n\n# ZzImageBox\n\nA powerful image container for adding and removing images.\n\n### 功能简介：\n\n1.支持添加、删除、默认图片的配置；\n\n2.支持最大行数限制；\n\n3.支持每行数量修改；\n\n4.支持添加、删除、图片点击回调接口。\n\n5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))；\n\n6.支持加载本地图片(使用方法.addImage(String imagePath))；\n\n7.支持左右margin设置。\n\n### Gradle\n\n\n```\ncompile 'me.zhouzhuo.zzimagebox:zz-image-box:1.0.4'\n```\n\n<!-- more -->\n\n### Maven\n\n```xml\n<dependency>\n  <groupId>me.zhouzhuo.zzimagebox</groupId>\n  <artifactId>zz-image-box</artifactId>\n  <version>1.0.4</version>\n  <type>pom</type>\n</dependency>\n```\n\n## What does it look like?\n\n\n![zzimagebox](../../../../images/zzimagebox.gif)\n\n\n## How to use it ?\n\n\nxml:\n\n```xml\n    <me.zhouzhuo.zzimagebox.ZzImageBox\n        android:id=\"@+id/zz_image_box\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:zib_left_margin=\"20dp\"\n        app:zib_right_margin=\"20dp\"\n        app:zib_img_padding=\"5dp\"\n        app:zib_img_size_one_line=\"4\"\n        app:zib_max_line=\"3\"\n        app:zib_img_deletable=\"true\"\n        app:zib_img_add=\"@drawable/iv_add\"\n        app:zib_img_default=\"@drawable/iv_default\"\n        app:zib_img_delete=\"@drawable/iv_delete\"\n        />\n```\n\n\njava:\n\n```java\n        final ZzImageBox imageBox = (ZzImageBox) findViewById(R.id.zz_image_box);\n        imageBox.setOnImageClickListener(new ZzImageBox.OnImageClickListener() {\n            @Override\n            public void onImageClick(int position, String filePath) {\n                Log.d(\"ZzImageBox\", \"image clicked:\" + position + \",\" + filePath);\n            }\n  \n            @Override\n            public void onDeleteClick(int position, String filePath) {\n                imageBox.removeImage(position);\n                Log.d(\"ZzImageBox\", \"delete clicked:\" + position + \",\" + filePath);\n                Log.d(\"ZzImageBox\", \"all images\\n\"+imageBox.getAllImages().toString());\n            }\n  \n            @Override\n            public void onAddClick() {\n                imageBox.addImage(null);\n                Log.d(\"ZzImageBox\", \"add clicked\");\n                Log.d(\"ZzImageBox\", \"all images\\n\"+imageBox.getAllImages().toString());\n            }\n        });\n```\n\n## 属性说明：\n\n\n```\n    <declare-styleable name=\"ZzImageBox\">\n        <attr name=\"zib_max_line\" format=\"integer\" />\n        <attr name=\"zib_img_size_one_line\" format=\"integer\" />\n        <attr name=\"zib_img_padding\" format=\"dimension|reference\" />\n        <attr name=\"zib_img_default\" format=\"color|reference\" />\n        <attr name=\"zib_img_delete\" format=\"color|reference\" />\n        <attr name=\"zib_img_add\" format=\"color|reference\" />\n        <attr name=\"zib_img_deletable\" format=\"boolean\" />\n        <attr name=\"zib_left_margin\" format=\"dimension|reference\" />\n        <attr name=\"zib_right_margin\" format=\"dimension|reference\" />\n    </declare-styleable>\n```\n\n\n| 属性名| 属性类型 | 属性功能 |\n|:--------- |:-------------|:-------|\n| zib_max_line | integer | 最大行数 |\n| zib_img_size_one_line | integer | 每行数量 |\n| zib_img_padding| dimension | 图片之间的间距 |\n| zib_img_default | drawable|color | 默认图片资源id |\n| zib_img_delete |drawable|color | 删除图片资源id |\n| zib_img_add | drawable|color | 添加图片资源id |\n| zib_img_deletable |boolean | 是否显示删除图片 |\n| zib_left_margin| dimension | 控件距离屏幕左边距离 |\n| zib_right_margin| dimension | 控件距离屏幕右边距离 |\n\n","slug":"Android自定义控件-ZzImageBox","published":1,"updated":"2017-08-10T12:01:34.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsr001jwou57vnencrl","content":"<h1 id=\"ZzImageBox\"><a href=\"#ZzImageBox\" class=\"headerlink\" title=\"ZzImageBox\"></a>ZzImageBox</h1><p>A powerful image container for adding and removing images.</p>\n<h3 id=\"功能简介：\"><a href=\"#功能简介：\" class=\"headerlink\" title=\"功能简介：\"></a>功能简介：</h3><p>1.支持添加、删除、默认图片的配置；</p>\n<p>2.支持最大行数限制；</p>\n<p>3.支持每行数量修改；</p>\n<p>4.支持添加、删除、图片点击回调接口。</p>\n<p>5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))；</p>\n<p>6.支持加载本地图片(使用方法.addImage(String imagePath))；</p>\n<p>7.支持左右margin设置。</p>\n<h3 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzimagebox:zz-image-box:1.0.4&apos;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.zhouzhuo.zzimagebox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zz-image-box<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"What-does-it-look-like\"><a href=\"#What-does-it-look-like\" class=\"headerlink\" title=\"What does it look like?\"></a>What does it look like?</h2><p><img src=\"../../../../images/zzimagebox.gif\" alt=\"zzimagebox\"></p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it ?\"></a>How to use it ?</h2><p>xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">me.zhouzhuo.zzimagebox.ZzImageBox</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/zz_image_box\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_left_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_right_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_padding</span>=<span class=\"string\">\"5dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_size_one_line</span>=<span class=\"string\">\"4\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_max_line</span>=<span class=\"string\">\"3\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_deletable</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_add</span>=<span class=\"string\">\"@drawable/iv_add\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_default</span>=<span class=\"string\">\"@drawable/iv_default\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_delete</span>=<span class=\"string\">\"@drawable/iv_delete\"</span></div><div class=\"line\">    /&gt;</div></pre></td></tr></table></figure>\n<p>java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ZzImageBox imageBox = (ZzImageBox) findViewById(R.id.zz_image_box);</div><div class=\"line\">imageBox.setOnImageClickListener(<span class=\"keyword\">new</span> ZzImageBox.OnImageClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onImageClick</span><span class=\"params\">(<span class=\"keyword\">int</span> position, String filePath)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"image clicked:\"</span> + position + <span class=\"string\">\",\"</span> + filePath);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDeleteClick</span><span class=\"params\">(<span class=\"keyword\">int</span> position, String filePath)</span> </span>&#123;</div><div class=\"line\">        imageBox.removeImage(position);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"delete clicked:\"</span> + position + <span class=\"string\">\",\"</span> + filePath);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"all images\\n\"</span>+imageBox.getAllImages().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAddClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        imageBox.addImage(<span class=\"keyword\">null</span>);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"add clicked\"</span>);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"all images\\n\"</span>+imageBox.getAllImages().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"属性说明：\"><a href=\"#属性说明：\" class=\"headerlink\" title=\"属性说明：\"></a>属性说明：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;declare-styleable name=&quot;ZzImageBox&quot;&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_max_line&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_size_one_line&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_padding&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_default&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_delete&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_add&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_deletable&quot; format=&quot;boolean&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_left_margin&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_right_margin&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性名</th>\n<th style=\"text-align:left\">属性类型</th>\n<th style=\"text-align:left\">属性功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">zib_max_line</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">最大行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_size_one_line</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">每行数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_padding</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">图片之间的间距</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_default</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>默认图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_delete</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>删除图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_add</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>添加图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_deletable</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否显示删除图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_left_margin</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">控件距离屏幕左边距离</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_right_margin</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">控件距离屏幕右边距离</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"ZzImageBox\"><a href=\"#ZzImageBox\" class=\"headerlink\" title=\"ZzImageBox\"></a>ZzImageBox</h1><p>A powerful image container for adding and removing images.</p>\n<h3 id=\"功能简介：\"><a href=\"#功能简介：\" class=\"headerlink\" title=\"功能简介：\"></a>功能简介：</h3><p>1.支持添加、删除、默认图片的配置；</p>\n<p>2.支持最大行数限制；</p>\n<p>3.支持每行数量修改；</p>\n<p>4.支持添加、删除、图片点击回调接口。</p>\n<p>5.支持Box的添加(.addImage(String imagePath))和删除(.removeImage(int position))；</p>\n<p>6.支持加载本地图片(使用方法.addImage(String imagePath))；</p>\n<p>7.支持左右margin设置。</p>\n<h3 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzimagebox:zz-image-box:1.0.4&apos;</div></pre></td></tr></table></figure>","more":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.zhouzhuo.zzimagebox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zz-image-box<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"What-does-it-look-like\"><a href=\"#What-does-it-look-like\" class=\"headerlink\" title=\"What does it look like?\"></a>What does it look like?</h2><p><img src=\"../../../../images/zzimagebox.gif\" alt=\"zzimagebox\"></p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it ?\"></a>How to use it ?</h2><p>xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">me.zhouzhuo.zzimagebox.ZzImageBox</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/zz_image_box\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_left_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_right_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_padding</span>=<span class=\"string\">\"5dp\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_size_one_line</span>=<span class=\"string\">\"4\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_max_line</span>=<span class=\"string\">\"3\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_deletable</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_add</span>=<span class=\"string\">\"@drawable/iv_add\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_default</span>=<span class=\"string\">\"@drawable/iv_default\"</span></div><div class=\"line\">    <span class=\"attr\">app:zib_img_delete</span>=<span class=\"string\">\"@drawable/iv_delete\"</span></div><div class=\"line\">    /&gt;</div></pre></td></tr></table></figure>\n<p>java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ZzImageBox imageBox = (ZzImageBox) findViewById(R.id.zz_image_box);</div><div class=\"line\">imageBox.setOnImageClickListener(<span class=\"keyword\">new</span> ZzImageBox.OnImageClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onImageClick</span><span class=\"params\">(<span class=\"keyword\">int</span> position, String filePath)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"image clicked:\"</span> + position + <span class=\"string\">\",\"</span> + filePath);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDeleteClick</span><span class=\"params\">(<span class=\"keyword\">int</span> position, String filePath)</span> </span>&#123;</div><div class=\"line\">        imageBox.removeImage(position);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"delete clicked:\"</span> + position + <span class=\"string\">\",\"</span> + filePath);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"all images\\n\"</span>+imageBox.getAllImages().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAddClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        imageBox.addImage(<span class=\"keyword\">null</span>);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"add clicked\"</span>);</div><div class=\"line\">        Log.d(<span class=\"string\">\"ZzImageBox\"</span>, <span class=\"string\">\"all images\\n\"</span>+imageBox.getAllImages().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"属性说明：\"><a href=\"#属性说明：\" class=\"headerlink\" title=\"属性说明：\"></a>属性说明：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;declare-styleable name=&quot;ZzImageBox&quot;&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_max_line&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_size_one_line&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_padding&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_default&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_delete&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_add&quot; format=&quot;color|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_img_deletable&quot; format=&quot;boolean&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_left_margin&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">    &lt;attr name=&quot;zib_right_margin&quot; format=&quot;dimension|reference&quot; /&gt;</div><div class=\"line\">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性名</th>\n<th style=\"text-align:left\">属性类型</th>\n<th style=\"text-align:left\">属性功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">zib_max_line</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">最大行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_size_one_line</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">每行数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_padding</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">图片之间的间距</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_default</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>默认图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_delete</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>删除图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_add</td>\n<td style=\"text-align:left\">drawable</td>\n<td style=\"text-align:left\">color</td>\n<td>添加图片资源id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_img_deletable</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否显示删除图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_left_margin</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">控件距离屏幕左边距离</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zib_right_margin</td>\n<td style=\"text-align:left\">dimension</td>\n<td style=\"text-align:left\">控件距离屏幕右边距离</td>\n</tr>\n</tbody>\n</table>"},{"title":"Android自定义控件-ZzWeatherView","date":"2017-06-14T01:33:02.000Z","_content":"\n\n# ZzWeatherView\n\n\n一个现实天气的控件\n\n\n## Gradle\n\n```\ncompile 'me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2'\n```\n\n<!-- more -->\n\n效果图如下：\n\n<img src=\"../../../../images/curve.png\"  width=\"400px\"/>\n<img src=\"../../../../images/disc.jpg\"  width=\"400px\"/>\n\n## 用法简介\n\n1）布局\n\n### drawable/scroll_bar_thumb.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient android:startColor=\"#33999999\" android:endColor=\"#80aaaaaa\"\n        android:angle=\"0\"/>\n    <corners android:radius=\"6dp\" />\n</shape>\n```\n\n\n\n```xml\n    <me.zhouzhuo.zzweatherview.ZzWeatherView\n        android:id=\"@+id/weather_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:scrollbarThumbHorizontal=\"@drawable/scroll_bar_thumb\"\n        android:scrollbarTrackHorizontal=\"@drawable/scroll_bar_thumb\"\n        android:scrollbarSize=\"4dp\"\n        android:background=\"#333\"\n        >\n    </me.zhouzhuo.zzweatherview.ZzWeatherView>\n```\n\n\n2）java\n\n\n```java\n        ZzWeatherView weatherView = (ZzWeatherView) findViewById(R.id.weather_view);\n  \n        //填充天气数据\n        weatherView.setList(generateData());\n  \n        //画折线\n        weatherView.setLineType(ZzWeatherView.LINE_TYPE_DISCOUNT);\n        //画曲线(不够圆滑希望有更好的建议联系我(Email:admin@zhouzhuo810.me))\n        //weatherView.setLineType(ZzWeatherView.LINE_TYPE_CURVE);\n  \n        //设置线宽\n        weatherView.setLineWidth(6f);\n  \n  \n        //设置一屏幕显示几列(最少3列)\n        try {\n            weatherView.setColumnNumber(5);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n  \n        //设置白天和晚上线条的颜色\n        weatherView.setDayAndNightLineColor(Color.BLUE, Color.RED);\n  \n  \n        //点击某一列\n        weatherView.setOnWeatherItemClickListener(new ZzWeatherView.OnWeatherItemClickListener() {\n            @Override\n            public void onItemClick(WeatherItemView itemView, int position, WeatherModel weatherModel) {\n                Toast.makeText(MainActivity.this, position+\"\", Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n```java\n    //数据源\n  WeatherModel model = new WeatherModel();\n        model.setDate(\"12/07\");//日期\n        model.setWeek(\"昨天\");  //星期\n        model.setDayWeather(\"大雪\"); //白天天气\n        model.setDayTemp(11); //白天温度\n        model.setNightTemp(5); //夜晚温度\n        model.setNightWeather(\"晴\"); //夜晚天气\n        model.setWindOrientation(\"西南风\"); //风向\n        model.setWindLevel(\"3级\"); //\n        model.setAirLevel(AirLevel.EXCELLENT); //空气质量\n```\n\n\n### 更新日志\n\nv 1.0.2\n- 添加设置曲线颜色方法；\n- 添加设置列的数量方法；\n\nv 1.0.1\n- 修复曲线不圆滑问题；","source":"_posts/Android自定义控件-ZzWeatherView.md","raw":"---\ntitle: Android自定义控件-ZzWeatherView\ndate: 2017-06-14 09:33:02\ntags:\n\t- Android\ncategories: Android自定义控件\n---\n\n\n# ZzWeatherView\n\n\n一个现实天气的控件\n\n\n## Gradle\n\n```\ncompile 'me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2'\n```\n\n<!-- more -->\n\n效果图如下：\n\n<img src=\"../../../../images/curve.png\"  width=\"400px\"/>\n<img src=\"../../../../images/disc.jpg\"  width=\"400px\"/>\n\n## 用法简介\n\n1）布局\n\n### drawable/scroll_bar_thumb.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient android:startColor=\"#33999999\" android:endColor=\"#80aaaaaa\"\n        android:angle=\"0\"/>\n    <corners android:radius=\"6dp\" />\n</shape>\n```\n\n\n\n```xml\n    <me.zhouzhuo.zzweatherview.ZzWeatherView\n        android:id=\"@+id/weather_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:scrollbarThumbHorizontal=\"@drawable/scroll_bar_thumb\"\n        android:scrollbarTrackHorizontal=\"@drawable/scroll_bar_thumb\"\n        android:scrollbarSize=\"4dp\"\n        android:background=\"#333\"\n        >\n    </me.zhouzhuo.zzweatherview.ZzWeatherView>\n```\n\n\n2）java\n\n\n```java\n        ZzWeatherView weatherView = (ZzWeatherView) findViewById(R.id.weather_view);\n  \n        //填充天气数据\n        weatherView.setList(generateData());\n  \n        //画折线\n        weatherView.setLineType(ZzWeatherView.LINE_TYPE_DISCOUNT);\n        //画曲线(不够圆滑希望有更好的建议联系我(Email:admin@zhouzhuo810.me))\n        //weatherView.setLineType(ZzWeatherView.LINE_TYPE_CURVE);\n  \n        //设置线宽\n        weatherView.setLineWidth(6f);\n  \n  \n        //设置一屏幕显示几列(最少3列)\n        try {\n            weatherView.setColumnNumber(5);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n  \n        //设置白天和晚上线条的颜色\n        weatherView.setDayAndNightLineColor(Color.BLUE, Color.RED);\n  \n  \n        //点击某一列\n        weatherView.setOnWeatherItemClickListener(new ZzWeatherView.OnWeatherItemClickListener() {\n            @Override\n            public void onItemClick(WeatherItemView itemView, int position, WeatherModel weatherModel) {\n                Toast.makeText(MainActivity.this, position+\"\", Toast.LENGTH_SHORT).show();\n            }\n        });\n```\n\n```java\n    //数据源\n  WeatherModel model = new WeatherModel();\n        model.setDate(\"12/07\");//日期\n        model.setWeek(\"昨天\");  //星期\n        model.setDayWeather(\"大雪\"); //白天天气\n        model.setDayTemp(11); //白天温度\n        model.setNightTemp(5); //夜晚温度\n        model.setNightWeather(\"晴\"); //夜晚天气\n        model.setWindOrientation(\"西南风\"); //风向\n        model.setWindLevel(\"3级\"); //\n        model.setAirLevel(AirLevel.EXCELLENT); //空气质量\n```\n\n\n### 更新日志\n\nv 1.0.2\n- 添加设置曲线颜色方法；\n- 添加设置列的数量方法；\n\nv 1.0.1\n- 修复曲线不圆滑问题；","slug":"Android自定义控件-ZzWeatherView","published":1,"updated":"2017-08-10T12:01:34.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfst001lwou5n01xmus4","content":"<h1 id=\"ZzWeatherView\"><a href=\"#ZzWeatherView\" class=\"headerlink\" title=\"ZzWeatherView\"></a>ZzWeatherView</h1><p>一个现实天气的控件</p>\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2&apos;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>效果图如下：</p>\n<p><img src=\"../../../../images/curve.png\" width=\"400px\"><br><img src=\"../../../../images/disc.jpg\" width=\"400px\"></p>\n<h2 id=\"用法简介\"><a href=\"#用法简介\" class=\"headerlink\" title=\"用法简介\"></a>用法简介</h2><p>1）布局</p>\n<h3 id=\"drawable-scroll-bar-thumb-xml\"><a href=\"#drawable-scroll-bar-thumb-xml\" class=\"headerlink\" title=\"drawable/scroll_bar_thumb.xml\"></a>drawable/scroll_bar_thumb.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span> <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#33999999\"</span> <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#80aaaaaa\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"0\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"6dp\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">me.zhouzhuo.zzweatherview.ZzWeatherView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/weather_view\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarThumbHorizontal</span>=<span class=\"string\">\"@drawable/scroll_bar_thumb\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarTrackHorizontal</span>=<span class=\"string\">\"@drawable/scroll_bar_thumb\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarSize</span>=<span class=\"string\">\"4dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#333\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">me.zhouzhuo.zzweatherview.ZzWeatherView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>2）java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzWeatherView weatherView = (ZzWeatherView) findViewById(R.id.weather_view);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//填充天气数据</span></div><div class=\"line\">weatherView.setList(generateData());</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//画折线</span></div><div class=\"line\">weatherView.setLineType(ZzWeatherView.LINE_TYPE_DISCOUNT);</div><div class=\"line\"><span class=\"comment\">//画曲线(不够圆滑希望有更好的建议联系我(Email:admin@zhouzhuo810.me))</span></div><div class=\"line\"><span class=\"comment\">//weatherView.setLineType(ZzWeatherView.LINE_TYPE_CURVE);</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置线宽</span></div><div class=\"line\">weatherView.setLineWidth(<span class=\"number\">6f</span>);</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置一屏幕显示几列(最少3列)</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    weatherView.setColumnNumber(<span class=\"number\">5</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置白天和晚上线条的颜色</span></div><div class=\"line\">weatherView.setDayAndNightLineColor(Color.BLUE, Color.RED);</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//点击某一列</span></div><div class=\"line\">weatherView.setOnWeatherItemClickListener(<span class=\"keyword\">new</span> ZzWeatherView.OnWeatherItemClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(WeatherItemView itemView, <span class=\"keyword\">int</span> position, WeatherModel weatherModel)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, position+<span class=\"string\">\"\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//数据源</span></div><div class=\"line\">  WeatherModel model = <span class=\"keyword\">new</span> WeatherModel();</div><div class=\"line\">        model.setDate(<span class=\"string\">\"12/07\"</span>);<span class=\"comment\">//日期</span></div><div class=\"line\">        model.setWeek(<span class=\"string\">\"昨天\"</span>);  <span class=\"comment\">//星期</span></div><div class=\"line\">        model.setDayWeather(<span class=\"string\">\"大雪\"</span>); <span class=\"comment\">//白天天气</span></div><div class=\"line\">        model.setDayTemp(<span class=\"number\">11</span>); <span class=\"comment\">//白天温度</span></div><div class=\"line\">        model.setNightTemp(<span class=\"number\">5</span>); <span class=\"comment\">//夜晚温度</span></div><div class=\"line\">        model.setNightWeather(<span class=\"string\">\"晴\"</span>); <span class=\"comment\">//夜晚天气</span></div><div class=\"line\">        model.setWindOrientation(<span class=\"string\">\"西南风\"</span>); <span class=\"comment\">//风向</span></div><div class=\"line\">        model.setWindLevel(<span class=\"string\">\"3级\"</span>); <span class=\"comment\">//</span></div><div class=\"line\">        model.setAirLevel(AirLevel.EXCELLENT); <span class=\"comment\">//空气质量</span></div></pre></td></tr></table></figure>\n<h3 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h3><p>v 1.0.2</p>\n<ul>\n<li>添加设置曲线颜色方法；</li>\n<li>添加设置列的数量方法；</li>\n</ul>\n<p>v 1.0.1</p>\n<ul>\n<li>修复曲线不圆滑问题；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"ZzWeatherView\"><a href=\"#ZzWeatherView\" class=\"headerlink\" title=\"ZzWeatherView\"></a>ZzWeatherView</h1><p>一个现实天气的控件</p>\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;me.zhouzhuo.zzweatherview:zz-weather-view:1.0.2&apos;</div></pre></td></tr></table></figure>","more":"<p>效果图如下：</p>\n<p><img src=\"../../../../images/curve.png\" width=\"400px\"><br><img src=\"../../../../images/disc.jpg\" width=\"400px\"></p>\n<h2 id=\"用法简介\"><a href=\"#用法简介\" class=\"headerlink\" title=\"用法简介\"></a>用法简介</h2><p>1）布局</p>\n<h3 id=\"drawable-scroll-bar-thumb-xml\"><a href=\"#drawable-scroll-bar-thumb-xml\" class=\"headerlink\" title=\"drawable/scroll_bar_thumb.xml\"></a>drawable/scroll_bar_thumb.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span> <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#33999999\"</span> <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#80aaaaaa\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"0\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"6dp\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">me.zhouzhuo.zzweatherview.ZzWeatherView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/weather_view\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarThumbHorizontal</span>=<span class=\"string\">\"@drawable/scroll_bar_thumb\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarTrackHorizontal</span>=<span class=\"string\">\"@drawable/scroll_bar_thumb\"</span></div><div class=\"line\">    <span class=\"attr\">android:scrollbarSize</span>=<span class=\"string\">\"4dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#333\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">me.zhouzhuo.zzweatherview.ZzWeatherView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>2）java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZzWeatherView weatherView = (ZzWeatherView) findViewById(R.id.weather_view);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//填充天气数据</span></div><div class=\"line\">weatherView.setList(generateData());</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//画折线</span></div><div class=\"line\">weatherView.setLineType(ZzWeatherView.LINE_TYPE_DISCOUNT);</div><div class=\"line\"><span class=\"comment\">//画曲线(不够圆滑希望有更好的建议联系我(Email:admin@zhouzhuo810.me))</span></div><div class=\"line\"><span class=\"comment\">//weatherView.setLineType(ZzWeatherView.LINE_TYPE_CURVE);</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置线宽</span></div><div class=\"line\">weatherView.setLineWidth(<span class=\"number\">6f</span>);</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置一屏幕显示几列(最少3列)</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    weatherView.setColumnNumber(<span class=\"number\">5</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//设置白天和晚上线条的颜色</span></div><div class=\"line\">weatherView.setDayAndNightLineColor(Color.BLUE, Color.RED);</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//点击某一列</span></div><div class=\"line\">weatherView.setOnWeatherItemClickListener(<span class=\"keyword\">new</span> ZzWeatherView.OnWeatherItemClickListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(WeatherItemView itemView, <span class=\"keyword\">int</span> position, WeatherModel weatherModel)</span> </span>&#123;</div><div class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, position+<span class=\"string\">\"\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//数据源</span></div><div class=\"line\">  WeatherModel model = <span class=\"keyword\">new</span> WeatherModel();</div><div class=\"line\">        model.setDate(<span class=\"string\">\"12/07\"</span>);<span class=\"comment\">//日期</span></div><div class=\"line\">        model.setWeek(<span class=\"string\">\"昨天\"</span>);  <span class=\"comment\">//星期</span></div><div class=\"line\">        model.setDayWeather(<span class=\"string\">\"大雪\"</span>); <span class=\"comment\">//白天天气</span></div><div class=\"line\">        model.setDayTemp(<span class=\"number\">11</span>); <span class=\"comment\">//白天温度</span></div><div class=\"line\">        model.setNightTemp(<span class=\"number\">5</span>); <span class=\"comment\">//夜晚温度</span></div><div class=\"line\">        model.setNightWeather(<span class=\"string\">\"晴\"</span>); <span class=\"comment\">//夜晚天气</span></div><div class=\"line\">        model.setWindOrientation(<span class=\"string\">\"西南风\"</span>); <span class=\"comment\">//风向</span></div><div class=\"line\">        model.setWindLevel(<span class=\"string\">\"3级\"</span>); <span class=\"comment\">//</span></div><div class=\"line\">        model.setAirLevel(AirLevel.EXCELLENT); <span class=\"comment\">//空气质量</span></div></pre></td></tr></table></figure>\n<h3 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h3><p>v 1.0.2</p>\n<ul>\n<li>添加设置曲线颜色方法；</li>\n<li>添加设置列的数量方法；</li>\n</ul>\n<p>v 1.0.1</p>\n<ul>\n<li>修复曲线不圆滑问题；</li>\n</ul>"},{"title":"IOS-pod的安装和使用","date":"2017-06-08T07:49:56.000Z","_content":"\n使用pod可以很方便的集成第三方框架。\n\n## 安装\n\n\n```\nsudo gem install cocoapods\n```\n\n输入密码\n\n等待即可。\n\n完成标识如下：\n\n```\nxx gems installed\n```\n\n<!-- more -->\n\n## 验证安装是否成功\n\n\n```\npod --help\n```\n\n## 切换目录\n\n切换到目标工程文件夹\n\n```\ncd xxx\n```\n\n```\npod init\n```\n\n```\nls -al\n```\n\n会发现多了一个Podfile文件\n\n## 编辑Podfile文件\n\n```\nvi Podfile\n```\n\n点击i进入编辑模式\n\n移动光标，在需要的位置添加内容\n下面以SDWebImage为例：\n\n```\nplatform :ios, '8.0'\npod 'SDWebImage', '~>3.8'\nuse_frameworks!\n```\n\n点击esc\n\n点击shift+；\n\n输入wq，回车\n\n## 安装包\n\n先关闭xcode\n\n```\npod install\n```\n\n## 注意\n\n会发现多了一个workspace的工程\n\n如果以后要用集成了POD的工程的话就要用workspace的工程。\n\n打开工程使用这个。","source":"_posts/IOS-pod的安装和使用.md","raw":"---\ntitle: IOS-pod的安装和使用\ndate: 2017-06-08 15:49:56\ntags: \n\t- IOS \ncategories: IOS \n---\n\n使用pod可以很方便的集成第三方框架。\n\n## 安装\n\n\n```\nsudo gem install cocoapods\n```\n\n输入密码\n\n等待即可。\n\n完成标识如下：\n\n```\nxx gems installed\n```\n\n<!-- more -->\n\n## 验证安装是否成功\n\n\n```\npod --help\n```\n\n## 切换目录\n\n切换到目标工程文件夹\n\n```\ncd xxx\n```\n\n```\npod init\n```\n\n```\nls -al\n```\n\n会发现多了一个Podfile文件\n\n## 编辑Podfile文件\n\n```\nvi Podfile\n```\n\n点击i进入编辑模式\n\n移动光标，在需要的位置添加内容\n下面以SDWebImage为例：\n\n```\nplatform :ios, '8.0'\npod 'SDWebImage', '~>3.8'\nuse_frameworks!\n```\n\n点击esc\n\n点击shift+；\n\n输入wq，回车\n\n## 安装包\n\n先关闭xcode\n\n```\npod install\n```\n\n## 注意\n\n会发现多了一个workspace的工程\n\n如果以后要用集成了POD的工程的话就要用workspace的工程。\n\n打开工程使用这个。","slug":"IOS-pod的安装和使用","published":1,"updated":"2017-08-10T12:01:34.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsu001owou57kfv9z2w","content":"<p>使用pod可以很方便的集成第三方框架。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<p>输入密码</p>\n<p>等待即可。</p>\n<p>完成标识如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xx gems installed</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod --help</div></pre></td></tr></table></figure>\n<h2 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h2><p>切换到目标工程文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod init</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al</div></pre></td></tr></table></figure>\n<p>会发现多了一个Podfile文件</p>\n<h2 id=\"编辑Podfile文件\"><a href=\"#编辑Podfile文件\" class=\"headerlink\" title=\"编辑Podfile文件\"></a>编辑Podfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi Podfile</div></pre></td></tr></table></figure>\n<p>点击i进入编辑模式</p>\n<p>移动光标，在需要的位置添加内容<br>下面以SDWebImage为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">platform :ios, &apos;8.0&apos;</div><div class=\"line\">pod &apos;SDWebImage&apos;, &apos;~&gt;3.8&apos;</div><div class=\"line\">use_frameworks!</div></pre></td></tr></table></figure>\n<p>点击esc</p>\n<p>点击shift+；</p>\n<p>输入wq，回车</p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><p>先关闭xcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod install</div></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>会发现多了一个workspace的工程</p>\n<p>如果以后要用集成了POD的工程的话就要用workspace的工程。</p>\n<p>打开工程使用这个。</p>\n","site":{"data":{}},"excerpt":"<p>使用pod可以很方便的集成第三方框架。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<p>输入密码</p>\n<p>等待即可。</p>\n<p>完成标识如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xx gems installed</div></pre></td></tr></table></figure>","more":"<h2 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod --help</div></pre></td></tr></table></figure>\n<h2 id=\"切换目录\"><a href=\"#切换目录\" class=\"headerlink\" title=\"切换目录\"></a>切换目录</h2><p>切换到目标工程文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd xxx</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod init</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al</div></pre></td></tr></table></figure>\n<p>会发现多了一个Podfile文件</p>\n<h2 id=\"编辑Podfile文件\"><a href=\"#编辑Podfile文件\" class=\"headerlink\" title=\"编辑Podfile文件\"></a>编辑Podfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi Podfile</div></pre></td></tr></table></figure>\n<p>点击i进入编辑模式</p>\n<p>移动光标，在需要的位置添加内容<br>下面以SDWebImage为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">platform :ios, &apos;8.0&apos;</div><div class=\"line\">pod &apos;SDWebImage&apos;, &apos;~&gt;3.8&apos;</div><div class=\"line\">use_frameworks!</div></pre></td></tr></table></figure>\n<p>点击esc</p>\n<p>点击shift+；</p>\n<p>输入wq，回车</p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><p>先关闭xcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod install</div></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>会发现多了一个workspace的工程</p>\n<p>如果以后要用集成了POD的工程的话就要用workspace的工程。</p>\n<p>打开工程使用这个。</p>"},{"title":"JavaEE-SpringMVC之pom.xml","date":"2017-07-20T00:20:48.000Z","_content":"\n\n## 开发工具\n\n- InteliJ IDEA\n\n## 新建一个maven工程\n\n## 复制如下依赖\n\n<!-- more -->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n  \n\t<!-- 这个不要照抄 -->\n    <groupId>me.zhouzhuo810</groupId>\n    <artifactId>zzapidoc-maven</artifactId>\n    <version>1.0-SNAPSHOT</version>\n   \n   \n    <!-- Nexus 私服配置 -->\n    <!--<repositories>\n        <repository>\n            <id>nexus</id>\n            <name>Nexus</name>\n            <url>http://localhost:8081/nexus/content/groups/public/</url>\n            <releases><enabled>true</enabled></releases>\n            <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>nexus</id>\n            <name>Nexus</name>\n            <url>http://localhost:8081/nexus/content/groups/public/</url>\n            <releases><enabled>true</enabled></releases>\n            <snapshots><enabled>true</enabled></snapshots>\n        </pluginRepository>\n    </pluginRepositories>-->\n  \n    <developers>\n        <developer>\n            <id>web</id>\n            <name>alexgaoyh</name>\n            <email>alexgaoyh@sina.com</email>\n        </developer>\n    </developers>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-tx</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-redis</artifactId>\n            <version>1.4.0.RELEASE</version>\n        </dependency>\n        <!-- Quartz framework -->\n        <dependency>\n            <groupId>org.quartz-scheduler</groupId>\n            <artifactId>quartz</artifactId>\n            <version>2.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.14</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.21</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20140107</version>\n        </dependency>\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.6.0</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-logging</groupId>\n            <artifactId>commons-logging</artifactId>\n            <version>1.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.6</version>\n        </dependency>\n\n        <!-- hibernate  start -->\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-core</artifactId>\n            <version>4.1.6.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.javassist</groupId>\n            <artifactId>javassist</artifactId>\n            <version>3.18.0-GA</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-c3p0</artifactId>\n            <version>4.3.4.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-commons-annotations</artifactId>\n            <version>3.2.0.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-tools</artifactId>\n            <version>4.0.0-CR1</version>\n        </dependency>\n        <!-- hibernate  end -->\n  \n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-ehcache</artifactId>\n            <version>4.1.6.Final</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.6.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-log4j12</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n  \n        <!-- emial support -->\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.7</version>\n        </dependency>\n  \n        <!-- Shiro security -->\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-core</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-web</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-cas</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-ehcache</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <!-- end of Shiro security -->\n  \n        <!-- jstl jsp页面标签 -->\n        <dependency>\n            <groupId>jstl</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n  \n        <!-- json jackson -->\n        <dependency>\n            <groupId>org.codehaus.jackson</groupId>\n            <artifactId>jackson-core-asl</artifactId>\n            <version>1.9.13</version>\n        </dependency>\n        <dependency>\n            <groupId>org.codehaus.jackson</groupId>\n            <artifactId>jackson-mapper-asl</artifactId>\n            <version>1.9.13</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.9</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.4</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>3.0.1</version>\n            <scope>provided</scope> <!--打包时不包含-->\n        </dependency>\n  \n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.2</version>\n            <scope>provided</scope>   <!--这里说明jsp-api.jar文件将由应用服务器提供，打包时不需要包含-->\n        </dependency>\n  \n        <!-- 测试使用，打包时不会打进去 -->\n        <!-- Sprint-test 相关测试包 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>3.2.11.RELEASE</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework</groupId>\n                    <artifactId>spring-core</artifactId>\n                </exclusion>\n            </exclusions>\n            <scope>test</scope>\n        </dependency>\n  \n    </dependencies>\n    <build>\n        <finalName>web</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.6</source>\n                    <target>1.6</target>\n                </configuration>\n            </plugin>\n        </plugins>\n        <!-- 这里的 tomcat7-maven-plugin 为使用插件部署Maven Web项目：-->\n        <!-- 此处需要配置本地环境，tomcat: tomcat_user。xml，添加manager角色和用户，用于插件自动部署应用 -->\n        <!-- 打开Maven： setting.xml，在<servers>节点下配置上面的相关Tomcat的Manager用户信息， -->\n        <!-- 开启下面的插件配置代码段 -->\n        <!-- tomcat7:deploy  tomcat7:redeploy  tomcat7:undeploy -->\n        <!-- <plugins>\n            <plugin>\n                <groupId>org.apache.tomcat.maven</groupId>\n                <artifactId>tomcat7-maven-plugin</artifactId>\n                <version>2.2</version>\n                <configuration>\n                <url>http://localhost:8080/manager/text</url> tomcat管理路径\n                <server>Tomcat7</server> 与settings.xml文件中Server的id相同\n                <path>/web</path> 应用的部署位置\n                </configuration>\n            </plugin>\n        </plugins> -->\n    </build>\n  \n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n  \n</project>\n```\n\n\n","source":"_posts/JavaEE-SpringMVC之pom-xml.md","raw":"---\ntitle: JavaEE-SpringMVC之pom.xml\ndate: 2017-07-20 08:20:48\ntags:\n\t- JavaEE\ncategories: SpringMVC\n---\n\n\n## 开发工具\n\n- InteliJ IDEA\n\n## 新建一个maven工程\n\n## 复制如下依赖\n\n<!-- more -->\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n  \n\t<!-- 这个不要照抄 -->\n    <groupId>me.zhouzhuo810</groupId>\n    <artifactId>zzapidoc-maven</artifactId>\n    <version>1.0-SNAPSHOT</version>\n   \n   \n    <!-- Nexus 私服配置 -->\n    <!--<repositories>\n        <repository>\n            <id>nexus</id>\n            <name>Nexus</name>\n            <url>http://localhost:8081/nexus/content/groups/public/</url>\n            <releases><enabled>true</enabled></releases>\n            <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>nexus</id>\n            <name>Nexus</name>\n            <url>http://localhost:8081/nexus/content/groups/public/</url>\n            <releases><enabled>true</enabled></releases>\n            <snapshots><enabled>true</enabled></snapshots>\n        </pluginRepository>\n    </pluginRepositories>-->\n  \n    <developers>\n        <developer>\n            <id>web</id>\n            <name>alexgaoyh</name>\n            <email>alexgaoyh@sina.com</email>\n        </developer>\n    </developers>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.7</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-tx</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>4.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-redis</artifactId>\n            <version>1.4.0.RELEASE</version>\n        </dependency>\n        <!-- Quartz framework -->\n        <dependency>\n            <groupId>org.quartz-scheduler</groupId>\n            <artifactId>quartz</artifactId>\n            <version>2.2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.14</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.21</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20140107</version>\n        </dependency>\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.6.0</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-logging</groupId>\n            <artifactId>commons-logging</artifactId>\n            <version>1.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.6</version>\n        </dependency>\n\n        <!-- hibernate  start -->\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-core</artifactId>\n            <version>4.1.6.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.javassist</groupId>\n            <artifactId>javassist</artifactId>\n            <version>3.18.0-GA</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-c3p0</artifactId>\n            <version>4.3.4.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-commons-annotations</artifactId>\n            <version>3.2.0.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-tools</artifactId>\n            <version>4.0.0-CR1</version>\n        </dependency>\n        <!-- hibernate  end -->\n  \n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-ehcache</artifactId>\n            <version>4.1.6.Final</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.6.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-log4j12</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n  \n        <!-- emial support -->\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.7</version>\n        </dependency>\n  \n        <!-- Shiro security -->\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-core</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-web</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-cas</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-ehcache</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <!-- end of Shiro security -->\n  \n        <!-- jstl jsp页面标签 -->\n        <dependency>\n            <groupId>jstl</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n  \n        <!-- json jackson -->\n        <dependency>\n            <groupId>org.codehaus.jackson</groupId>\n            <artifactId>jackson-core-asl</artifactId>\n            <version>1.9.13</version>\n        </dependency>\n        <dependency>\n            <groupId>org.codehaus.jackson</groupId>\n            <artifactId>jackson-mapper-asl</artifactId>\n            <version>1.9.13</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.9</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.4</version>\n        </dependency>\n  \n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>3.0.1</version>\n            <scope>provided</scope> <!--打包时不包含-->\n        </dependency>\n  \n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.2</version>\n            <scope>provided</scope>   <!--这里说明jsp-api.jar文件将由应用服务器提供，打包时不需要包含-->\n        </dependency>\n  \n        <!-- 测试使用，打包时不会打进去 -->\n        <!-- Sprint-test 相关测试包 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>3.2.11.RELEASE</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework</groupId>\n                    <artifactId>spring-core</artifactId>\n                </exclusion>\n            </exclusions>\n            <scope>test</scope>\n        </dependency>\n  \n    </dependencies>\n    <build>\n        <finalName>web</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.6</source>\n                    <target>1.6</target>\n                </configuration>\n            </plugin>\n        </plugins>\n        <!-- 这里的 tomcat7-maven-plugin 为使用插件部署Maven Web项目：-->\n        <!-- 此处需要配置本地环境，tomcat: tomcat_user。xml，添加manager角色和用户，用于插件自动部署应用 -->\n        <!-- 打开Maven： setting.xml，在<servers>节点下配置上面的相关Tomcat的Manager用户信息， -->\n        <!-- 开启下面的插件配置代码段 -->\n        <!-- tomcat7:deploy  tomcat7:redeploy  tomcat7:undeploy -->\n        <!-- <plugins>\n            <plugin>\n                <groupId>org.apache.tomcat.maven</groupId>\n                <artifactId>tomcat7-maven-plugin</artifactId>\n                <version>2.2</version>\n                <configuration>\n                <url>http://localhost:8080/manager/text</url> tomcat管理路径\n                <server>Tomcat7</server> 与settings.xml文件中Server的id相同\n                <path>/web</path> 应用的部署位置\n                </configuration>\n            </plugin>\n        </plugins> -->\n    </build>\n  \n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n  \n</project>\n```\n\n\n","slug":"JavaEE-SpringMVC之pom-xml","published":1,"updated":"2017-08-10T12:01:34.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsw001rwou5glvss6tb","content":"<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>InteliJ IDEA</li>\n</ul>\n<h2 id=\"新建一个maven工程\"><a href=\"#新建一个maven工程\" class=\"headerlink\" title=\"新建一个maven工程\"></a>新建一个maven工程</h2><h2 id=\"复制如下依赖\"><a href=\"#复制如下依赖\" class=\"headerlink\" title=\"复制如下依赖\"></a>复制如下依赖</h2><a id=\"more\"></a>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 这个不要照抄 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.zhouzhuo810<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zzapidoc-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Nexus 私服配置 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;repositories&gt;</span></div><div class=\"line\">        &lt;repository&gt;</div><div class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;Nexus&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</div><div class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class=\"line\">        &lt;/repository&gt;</div><div class=\"line\">    &lt;/repositories&gt;</div><div class=\"line\">    &lt;pluginRepositories&gt;</div><div class=\"line\">        &lt;pluginRepository&gt;</div><div class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;Nexus&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</div><div class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class=\"line\">        &lt;/pluginRepository&gt;</div><div class=\"line\">    &lt;/pluginRepositories&gt;--&gt;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developer</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>alexgaoyh<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">email</span>&gt;</span>alexgaoyh@sina.com<span class=\"tag\">&lt;/<span class=\"name\">email</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">developer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.data<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Quartz framework --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.json<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>20140107<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- hibernate  start --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javassist<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javassist<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.18.0-GA<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-commons-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-tools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.0-CR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- hibernate  end --&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-ehcache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- emial support --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- Shiro security --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-cas<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-ehcache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- end of Shiro security --&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- jstl jsp页面标签 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- json jackson --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-codec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-codec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span> <span class=\"comment\">&lt;!--打包时不包含--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span>   <span class=\"comment\">&lt;!--这里说明jsp-api.jar文件将由应用服务器提供，打包时不需要包含--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 测试使用，打包时不会打进去 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Sprint-test 相关测试包 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.11.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里的 tomcat7-maven-plugin 为使用插件部署Maven Web项目：--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 此处需要配置本地环境，tomcat: tomcat_user。xml，添加manager角色和用户，用于插件自动部署应用 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 打开Maven： setting.xml，在&lt;servers&gt;节点下配置上面的相关Tomcat的Manager用户信息， --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 开启下面的插件配置代码段 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- tomcat7:deploy  tomcat7:redeploy  tomcat7:undeploy --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;plugins&gt;</span></div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; tomcat管理路径</div><div class=\"line\">                &lt;server&gt;Tomcat7&lt;/server&gt; 与settings.xml文件中Server的id相同</div><div class=\"line\">                &lt;path&gt;/web&lt;/path&gt; 应用的部署位置</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt; --&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><ul>\n<li>InteliJ IDEA</li>\n</ul>\n<h2 id=\"新建一个maven工程\"><a href=\"#新建一个maven工程\" class=\"headerlink\" title=\"新建一个maven工程\"></a>新建一个maven工程</h2><h2 id=\"复制如下依赖\"><a href=\"#复制如下依赖\" class=\"headerlink\" title=\"复制如下依赖\"></a>复制如下依赖</h2>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 这个不要照抄 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.zhouzhuo810<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zzapidoc-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Nexus 私服配置 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;repositories&gt;</span></div><div class=\"line\">        &lt;repository&gt;</div><div class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;Nexus&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</div><div class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class=\"line\">        &lt;/repository&gt;</div><div class=\"line\">    &lt;/repositories&gt;</div><div class=\"line\">    &lt;pluginRepositories&gt;</div><div class=\"line\">        &lt;pluginRepository&gt;</div><div class=\"line\">            &lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">            &lt;name&gt;Nexus&lt;/name&gt;</div><div class=\"line\">            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</div><div class=\"line\">            &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class=\"line\">            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class=\"line\">        &lt;/pluginRepository&gt;</div><div class=\"line\">    &lt;/pluginRepositories&gt;--&gt;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developer</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>alexgaoyh<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">email</span>&gt;</span>alexgaoyh@sina.com<span class=\"tag\">&lt;/<span class=\"name\">email</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">developer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.data<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Quartz framework --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.json<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>20140107<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- hibernate  start --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javassist<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javassist<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.18.0-GA<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-commons-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-tools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.0-CR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- hibernate  end --&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-ehcache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- emial support --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- Shiro security --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-cas<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-ehcache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- end of Shiro security --&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- jstl jsp页面标签 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- json jackson --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-codec<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-codec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span> <span class=\"comment\">&lt;!--打包时不包含--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span>   <span class=\"comment\">&lt;!--这里说明jsp-api.jar文件将由应用服务器提供，打包时不需要包含--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 测试使用，打包时不会打进去 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Sprint-test 相关测试包 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.11.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里的 tomcat7-maven-plugin 为使用插件部署Maven Web项目：--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 此处需要配置本地环境，tomcat: tomcat_user。xml，添加manager角色和用户，用于插件自动部署应用 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 打开Maven： setting.xml，在&lt;servers&gt;节点下配置上面的相关Tomcat的Manager用户信息， --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 开启下面的插件配置代码段 --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- tomcat7:deploy  tomcat7:redeploy  tomcat7:undeploy --&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;plugins&gt;</span></div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;2.2&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; tomcat管理路径</div><div class=\"line\">                &lt;server&gt;Tomcat7&lt;/server&gt; 与settings.xml文件中Server的id相同</div><div class=\"line\">                &lt;path&gt;/web&lt;/path&gt; 应用的部署位置</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt; --&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"SQL-快速将Excel的数据导入数据库","date":"2017-07-28T00:55:58.000Z","_content":"\n\n### 关键代码\n\n\n```\n=CONCATENATE(\"INSERT INTO TableName (Colomn1, Column2) values ('\"&A1&\"','\"&B1&\"');\")\n````\n\n### 效果图\n\n![图1](../../../../images/excel.gif)","source":"_posts/SQL-快速将Excel的数据导入数据库.md","raw":"---\ntitle: SQL-快速将Excel的数据导入数据库\ndate: 2017-07-28 08:55:58\ntags:\n\t- SQL \ncategories: SQL \n---\n\n\n### 关键代码\n\n\n```\n=CONCATENATE(\"INSERT INTO TableName (Colomn1, Column2) values ('\"&A1&\"','\"&B1&\"');\")\n````\n\n### 效果图\n\n![图1](../../../../images/excel.gif)","slug":"SQL-快速将Excel的数据导入数据库","published":1,"updated":"2017-08-10T12:01:34.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsy001vwou5o4eyf0tu","content":"<h3 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">=CONCATENATE(&quot;INSERT INTO TableName (Colomn1, Column2) values (&apos;&quot;&amp;A1&amp;&quot;&apos;,&apos;&quot;&amp;B1&amp;&quot;&apos;);&quot;)</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"../../../../images/excel.gif\" alt=\"图1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">=CONCATENATE(&quot;INSERT INTO TableName (Colomn1, Column2) values (&apos;&quot;&amp;A1&amp;&quot;&apos;,&apos;&quot;&amp;B1&amp;&quot;&apos;);&quot;)</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img src=\"../../../../images/excel.gif\" alt=\"图1\"></p>\n"},{"title":"Swift开源控件-汇总","date":"2017-06-29T01:34:32.000Z","_content":"\n```\nGithub上的实用的Swift开源控件(后续看到再补充)\n```\n\n### 网络框架\n\n[Alamofire](https://github.com/Alamofire/Alamofire)\n\n### 图片框架\n\n[AlamofireImage](https://github.com/Alamofire/AlamofireImage)\n\n<!-- more -->\n\n### 进度提示\n\n[SwiftNotice](https://github.com/johnlui/SwiftNotice)\n\n### JSON解析\n\n[SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)","source":"_posts/Swift开源控件-汇总.md","raw":"---\ntitle: Swift开源控件-汇总\ndate: 2017-06-29 09:34:32\ntags:\n\t- Swift\ncategories: Swift开源控件\n---\n\n```\nGithub上的实用的Swift开源控件(后续看到再补充)\n```\n\n### 网络框架\n\n[Alamofire](https://github.com/Alamofire/Alamofire)\n\n### 图片框架\n\n[AlamofireImage](https://github.com/Alamofire/AlamofireImage)\n\n<!-- more -->\n\n### 进度提示\n\n[SwiftNotice](https://github.com/johnlui/SwiftNotice)\n\n### JSON解析\n\n[SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)","slug":"Swift开源控件-汇总","published":1,"updated":"2017-08-10T12:01:34.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfsz001ywou5v2miq9a9","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github上的实用的Swift开源控件(后续看到再补充)</div></pre></td></tr></table></figure>\n<h3 id=\"网络框架\"><a href=\"#网络框架\" class=\"headerlink\" title=\"网络框架\"></a>网络框架</h3><p><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"external\">Alamofire</a></p>\n<h3 id=\"图片框架\"><a href=\"#图片框架\" class=\"headerlink\" title=\"图片框架\"></a>图片框架</h3><p><a href=\"https://github.com/Alamofire/AlamofireImage\" target=\"_blank\" rel=\"external\">AlamofireImage</a></p>\n<a id=\"more\"></a>\n<h3 id=\"进度提示\"><a href=\"#进度提示\" class=\"headerlink\" title=\"进度提示\"></a>进度提示</h3><p><a href=\"https://github.com/johnlui/SwiftNotice\" target=\"_blank\" rel=\"external\">SwiftNotice</a></p>\n<h3 id=\"JSON解析\"><a href=\"#JSON解析\" class=\"headerlink\" title=\"JSON解析\"></a>JSON解析</h3><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"external\">SwiftyJSON</a></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Github上的实用的Swift开源控件(后续看到再补充)</div></pre></td></tr></table></figure>\n<h3 id=\"网络框架\"><a href=\"#网络框架\" class=\"headerlink\" title=\"网络框架\"></a>网络框架</h3><p><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"external\">Alamofire</a></p>\n<h3 id=\"图片框架\"><a href=\"#图片框架\" class=\"headerlink\" title=\"图片框架\"></a>图片框架</h3><p><a href=\"https://github.com/Alamofire/AlamofireImage\" target=\"_blank\" rel=\"external\">AlamofireImage</a></p>","more":"<h3 id=\"进度提示\"><a href=\"#进度提示\" class=\"headerlink\" title=\"进度提示\"></a>进度提示</h3><p><a href=\"https://github.com/johnlui/SwiftNotice\" target=\"_blank\" rel=\"external\">SwiftNotice</a></p>\n<h3 id=\"JSON解析\"><a href=\"#JSON解析\" class=\"headerlink\" title=\"JSON解析\"></a>JSON解析</h3><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"external\">SwiftyJSON</a></p>"},{"title":"Swift笔记-可选链","date":"2017-06-06T06:40:32.000Z","_content":"\n## ！\n使用感叹号(!)可选链实例\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \nclass Residence {\n    var numberOfRooms = 1\n}\n  \nlet john = Person()\n  \n//将导致运行时错误\nlet roomCount = john.residence!.numberOfRooms\n  \n//fatal error: unexpectedly found nil while unwrapping an Optional value\n```\n想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。\n\n<!-- more -->\n\n## ？\n\n使用问号(?)可选链实例\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \nclass Residence {\n    var numberOfRooms = 1\n}\n  \nlet john = Person()\n  \n// 链接可选residence?属性，如果residence存在则取回numberOfRooms的值\nif let roomCount = john.residence?.numberOfRooms {\n    print(\"John 的房间号为 \\(roomCount)。\")\n} else {\n    print(\"不能查看房间号\")\n}\n  \n//不能查看房间号\n```\n\n\n## 连接多层链接\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \n// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组\nclass Residence {\n    var rooms = [Room]()\n    var numberOfRooms: Int {\n        return rooms.count\n    }\n    subscript(i: Int) -> Room {\n        return rooms[i]\n    }\n    func printNumberOfRooms() {\n        print(\"房间号为 \\(numberOfRooms)\")\n    }\n    var address: Address?\n}\n  \n// Room 定义一个name属性和一个设定room名的初始化器\nclass Room {\n    let name: String\n    init(name: String) { self.name = name }\n}\n  \n// 模型中的最终类叫做Address\nclass Address {\n    var buildingName: String?\n    var buildingNumber: String?\n    var street: String?\n    func buildingIdentifier() -> String? {\n        if (buildingName != nil) {\n            return buildingName\n        } else if (buildingNumber != nil) {\n            return buildingNumber\n        } else {\n            return nil\n        }\n    }\n}\n  \nlet john = Person()\n  \nif let johnsStreet = john.residence?.address?.street {\n    print(\"John 的地址为 \\(johnsStreet).\")\n} else {\n    print(\"不能检索地址\")\n}\n  \n//不能检索地址\n```\n\n## 对返回可选值的函数进行链接\n\n我们还可以通过可选链接来调用返回可空值的方法，并且可以继续对可选值进行链接。\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \n// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组\nclass Residence {\n    var rooms = [Room]()\n    var numberOfRooms: Int {\n        return rooms.count\n    }\n    subscript(i: Int) -> Room {\n        return rooms[i]\n    }\n    func printNumberOfRooms() {\n        print(\"房间号为 \\(numberOfRooms)\")\n    }\n    var address: Address?\n}\n  \n// Room 定义一个name属性和一个设定room名的初始化器\nclass Room {\n    let name: String\n    init(name: String) { self.name = name }\n}\n  \n// 模型中的最终类叫做Address\nclass Address {\n    var buildingName: String?\n    var buildingNumber: String?\n    var street: String?\n    func buildingIdentifier() -> String? {\n        if (buildingName != nil) {\n            return buildingName\n        } else if (buildingNumber != nil) {\n            return buildingNumber\n        } else {\n            return nil\n        }\n    }\n}\n  \nlet john = Person()\n  \nif john.residence?.printNumberOfRooms() != nil {\n    print(\"指定了房间号)\")\n}  else {\n    print(\"未指定房间号\")\n}\n  \n//未指定房间号\n```\n\n上例中，对Residence的函数printNumberOfRooms进行链接。\n\n","source":"_posts/Swift笔记-可选链.md","raw":"---\ntitle: Swift笔记-可选链\ndate: 2017-06-06 14:40:32\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## ！\n使用感叹号(!)可选链实例\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \nclass Residence {\n    var numberOfRooms = 1\n}\n  \nlet john = Person()\n  \n//将导致运行时错误\nlet roomCount = john.residence!.numberOfRooms\n  \n//fatal error: unexpectedly found nil while unwrapping an Optional value\n```\n想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。\n\n<!-- more -->\n\n## ？\n\n使用问号(?)可选链实例\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \nclass Residence {\n    var numberOfRooms = 1\n}\n  \nlet john = Person()\n  \n// 链接可选residence?属性，如果residence存在则取回numberOfRooms的值\nif let roomCount = john.residence?.numberOfRooms {\n    print(\"John 的房间号为 \\(roomCount)。\")\n} else {\n    print(\"不能查看房间号\")\n}\n  \n//不能查看房间号\n```\n\n\n## 连接多层链接\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \n// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组\nclass Residence {\n    var rooms = [Room]()\n    var numberOfRooms: Int {\n        return rooms.count\n    }\n    subscript(i: Int) -> Room {\n        return rooms[i]\n    }\n    func printNumberOfRooms() {\n        print(\"房间号为 \\(numberOfRooms)\")\n    }\n    var address: Address?\n}\n  \n// Room 定义一个name属性和一个设定room名的初始化器\nclass Room {\n    let name: String\n    init(name: String) { self.name = name }\n}\n  \n// 模型中的最终类叫做Address\nclass Address {\n    var buildingName: String?\n    var buildingNumber: String?\n    var street: String?\n    func buildingIdentifier() -> String? {\n        if (buildingName != nil) {\n            return buildingName\n        } else if (buildingNumber != nil) {\n            return buildingNumber\n        } else {\n            return nil\n        }\n    }\n}\n  \nlet john = Person()\n  \nif let johnsStreet = john.residence?.address?.street {\n    print(\"John 的地址为 \\(johnsStreet).\")\n} else {\n    print(\"不能检索地址\")\n}\n  \n//不能检索地址\n```\n\n## 对返回可选值的函数进行链接\n\n我们还可以通过可选链接来调用返回可空值的方法，并且可以继续对可选值进行链接。\n\n```swift\nclass Person {\n    var residence: Residence?\n}\n  \n// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组\nclass Residence {\n    var rooms = [Room]()\n    var numberOfRooms: Int {\n        return rooms.count\n    }\n    subscript(i: Int) -> Room {\n        return rooms[i]\n    }\n    func printNumberOfRooms() {\n        print(\"房间号为 \\(numberOfRooms)\")\n    }\n    var address: Address?\n}\n  \n// Room 定义一个name属性和一个设定room名的初始化器\nclass Room {\n    let name: String\n    init(name: String) { self.name = name }\n}\n  \n// 模型中的最终类叫做Address\nclass Address {\n    var buildingName: String?\n    var buildingNumber: String?\n    var street: String?\n    func buildingIdentifier() -> String? {\n        if (buildingName != nil) {\n            return buildingName\n        } else if (buildingNumber != nil) {\n            return buildingNumber\n        } else {\n            return nil\n        }\n    }\n}\n  \nlet john = Person()\n  \nif john.residence?.printNumberOfRooms() != nil {\n    print(\"指定了房间号)\")\n}  else {\n    print(\"未指定房间号\")\n}\n  \n//未指定房间号\n```\n\n上例中，对Residence的函数printNumberOfRooms进行链接。\n\n","slug":"Swift笔记-可选链","published":1,"updated":"2017-08-10T12:01:34.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft10021wou5vsk5puyz","content":"<h2 id=\"！\"><a href=\"#！\" class=\"headerlink\" title=\"！\"></a>！</h2><p>使用感叹号(!)可选链实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//将导致运行时错误</span></div><div class=\"line\"><span class=\"keyword\">let</span> roomCount = john.residence!.numberOfRooms</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//fatal error: unexpectedly found nil while unwrapping an Optional value</span></div></pre></td></tr></table></figure>\n<p>想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。</p>\n<a id=\"more\"></a>\n<h2 id=\"？\"><a href=\"#？\" class=\"headerlink\" title=\"？\"></a>？</h2><p>使用问号(?)可选链实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 链接可选residence?属性，如果residence存在则取回numberOfRooms的值</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount = john.residence?.numberOfRooms &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"John 的房间号为 \\(roomCount)。\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不能查看房间号\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//不能查看房间号</span></div></pre></td></tr></table></figure>\n<h2 id=\"连接多层链接\"><a href=\"#连接多层链接\" class=\"headerlink\" title=\"连接多层链接\"></a>连接多层链接</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]()</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"房间号为 \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// Room 定义一个name属性和一个设定room名的初始化器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 模型中的最终类叫做Address</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingName: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingNumber: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildingIdentifier</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (buildingName != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingName</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (buildingNumber != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingNumber</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> johnsStreet = john.residence?.address?.street &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"John 的地址为 \\(johnsStreet).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不能检索地址\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//不能检索地址</span></div></pre></td></tr></table></figure>\n<h2 id=\"对返回可选值的函数进行链接\"><a href=\"#对返回可选值的函数进行链接\" class=\"headerlink\" title=\"对返回可选值的函数进行链接\"></a>对返回可选值的函数进行链接</h2><p>我们还可以通过可选链接来调用返回可空值的方法，并且可以继续对可选值进行链接。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]()</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"房间号为 \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// Room 定义一个name属性和一个设定room名的初始化器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 模型中的最终类叫做Address</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingName: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingNumber: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildingIdentifier</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (buildingName != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingName</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (buildingNumber != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingNumber</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> john.residence?.printNumberOfRooms() != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"指定了房间号)\"</span>)</div><div class=\"line\">&#125;  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"未指定房间号\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//未指定房间号</span></div></pre></td></tr></table></figure>\n<p>上例中，对Residence的函数printNumberOfRooms进行链接。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"！\"><a href=\"#！\" class=\"headerlink\" title=\"！\"></a>！</h2><p>使用感叹号(!)可选链实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//将导致运行时错误</span></div><div class=\"line\"><span class=\"keyword\">let</span> roomCount = john.residence!.numberOfRooms</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//fatal error: unexpectedly found nil while unwrapping an Optional value</span></div></pre></td></tr></table></figure>\n<p>想使用感叹号（!）强制解析获得这个人residence属性numberOfRooms属性值，将会引发运行时错误，因为这时没有可以供解析的residence值。</p>","more":"<h2 id=\"？\"><a href=\"#？\" class=\"headerlink\" title=\"？\"></a>？</h2><p>使用问号(?)可选链实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 链接可选residence?属性，如果residence存在则取回numberOfRooms的值</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount = john.residence?.numberOfRooms &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"John 的房间号为 \\(roomCount)。\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不能查看房间号\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//不能查看房间号</span></div></pre></td></tr></table></figure>\n<h2 id=\"连接多层链接\"><a href=\"#连接多层链接\" class=\"headerlink\" title=\"连接多层链接\"></a>连接多层链接</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]()</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"房间号为 \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// Room 定义一个name属性和一个设定room名的初始化器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 模型中的最终类叫做Address</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingName: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingNumber: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildingIdentifier</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (buildingName != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingName</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (buildingNumber != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingNumber</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> johnsStreet = john.residence?.address?.street &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"John 的地址为 \\(johnsStreet).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"不能检索地址\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//不能检索地址</span></div></pre></td></tr></table></figure>\n<h2 id=\"对返回可选值的函数进行链接\"><a href=\"#对返回可选值的函数进行链接\" class=\"headerlink\" title=\"对返回可选值的函数进行链接\"></a>对返回可选值的函数进行链接</h2><p>我们还可以通过可选链接来调用返回可空值的方法，并且可以继续对可选值进行链接。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 定义了一个变量 rooms，它被初始化为一个Room[]类型的空数组</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]()</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"房间号为 \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>?</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// Room 定义一个name属性和一个设定room名的初始化器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 模型中的最终类叫做Address</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingName: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> buildingNumber: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildingIdentifier</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (buildingName != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingName</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (buildingNumber != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> buildingNumber</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">if</span> john.residence?.printNumberOfRooms() != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"指定了房间号)\"</span>)</div><div class=\"line\">&#125;  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"未指定房间号\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//未指定房间号</span></div></pre></td></tr></table></figure>\n<p>上例中，对Residence的函数printNumberOfRooms进行链接。</p>"},{"title":"Swift笔记-协议","date":"2017-06-07T03:45:31.000Z","_content":"\n协议规定了用来实现某一特定功能所必需的方法和属性。\n\n## 语法\n\n\n```swift\nprotocol SomeProtocol {\n    // 协议内容\n}\n```\n\n要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。\n\n\n<!-- more -->\n\n```swift\nstruct SomeStructure: FirstProtocol, AnotherProtocol {\n    // 结构体内容\n}\n```\n\n如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔。\n\n\n```swift\nclass SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol {\n    // 类的内容\n}\n```\n\n## 对属性的规定\n- 协议用于指定特定的实例属性或类属性，而不用指定是存储型属性或计算型属性。此外还必须指明是只读的还是可读可写的。\n- 协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。\n\n```swift\nprotocol classa {\n    \n    var marks: Int { get set }\n    var result: Bool { get }\n    \n    func attendance() -> String\n    func markssecured() -> String\n    \n}\n  \nprotocol classb: classa {\n    \n    var present: Bool { get set }\n    var subject: String { get set }\n    var stname: String { get set }\n    \n}\n  \nclass classc: classb {\n    var marks = 96\n    let result = true\n    var present = false\n    var subject = \"Swift 协议\"\n    var stname = \"Protocols\"\n    \n    func attendance() -> String {\n        return \"The \\(stname) has secured 99% attendance\"\n    }\n    \n    func markssecured() -> String {\n        return \"\\(stname) has scored \\(marks)\"\n    }\n}\n  \nlet studdet = classc()\nstuddet.stname = \"Swift\"\nstuddet.marks = 98\nstuddet.markssecured()\n  \nprint(studdet.marks)\nprint(studdet.result)\nprint(studdet.present)\nprint(studdet.subject)\nprint(studdet.stname)\n```\n\n## 对 Mutating 方法的规定\n\n值类型(结构体，枚举)的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值。\n\n\n```swift\nprotocol daysofaweek {\n    mutating func show()\n}\n  \nenum days: daysofaweek {\n    case sun, mon, tue, wed, thurs, fri, sat\n    mutating func show() {\n        switch self {\n        case .sun:\n            self = .sun\n            print(\"Sunday\")\n        case .mon:\n            self = .mon\n            print(\"Monday\")\n        case .tue:\n            self = .tue\n            print(\"Tuesday\")\n        case .wed:\n            self = .wed\n            print(\"Wednesday\")\n        case .thurs:\n            self = .thurs\n            print(\"Wednesday\")\n        case .fri:\n            self = .fri\n            print(\"Wednesday\")\n        case .sat:\n            self = .sat\n            print(\"Saturday\")\n        default:\n            print(\"NO Such Day\")\n        }\n    }\n}\n  \nvar res = days.wed\nres.show()\n  \n```\n\n## 协议构造器规定在类中的实现\n\n你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上\"required\"修饰符：\n\n```swift\nclass SomeClass: SomeProtocol {\n   required init(someParameter: Int) {\n      // 构造器实现\n   }\n}\n\nprotocol tcpprotocol {\n   init(aprot: Int)\n}\n\nclass tcpClass: tcpprotocol {\n   required init(aprot: Int) {\n   }\n}\n```\n\n使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。\n\n如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符：\n\n```swift\nprotocol tcpprotocol {\n    init(no1: Int)\n}\n\nclass mainClass {\n    var no1: Int // 局部变量\n    init(no1: Int) {\n        self.no1 = no1 // 初始化\n    }\n}\n\nclass subClass: mainClass, tcpprotocol {\n    var no2: Int\n    init(no1: Int, no2 : Int) {\n        self.no2 = no2\n        super.init(no1:no1)\n    }\n    // 因为遵循协议，需要加上\"required\"; 因为继承自父类，需要加上\"override\"\n    required override convenience init(no1: Int)  {\n        self.init(no1:no1, no2:0)\n    }\n}\nlet res = mainClass(no1: 20)\nlet show = subClass(no1: 30, no2: 50)\n\nprint(\"res is: \\(res.no1)\")\nprint(\"res is: \\(show.no1)\")\nprint(\"res is: \\(show.no2)\")\n```\n\n## 协议类型\n\n尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用。\n\n协议可以像其他普通类型一样使用，使用场景:\n- 作为函数、方法或构造器中的参数类型或返回值类型\n- 作为常量、变量或属性的类型\n- 作为数组、字典或其他容器中的元素类型\n\n## 在扩展中添加协议成员\n\n我们可以可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。\n\n扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。\n\n\n```swift\nprotocol AgeClasificationProtocol {\n   var age: Int { get }\n   func agetype() -> String\n}\n\nclass Person {\n   let firstname: String\n   let lastname: String\n   var age: Int\n   init(firstname: String, lastname: String) {\n      self.firstname = firstname\n      self.lastname = lastname\n      self.age = 10\n   }\n}\n\nextension Person : AgeClasificationProtocol {\n   func fullname() -> String {\n      var c: String\n      c = firstname + \" \" + lastname\n      return c\n   }\n   \n   func agetype() -> String {\n      switch age {\n      case 0...2:\n         return \"Baby\"\n      case 2...12:\n         return \"Child\"\n      case 13...19:\n         return \"Teenager\"\n      case let x where x > 65:\n         return \"Elderly\"\n      default:\n         return \"Normal\"\n      }\n   }\n}\n```\n\n\n## 协议的继承\n\n协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。\n\n```swift\nprotocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // 协议定义\n}\n```\n\n## 类专属协议\n\n```swift\nprotocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {\n    // 协议定义\n}\n```\n\n## 协议合成\n\nSwift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。\n\n## 检验协议的一致性\n\n你可以使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。\n- is操作符用来检查实例是否遵循了某个协议。\n- as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。\n- as用以强制向下转型，如果强转失败，会引起运行时错误。\n\n```swift\nprotocol HasArea {\n    var area: Double { get }\n}\n\n// 定义了Circle类，都遵循了HasArea协议\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\n\n// 定义了Country类，都遵循了HasArea协议\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\n\n// Animal是一个没有实现HasArea协议的类\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    // 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议\n    if let objectWithArea = object as? HasArea {\n        print(\"面积为 \\(objectWithArea.area)\")\n    } else {\n        print(\"没有面积\")\n    }\n}\n```\n\n","source":"_posts/Swift笔记-协议.md","raw":"---\ntitle: Swift笔记-协议\ndate: 2017-06-07 11:45:31\ntags: \n\t- Swift \ncategories: Swift \n---\n\n协议规定了用来实现某一特定功能所必需的方法和属性。\n\n## 语法\n\n\n```swift\nprotocol SomeProtocol {\n    // 协议内容\n}\n```\n\n要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。\n\n\n<!-- more -->\n\n```swift\nstruct SomeStructure: FirstProtocol, AnotherProtocol {\n    // 结构体内容\n}\n```\n\n如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔。\n\n\n```swift\nclass SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol {\n    // 类的内容\n}\n```\n\n## 对属性的规定\n- 协议用于指定特定的实例属性或类属性，而不用指定是存储型属性或计算型属性。此外还必须指明是只读的还是可读可写的。\n- 协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。\n\n```swift\nprotocol classa {\n    \n    var marks: Int { get set }\n    var result: Bool { get }\n    \n    func attendance() -> String\n    func markssecured() -> String\n    \n}\n  \nprotocol classb: classa {\n    \n    var present: Bool { get set }\n    var subject: String { get set }\n    var stname: String { get set }\n    \n}\n  \nclass classc: classb {\n    var marks = 96\n    let result = true\n    var present = false\n    var subject = \"Swift 协议\"\n    var stname = \"Protocols\"\n    \n    func attendance() -> String {\n        return \"The \\(stname) has secured 99% attendance\"\n    }\n    \n    func markssecured() -> String {\n        return \"\\(stname) has scored \\(marks)\"\n    }\n}\n  \nlet studdet = classc()\nstuddet.stname = \"Swift\"\nstuddet.marks = 98\nstuddet.markssecured()\n  \nprint(studdet.marks)\nprint(studdet.result)\nprint(studdet.present)\nprint(studdet.subject)\nprint(studdet.stname)\n```\n\n## 对 Mutating 方法的规定\n\n值类型(结构体，枚举)的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值。\n\n\n```swift\nprotocol daysofaweek {\n    mutating func show()\n}\n  \nenum days: daysofaweek {\n    case sun, mon, tue, wed, thurs, fri, sat\n    mutating func show() {\n        switch self {\n        case .sun:\n            self = .sun\n            print(\"Sunday\")\n        case .mon:\n            self = .mon\n            print(\"Monday\")\n        case .tue:\n            self = .tue\n            print(\"Tuesday\")\n        case .wed:\n            self = .wed\n            print(\"Wednesday\")\n        case .thurs:\n            self = .thurs\n            print(\"Wednesday\")\n        case .fri:\n            self = .fri\n            print(\"Wednesday\")\n        case .sat:\n            self = .sat\n            print(\"Saturday\")\n        default:\n            print(\"NO Such Day\")\n        }\n    }\n}\n  \nvar res = days.wed\nres.show()\n  \n```\n\n## 协议构造器规定在类中的实现\n\n你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上\"required\"修饰符：\n\n```swift\nclass SomeClass: SomeProtocol {\n   required init(someParameter: Int) {\n      // 构造器实现\n   }\n}\n\nprotocol tcpprotocol {\n   init(aprot: Int)\n}\n\nclass tcpClass: tcpprotocol {\n   required init(aprot: Int) {\n   }\n}\n```\n\n使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。\n\n如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符：\n\n```swift\nprotocol tcpprotocol {\n    init(no1: Int)\n}\n\nclass mainClass {\n    var no1: Int // 局部变量\n    init(no1: Int) {\n        self.no1 = no1 // 初始化\n    }\n}\n\nclass subClass: mainClass, tcpprotocol {\n    var no2: Int\n    init(no1: Int, no2 : Int) {\n        self.no2 = no2\n        super.init(no1:no1)\n    }\n    // 因为遵循协议，需要加上\"required\"; 因为继承自父类，需要加上\"override\"\n    required override convenience init(no1: Int)  {\n        self.init(no1:no1, no2:0)\n    }\n}\nlet res = mainClass(no1: 20)\nlet show = subClass(no1: 30, no2: 50)\n\nprint(\"res is: \\(res.no1)\")\nprint(\"res is: \\(show.no1)\")\nprint(\"res is: \\(show.no2)\")\n```\n\n## 协议类型\n\n尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用。\n\n协议可以像其他普通类型一样使用，使用场景:\n- 作为函数、方法或构造器中的参数类型或返回值类型\n- 作为常量、变量或属性的类型\n- 作为数组、字典或其他容器中的元素类型\n\n## 在扩展中添加协议成员\n\n我们可以可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。\n\n扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。\n\n\n```swift\nprotocol AgeClasificationProtocol {\n   var age: Int { get }\n   func agetype() -> String\n}\n\nclass Person {\n   let firstname: String\n   let lastname: String\n   var age: Int\n   init(firstname: String, lastname: String) {\n      self.firstname = firstname\n      self.lastname = lastname\n      self.age = 10\n   }\n}\n\nextension Person : AgeClasificationProtocol {\n   func fullname() -> String {\n      var c: String\n      c = firstname + \" \" + lastname\n      return c\n   }\n   \n   func agetype() -> String {\n      switch age {\n      case 0...2:\n         return \"Baby\"\n      case 2...12:\n         return \"Child\"\n      case 13...19:\n         return \"Teenager\"\n      case let x where x > 65:\n         return \"Elderly\"\n      default:\n         return \"Normal\"\n      }\n   }\n}\n```\n\n\n## 协议的继承\n\n协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。\n\n```swift\nprotocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // 协议定义\n}\n```\n\n## 类专属协议\n\n```swift\nprotocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {\n    // 协议定义\n}\n```\n\n## 协议合成\n\nSwift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。\n\n## 检验协议的一致性\n\n你可以使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。\n- is操作符用来检查实例是否遵循了某个协议。\n- as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。\n- as用以强制向下转型，如果强转失败，会引起运行时错误。\n\n```swift\nprotocol HasArea {\n    var area: Double { get }\n}\n\n// 定义了Circle类，都遵循了HasArea协议\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\n\n// 定义了Country类，都遵循了HasArea协议\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\n\n// Animal是一个没有实现HasArea协议的类\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    // 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议\n    if let objectWithArea = object as? HasArea {\n        print(\"面积为 \\(objectWithArea.area)\")\n    } else {\n        print(\"没有面积\")\n    }\n}\n```\n\n","slug":"Swift笔记-协议","published":1,"updated":"2017-08-10T12:01:34.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft20025wou5q5zzl6oy","content":"<p>协议规定了用来实现某一特定功能所必需的方法和属性。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span>: <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 结构体内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对属性的规定\"><a href=\"#对属性的规定\" class=\"headerlink\" title=\"对属性的规定\"></a>对属性的规定</h2><ul>\n<li>协议用于指定特定的实例属性或类属性，而不用指定是存储型属性或计算型属性。此外还必须指明是只读的还是可读可写的。</li>\n<li>协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">classa</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> marks: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> result: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">attendance</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">markssecured</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">classb</span>: <span class=\"title\">classa</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> present: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> subject: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> stname: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">classc</span>: <span class=\"title\">classb</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> marks = <span class=\"number\">96</span></div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">var</span> present = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subject = <span class=\"string\">\"Swift 协议\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> stname = <span class=\"string\">\"Protocols\"</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">attendance</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The \\(stname) has secured 99% attendance\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">markssecured</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(stname) has scored \\(marks)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> studdet = classc()</div><div class=\"line\">studdet.stname = <span class=\"string\">\"Swift\"</span></div><div class=\"line\">studdet.marks = <span class=\"number\">98</span></div><div class=\"line\">studdet.markssecured()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.marks)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.result)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.present)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.subject)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.stname)</div></pre></td></tr></table></figure>\n<h2 id=\"对-Mutating-方法的规定\"><a href=\"#对-Mutating-方法的规定\" class=\"headerlink\" title=\"对 Mutating 方法的规定\"></a>对 Mutating 方法的规定</h2><p>值类型(结构体，枚举)的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">days</span>: <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> sun, mon, tue, wed, thurs, fri, sat</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .sun:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .sun</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Sunday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .mon:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .mon</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Monday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .tue:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .tue</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Tuesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .wed:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .wed</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .thurs:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .thurs</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .fri:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .fri</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .sat:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .sat</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Saturday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"NO Such Day\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> res = days.wed</div><div class=\"line\">res.show()</div></pre></td></tr></table></figure>\n<h2 id=\"协议构造器规定在类中的实现\"><a href=\"#协议构造器规定在类中的实现\" class=\"headerlink\" title=\"协议构造器规定在类中的实现\"></a>协议构造器规定在类中的实现</h2><p>你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上”required”修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 构造器实现</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">init</span>(aprot: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">tcpClass</span>: <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(aprot: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。</p>\n<p>如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mainClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1: <span class=\"type\">Int</span> <span class=\"comment\">// 局部变量</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no1 = no1 <span class=\"comment\">// 初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">subClass</span>: <span class=\"title\">mainClass</span>, <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>, no2 : <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no2 = no2</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(no1:no1)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 因为遵循协议，需要加上\"required\"; 因为继承自父类，需要加上\"override\"</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)  &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(no1:no1, no2:<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> res = mainClass(no1: <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> show = subClass(no1: <span class=\"number\">30</span>, no2: <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(res.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"协议类型\"><a href=\"#协议类型\" class=\"headerlink\" title=\"协议类型\"></a>协议类型</h2><p>尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用。</p>\n<p>协议可以像其他普通类型一样使用，使用场景:</p>\n<ul>\n<li>作为函数、方法或构造器中的参数类型或返回值类型</li>\n<li>作为常量、变量或属性的类型</li>\n<li>作为数组、字典或其他容器中的元素类型</li>\n</ul>\n<h2 id=\"在扩展中添加协议成员\"><a href=\"#在扩展中添加协议成员\" class=\"headerlink\" title=\"在扩展中添加协议成员\"></a>在扩展中添加协议成员</h2><p>我们可以可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。</p>\n<p>扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">AgeClasificationProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">agetype</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> firstname: <span class=\"type\">String</span></div><div class=\"line\">   <span class=\"keyword\">let</span> lastname: <span class=\"type\">String</span></div><div class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">init</span>(firstname: <span class=\"type\">String</span>, lastname: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.firstname = firstname</div><div class=\"line\">      <span class=\"keyword\">self</span>.lastname = lastname</div><div class=\"line\">      <span class=\"keyword\">self</span>.age = <span class=\"number\">10</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Person</span> : <span class=\"title\">AgeClasificationProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fullname</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>: <span class=\"type\">String</span></div><div class=\"line\">      <span class=\"built_in\">c</span> = firstname + <span class=\"string\">\" \"</span> + lastname</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">c</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">agetype</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> age &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>...<span class=\"number\">2</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Baby\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>...<span class=\"number\">12</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Child\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">13</span>...<span class=\"number\">19</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Teenager\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x &gt; <span class=\"number\">65</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Elderly\"</span></div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Normal\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"协议的继承\"><a href=\"#协议的继承\" class=\"headerlink\" title=\"协议的继承\"></a>协议的继承</h2><p>协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">InheritingProtocol</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"类专属协议\"><a href=\"#类专属协议\" class=\"headerlink\" title=\"类专属协议\"></a>类专属协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeClassOnlyProtocol</span>: <span class=\"title\">class</span>, <span class=\"title\">SomeInheritedProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"协议合成\"><a href=\"#协议合成\" class=\"headerlink\" title=\"协议合成\"></a>协议合成</h2><p>Swift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。</p>\n<h2 id=\"检验协议的一致性\"><a href=\"#检验协议的一致性\" class=\"headerlink\" title=\"检验协议的一致性\"></a>检验协议的一致性</h2><p>你可以使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。</p>\n<ul>\n<li>is操作符用来检查实例是否遵循了某个协议。</li>\n<li>as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。</li>\n<li>as用以强制向下转型，如果强转失败，会引起运行时错误。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义了Circle类，都遵循了HasArea协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415927</span></div><div class=\"line\">    <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> pi * radius * radius &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(radius: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.radius = radius &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义了Country类，都遵循了HasArea协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(area: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.area = area &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Animal是一个没有实现HasArea协议的类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> legs: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(legs: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.legs = legs &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> objects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Circle</span>(radius: <span class=\"number\">2.0</span>),</div><div class=\"line\">    <span class=\"type\">Country</span>(area: <span class=\"number\">243_610</span>),</div><div class=\"line\">    <span class=\"type\">Animal</span>(legs: <span class=\"number\">4</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> object <span class=\"keyword\">in</span> objects &#123;</div><div class=\"line\">    <span class=\"comment\">// 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> objectWithArea = object <span class=\"keyword\">as</span>? <span class=\"type\">HasArea</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"面积为 \\(objectWithArea.area)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"没有面积\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>协议规定了用来实现某一特定功能所必需的方法和属性。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要使类遵循某个协议，需要在类型名称后加上协议名称，中间以冒号:分隔，作为类型定义的一部分。遵循多个协议时，各协议之间用逗号,分隔。</p>","more":"<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span>: <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 结构体内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对属性的规定\"><a href=\"#对属性的规定\" class=\"headerlink\" title=\"对属性的规定\"></a>对属性的规定</h2><ul>\n<li>协议用于指定特定的实例属性或类属性，而不用指定是存储型属性或计算型属性。此外还必须指明是只读的还是可读可写的。</li>\n<li>协议中的通常用var来声明变量属性，在类型声明后加上{ set get }来表示属性是可读可写的，只读属性则用{ get }来表示。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">classa</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> marks: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> result: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">attendance</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">markssecured</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">classb</span>: <span class=\"title\">classa</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> present: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> subject: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> stname: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">classc</span>: <span class=\"title\">classb</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> marks = <span class=\"number\">96</span></div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">var</span> present = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subject = <span class=\"string\">\"Swift 协议\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> stname = <span class=\"string\">\"Protocols\"</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">attendance</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The \\(stname) has secured 99% attendance\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">markssecured</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(stname) has scored \\(marks)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> studdet = classc()</div><div class=\"line\">studdet.stname = <span class=\"string\">\"Swift\"</span></div><div class=\"line\">studdet.marks = <span class=\"number\">98</span></div><div class=\"line\">studdet.markssecured()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.marks)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.result)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.present)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.subject)</div><div class=\"line\"><span class=\"built_in\">print</span>(studdet.stname)</div></pre></td></tr></table></figure>\n<h2 id=\"对-Mutating-方法的规定\"><a href=\"#对-Mutating-方法的规定\" class=\"headerlink\" title=\"对 Mutating 方法的规定\"></a>对 Mutating 方法的规定</h2><p>值类型(结构体，枚举)的实例方法中，将mutating关键字作为函数的前缀，写在func之前，表示可以在该方法中修改它所属的实例及其实例属性的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">days</span>: <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> sun, mon, tue, wed, thurs, fri, sat</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .sun:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .sun</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Sunday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .mon:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .mon</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Monday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .tue:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .tue</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Tuesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .wed:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .wed</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .thurs:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .thurs</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .fri:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .fri</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Wednesday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .sat:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .sat</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Saturday\"</span>)</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"NO Such Day\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> res = days.wed</div><div class=\"line\">res.show()</div></pre></td></tr></table></figure>\n<h2 id=\"协议构造器规定在类中的实现\"><a href=\"#协议构造器规定在类中的实现\" class=\"headerlink\" title=\"协议构造器规定在类中的实现\"></a>协议构造器规定在类中的实现</h2><p>你可以在遵循该协议的类中实现构造器，并指定其为类的指定构造器或者便利构造器。在这两种情况下，你都必须给构造器实现标上”required”修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 构造器实现</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">init</span>(aprot: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">tcpClass</span>: <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(aprot: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现。</p>\n<p>如果一个子类重写了父类的指定构造器，并且该构造器遵循了某个协议的规定，那么该构造器的实现需要被同时标示required和override修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mainClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1: <span class=\"type\">Int</span> <span class=\"comment\">// 局部变量</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no1 = no1 <span class=\"comment\">// 初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">subClass</span>: <span class=\"title\">mainClass</span>, <span class=\"title\">tcpprotocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>, no2 : <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no2 = no2</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(no1:no1)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 因为遵循协议，需要加上\"required\"; 因为继承自父类，需要加上\"override\"</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)  &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(no1:no1, no2:<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> res = mainClass(no1: <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> show = subClass(no1: <span class=\"number\">30</span>, no2: <span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(res.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"协议类型\"><a href=\"#协议类型\" class=\"headerlink\" title=\"协议类型\"></a>协议类型</h2><p>尽管协议本身并不实现任何功能，但是协议可以被当做类型来使用。</p>\n<p>协议可以像其他普通类型一样使用，使用场景:</p>\n<ul>\n<li>作为函数、方法或构造器中的参数类型或返回值类型</li>\n<li>作为常量、变量或属性的类型</li>\n<li>作为数组、字典或其他容器中的元素类型</li>\n</ul>\n<h2 id=\"在扩展中添加协议成员\"><a href=\"#在扩展中添加协议成员\" class=\"headerlink\" title=\"在扩展中添加协议成员\"></a>在扩展中添加协议成员</h2><p>我们可以可以通过扩展来扩充已存在类型( 类，结构体，枚举等)。</p>\n<p>扩展可以为已存在的类型添加属性，方法，下标脚本，协议等成员。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">AgeClasificationProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">agetype</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> firstname: <span class=\"type\">String</span></div><div class=\"line\">   <span class=\"keyword\">let</span> lastname: <span class=\"type\">String</span></div><div class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">init</span>(firstname: <span class=\"type\">String</span>, lastname: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.firstname = firstname</div><div class=\"line\">      <span class=\"keyword\">self</span>.lastname = lastname</div><div class=\"line\">      <span class=\"keyword\">self</span>.age = <span class=\"number\">10</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Person</span> : <span class=\"title\">AgeClasificationProtocol</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fullname</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> <span class=\"built_in\">c</span>: <span class=\"type\">String</span></div><div class=\"line\">      <span class=\"built_in\">c</span> = firstname + <span class=\"string\">\" \"</span> + lastname</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">c</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">agetype</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> age &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>...<span class=\"number\">2</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Baby\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>...<span class=\"number\">12</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Child\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">13</span>...<span class=\"number\">19</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Teenager\"</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x &gt; <span class=\"number\">65</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Elderly\"</span></div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">\"Normal\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"协议的继承\"><a href=\"#协议的继承\" class=\"headerlink\" title=\"协议的继承\"></a>协议的继承</h2><p>协议能够继承一个或多个其他协议，可以在继承的协议基础上增加新的内容要求。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">InheritingProtocol</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"类专属协议\"><a href=\"#类专属协议\" class=\"headerlink\" title=\"类专属协议\"></a>类专属协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeClassOnlyProtocol</span>: <span class=\"title\">class</span>, <span class=\"title\">SomeInheritedProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"协议合成\"><a href=\"#协议合成\" class=\"headerlink\" title=\"协议合成\"></a>协议合成</h2><p>Swift 支持合成多个协议，这在我们需要同时遵循多个协议时非常有用。</p>\n<h2 id=\"检验协议的一致性\"><a href=\"#检验协议的一致性\" class=\"headerlink\" title=\"检验协议的一致性\"></a>检验协议的一致性</h2><p>你可以使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型。</p>\n<ul>\n<li>is操作符用来检查实例是否遵循了某个协议。</li>\n<li>as?返回一个可选值，当实例遵循协议时，返回该协议类型;否则返回nil。</li>\n<li>as用以强制向下转型，如果强转失败，会引起运行时错误。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义了Circle类，都遵循了HasArea协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415927</span></div><div class=\"line\">    <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> pi * radius * radius &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(radius: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.radius = radius &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义了Country类，都遵循了HasArea协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(area: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.area = area &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Animal是一个没有实现HasArea协议的类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> legs: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(legs: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.legs = legs &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> objects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Circle</span>(radius: <span class=\"number\">2.0</span>),</div><div class=\"line\">    <span class=\"type\">Country</span>(area: <span class=\"number\">243_610</span>),</div><div class=\"line\">    <span class=\"type\">Animal</span>(legs: <span class=\"number\">4</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> object <span class=\"keyword\">in</span> objects &#123;</div><div class=\"line\">    <span class=\"comment\">// 对迭代出的每一个元素进行检查，看它是否遵循了HasArea协议</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> objectWithArea = object <span class=\"keyword\">as</span>? <span class=\"type\">HasArea</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"面积为 \\(objectWithArea.area)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"没有面积\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Swift笔记-下标脚本","date":"2017-06-06T05:24:23.000Z","_content":"\n## 语法\n\n定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。\n\n```swift\nsubscript(index: Int) -> Int {\n    get {\n        // 用于下标脚本值的声明\n    }\n    set(newValue) {\n        // 执行赋值操作\n    }\n}\n\n```\n\n<!-- more -->\n\n```swift\nsubscript(index: Int) -> Int {\n    return index*4   // 用于下标脚本值的声明\n}\n```\n\n## 实例\n\n```swift\nimport Cocoa\n\nstruct subexample {\n    let decrementer: Int\n    subscript(index: Int) -> Int {\n        return decrementer / index\n    }\n}\nlet division = subexample(decrementer: 100)\n\nprint(\"100 除以 9 等于 \\(division[9])\")\nprint(\"100 除以 2 等于 \\(division[2])\")\nprint(\"100 除以 3 等于 \\(division[3])\")\nprint(\"100 除以 5 等于 \\(division[5])\")\nprint(\"100 除以 7 等于 \\(division[7])\")\n```\n\n## 实例2\n\n```swift\nimport Cocoa\n\nclass daysofaweek {\n    private var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n        \"Thursday\", \"Friday\", \"saturday\"]\n    subscript(index: Int) -> String {\n        get {\n            return days[index]   // 声明下标脚本的值\n        }\n        set(newValue) {\n            self.days[index] = newValue   // 执行赋值操作\n        }\n    }\n}\nvar p = daysofaweek()\n\nprint(p[0])\nprint(p[1])\nprint(p[2])\nprint(p[3])\n```\n\n\n## 下标脚本选项\n- 下标脚本允许任意数量的入参索引，并且每个入参类型也没有限制。\n- 下标脚本的返回值也可以是任何类型。\n- 下标脚本可以使用变量参数和可变参数。\n\n```swift\nimport Cocoa\n\nstruct Matrix {\n    let rows: Int, columns: Int\n    var print: [Double]\n    init(rows: Int, columns: Int) {\n        self.rows = rows\n        self.columns = columns\n        print = Array(repeating: 0.0, count: rows * columns)\n    }\n    subscript(row: Int, column: Int) -> Double {\n        get {\n            return print[(row * columns) + column]\n        }\n        set {\n            print[(row * columns) + column] = newValue\n        }\n    }\n}\n// 创建了一个新的 3 行 3 列的Matrix实例\nvar mat = Matrix(rows: 3, columns: 3)\n\n// 通过下标脚本设置值\nmat[0,0] = 1.0\nmat[0,1] = 2.0\nmat[1,0] = 3.0\nmat[1,1] = 5.0\n\n// 通过下标脚本获取值\nprint(\"\\(mat[0,0])\")\nprint(\"\\(mat[0,1])\")\nprint(\"\\(mat[1,0])\")\nprint(\"\\(mat[1,1])\")\n```\n","source":"_posts/Swift笔记-下标脚本.md","raw":"---\ntitle: Swift笔记-下标脚本\ndate: 2017-06-06 13:24:23\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 语法\n\n定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。\n\n```swift\nsubscript(index: Int) -> Int {\n    get {\n        // 用于下标脚本值的声明\n    }\n    set(newValue) {\n        // 执行赋值操作\n    }\n}\n\n```\n\n<!-- more -->\n\n```swift\nsubscript(index: Int) -> Int {\n    return index*4   // 用于下标脚本值的声明\n}\n```\n\n## 实例\n\n```swift\nimport Cocoa\n\nstruct subexample {\n    let decrementer: Int\n    subscript(index: Int) -> Int {\n        return decrementer / index\n    }\n}\nlet division = subexample(decrementer: 100)\n\nprint(\"100 除以 9 等于 \\(division[9])\")\nprint(\"100 除以 2 等于 \\(division[2])\")\nprint(\"100 除以 3 等于 \\(division[3])\")\nprint(\"100 除以 5 等于 \\(division[5])\")\nprint(\"100 除以 7 等于 \\(division[7])\")\n```\n\n## 实例2\n\n```swift\nimport Cocoa\n\nclass daysofaweek {\n    private var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n        \"Thursday\", \"Friday\", \"saturday\"]\n    subscript(index: Int) -> String {\n        get {\n            return days[index]   // 声明下标脚本的值\n        }\n        set(newValue) {\n            self.days[index] = newValue   // 执行赋值操作\n        }\n    }\n}\nvar p = daysofaweek()\n\nprint(p[0])\nprint(p[1])\nprint(p[2])\nprint(p[3])\n```\n\n\n## 下标脚本选项\n- 下标脚本允许任意数量的入参索引，并且每个入参类型也没有限制。\n- 下标脚本的返回值也可以是任何类型。\n- 下标脚本可以使用变量参数和可变参数。\n\n```swift\nimport Cocoa\n\nstruct Matrix {\n    let rows: Int, columns: Int\n    var print: [Double]\n    init(rows: Int, columns: Int) {\n        self.rows = rows\n        self.columns = columns\n        print = Array(repeating: 0.0, count: rows * columns)\n    }\n    subscript(row: Int, column: Int) -> Double {\n        get {\n            return print[(row * columns) + column]\n        }\n        set {\n            print[(row * columns) + column] = newValue\n        }\n    }\n}\n// 创建了一个新的 3 行 3 列的Matrix实例\nvar mat = Matrix(rows: 3, columns: 3)\n\n// 通过下标脚本设置值\nmat[0,0] = 1.0\nmat[0,1] = 2.0\nmat[1,0] = 3.0\nmat[1,1] = 5.0\n\n// 通过下标脚本获取值\nprint(\"\\(mat[0,0])\")\nprint(\"\\(mat[0,1])\")\nprint(\"\\(mat[1,0])\")\nprint(\"\\(mat[1,1])\")\n```\n","slug":"Swift笔记-下标脚本","published":1,"updated":"2017-08-10T12:01:34.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft40027wou52ka01rtl","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 用于下标脚本值的声明</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">        <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> index*<span class=\"number\">4</span>   <span class=\"comment\">// 用于下标脚本值的声明</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">subexample</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> decrementer: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> decrementer / index</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> division = subexample(decrementer: <span class=\"number\">100</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 9 等于 \\(division[9])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 2 等于 \\(division[2])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 3 等于 \\(division[3])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 5 等于 \\(division[5])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 7 等于 \\(division[7])\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> days = [<span class=\"string\">\"Sunday\"</span>, <span class=\"string\">\"Monday\"</span>, <span class=\"string\">\"Tuesday\"</span>, <span class=\"string\">\"Wednesday\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Thursday\"</span>, <span class=\"string\">\"Friday\"</span>, <span class=\"string\">\"saturday\"</span>]</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> days[index]   <span class=\"comment\">// 声明下标脚本的值</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.days[index] = newValue   <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = daysofaweek()</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">2</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"下标脚本选项\"><a href=\"#下标脚本选项\" class=\"headerlink\" title=\"下标脚本选项\"></a>下标脚本选项</h2><ul>\n<li>下标脚本允许任意数量的入参索引，并且每个入参类型也没有限制。</li>\n<li>下标脚本的返回值也可以是任何类型。</li>\n<li>下标脚本可以使用变量参数和可变参数。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span>: [<span class=\"type\">Double</span>]</div><div class=\"line\">    <span class=\"keyword\">init</span>(rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.rows = rows</div><div class=\"line\">        <span class=\"keyword\">self</span>.columns = columns</div><div class=\"line\">        <span class=\"built_in\">print</span> = <span class=\"type\">Array</span>(repeating: <span class=\"number\">0.0</span>, <span class=\"built_in\">count</span>: rows * columns)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(row: <span class=\"type\">Int</span>, column: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">print</span>[(row * columns) + column]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>[(row * columns) + column] = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 创建了一个新的 3 行 3 列的Matrix实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> mat = <span class=\"type\">Matrix</span>(rows: <span class=\"number\">3</span>, columns: <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过下标脚本设置值</span></div><div class=\"line\">mat[<span class=\"number\">0</span>,<span class=\"number\">0</span>] = <span class=\"number\">1.0</span></div><div class=\"line\">mat[<span class=\"number\">0</span>,<span class=\"number\">1</span>] = <span class=\"number\">2.0</span></div><div class=\"line\">mat[<span class=\"number\">1</span>,<span class=\"number\">0</span>] = <span class=\"number\">3.0</span></div><div class=\"line\">mat[<span class=\"number\">1</span>,<span class=\"number\">1</span>] = <span class=\"number\">5.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过下标脚本获取值</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[0,0])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[0,1])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[1,0])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[1,1])\"</span>)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>定义下标脚本使用subscript关键字，显式声明入参（一个或多个）和返回类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 用于下标脚本值的声明</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">        <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> index*<span class=\"number\">4</span>   <span class=\"comment\">// 用于下标脚本值的声明</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">subexample</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> decrementer: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> decrementer / index</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> division = subexample(decrementer: <span class=\"number\">100</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 9 等于 \\(division[9])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 2 等于 \\(division[2])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 3 等于 \\(division[3])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 5 等于 \\(division[5])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"100 除以 7 等于 \\(division[7])\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">daysofaweek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> days = [<span class=\"string\">\"Sunday\"</span>, <span class=\"string\">\"Monday\"</span>, <span class=\"string\">\"Tuesday\"</span>, <span class=\"string\">\"Wednesday\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Thursday\"</span>, <span class=\"string\">\"Friday\"</span>, <span class=\"string\">\"saturday\"</span>]</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> days[index]   <span class=\"comment\">// 声明下标脚本的值</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.days[index] = newValue   <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = daysofaweek()</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">2</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(p[<span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"下标脚本选项\"><a href=\"#下标脚本选项\" class=\"headerlink\" title=\"下标脚本选项\"></a>下标脚本选项</h2><ul>\n<li>下标脚本允许任意数量的入参索引，并且每个入参类型也没有限制。</li>\n<li>下标脚本的返回值也可以是任何类型。</li>\n<li>下标脚本可以使用变量参数和可变参数。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span>: [<span class=\"type\">Double</span>]</div><div class=\"line\">    <span class=\"keyword\">init</span>(rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.rows = rows</div><div class=\"line\">        <span class=\"keyword\">self</span>.columns = columns</div><div class=\"line\">        <span class=\"built_in\">print</span> = <span class=\"type\">Array</span>(repeating: <span class=\"number\">0.0</span>, <span class=\"built_in\">count</span>: rows * columns)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(row: <span class=\"type\">Int</span>, column: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">print</span>[(row * columns) + column]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>[(row * columns) + column] = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 创建了一个新的 3 行 3 列的Matrix实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> mat = <span class=\"type\">Matrix</span>(rows: <span class=\"number\">3</span>, columns: <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过下标脚本设置值</span></div><div class=\"line\">mat[<span class=\"number\">0</span>,<span class=\"number\">0</span>] = <span class=\"number\">1.0</span></div><div class=\"line\">mat[<span class=\"number\">0</span>,<span class=\"number\">1</span>] = <span class=\"number\">2.0</span></div><div class=\"line\">mat[<span class=\"number\">1</span>,<span class=\"number\">0</span>] = <span class=\"number\">3.0</span></div><div class=\"line\">mat[<span class=\"number\">1</span>,<span class=\"number\">1</span>] = <span class=\"number\">5.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过下标脚本获取值</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[0,0])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[0,1])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[1,0])\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mat[1,1])\"</span>)</div></pre></td></tr></table></figure>"},{"title":"Swift笔记-字符串和字符","date":"2017-06-05T01:50:34.000Z","_content":"\n## 初始化空字符串\n\n```swift\nvar emptyString = \"\"               // 空字符串字面量\nvar anotherEmptyString = String()  // 初始化方法\n// 两个字符串均为空并等价。\n```\n\n判断该字符串是否为空\n```swift\nif emptyString.isEmpty {\n    print(\"Nothing to see here\")\n}\n// 打印输出：\"Nothing to see here\"\n```\n\n<!-- more -->\n\n## 字符串可变性\n\n```swift\nvar variableString = \"Horse\"\nvariableString += \" and carriage\"\n// variableString 现在为 \"Horse and carriage\"\n\nlet constantString = \"Highlander\"\nconstantString += \" and another Highlander\"\n// 这会报告一个编译错误 (compile-time error) - 常量字符串不可以被修改。\n```\n\n## 使用字符\n\n### 遍历字符串中的字符\n```swift\nfor character in \"Dog!🐶\".characters {\n    print(character)\n}\n// D\n// o\n// g\n// !\n// 🐶\n```\n### 声明字符常量\n```swift\nlet exclamationMark: Character = \"!\"\n```\n### 字符数组转字符串\n```swift\nlet catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]\nlet catString = String(catCharacters)\nprint(catString)\n// 打印输出：\"Cat!🐱\"\n```\n\n## 连接字符串和字符\n\n### +\n\n```swift\nlet string1 = \"hello\"\nlet string2 = \" there\"\nvar welcome = string1 + string2\n// welcome 现在等于 \"hello there\"\n```\n\n### +=\n\n```swift\nvar instruction = \"look over\"\ninstruction += string2\n// instruction 现在等于 \"look over there\"\n```\n\n### append()\n\n```swift\nlet exclamationMark: Character = \"!\"\nwelcome.append(exclamationMark)\n// welcome 现在等于 \"hello there!\"\n```\n\n## 字符串插值 \n\n```swift\nlet multiplier = 3\nlet message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"\n// message is \"3 times 2.5 is 7.5\"\n```\n\n## 计算字符数量 (str.count)\n\n```swift\nvar word = \"cafe\"\nprint(\"the number of characters in \\(word) is \\(word.characters.count)\")\n// 打印输出 \"the number of characters in cafe is 4\"\n```\n\n## 访问和修改字符串\n\n### 字符串索引\n\n```swift\nlet greeting = \"Guten Tag!\"\ngreeting[greeting.startIndex]\n// G\ngreeting[greeting.endIndex.predecessor()]\n// !\ngreeting[greeting.startIndex.successor()]\n// u\nlet index = greeting.startIndex.advancedBy(7)\ngreeting[index]\n// a\n```\n\n```swift\nfor index in greeting.characters.indices {\n   print(\"\\(greeting[index]) \", terminator: \" \")\n}\n// 打印输出 \"G u t e n   T a g !\"\n```\n\n### 插入和删除()\n\n调用insert(_:atIndex:)方法可以在一个字符串的指定索引插入一个字符。\n```swift\nvar welcome = \"hello\"\nwelcome.insert(\"!\", atIndex: welcome.endIndex)\n// welcome now 现在等于 \"hello!\"\n```\n调用insertContentsOf(_:at:)方法可以在一个字符串的指定索引插入一个字符串。\n```swift\nwelcome.insertContentsOf(\" there\".characters, at: welcome.endIndex.predecessor())\n// welcome 现在等于 \"hello there!\"\n```\n调用removeAtIndex(_:)方法可以在一个字符串的指定索引删除一个字符。\n```swift\nwelcome.removeAtIndex(welcome.endIndex.predecessor())\n// welcome 现在等于 \"hello there\"\n```\n\n调用removeRange(_:)方法可以在一个字符串的指定索引删除一个子字符串。\n```swift\nlet range = welcome.endIndex.advancedBy(-6)..<welcome.endIndex\nwelcome.removeRange(range)\n// welcome 现在等于 \"hello\"\n```\n\n## 比较字符串\n\n### 字符串/字符相等 (== 和 !=)\n\n```swift\nlet quotation = \"We're a lot alike, you and I.\"\nlet sameQuotation = \"We're a lot alike, you and I.\"\nif quotation == sameQuotation {\n    print(\"These two strings are considered equal\")\n}\n// 打印输出 \"These two strings are considered equal\"\n```\n\n### 前缀/后缀相等\n\n通过调用字符串的hasPrefix(_:)/hasSuffix(_:)方法来检查字符串是否拥有特定前缀/后缀，两个方法均接收一个String类型的参数，并返回一个布尔值。\n\n```swift\nlet romeoAndJuliet = [\n    \"Act 1 Scene 1: Verona, A public place\",\n    \"Act 1 Scene 2: Capulet's mansion\",\n    \"Act 1 Scene 3: A room in Capulet's mansion\",\n    \"Act 1 Scene 4: A street outside Capulet's mansion\",\n    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",\n    \"Act 2 Scene 1: Outside Capulet's mansion\",\n    \"Act 2 Scene 2: Capulet's orchard\",\n    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",\n    \"Act 2 Scene 4: A street in Verona\",\n    \"Act 2 Scene 5: Capulet's mansion\",\n    \"Act 2 Scene 6: Friar Lawrence's cell\"\n]\n```\n\n前缀判断\n```swift\nvar act1SceneCount = 0\nfor scene in romeoAndJuliet {\n    if scene.hasPrefix(\"Act 1 \") {\n        ++act1SceneCount\n    }\n}\nprint(\"There are \\(act1SceneCount) scenes in Act 1\")\n// 打印输出 \"There are 5 scenes in Act 1\"\n```\n后缀判断\n```swift\nvar mansionCount = 0\nvar cellCount = 0\nfor scene in romeoAndJuliet {\n    if scene.hasSuffix(\"Capulet's mansion\") {\n        ++mansionCount\n    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {\n        ++cellCount\n    }\n}\nprint(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")\n// 打印输出 \"6 mansion scenes; 2 cell scenes\"\n```","source":"_posts/Swift笔记-字符串和字符.md","raw":"---\ntitle: Swift笔记-字符串和字符\ndate: 2017-06-05 09:50:34\ntags: \n\t- Swift\ncategories: Swift\n---\n\n## 初始化空字符串\n\n```swift\nvar emptyString = \"\"               // 空字符串字面量\nvar anotherEmptyString = String()  // 初始化方法\n// 两个字符串均为空并等价。\n```\n\n判断该字符串是否为空\n```swift\nif emptyString.isEmpty {\n    print(\"Nothing to see here\")\n}\n// 打印输出：\"Nothing to see here\"\n```\n\n<!-- more -->\n\n## 字符串可变性\n\n```swift\nvar variableString = \"Horse\"\nvariableString += \" and carriage\"\n// variableString 现在为 \"Horse and carriage\"\n\nlet constantString = \"Highlander\"\nconstantString += \" and another Highlander\"\n// 这会报告一个编译错误 (compile-time error) - 常量字符串不可以被修改。\n```\n\n## 使用字符\n\n### 遍历字符串中的字符\n```swift\nfor character in \"Dog!🐶\".characters {\n    print(character)\n}\n// D\n// o\n// g\n// !\n// 🐶\n```\n### 声明字符常量\n```swift\nlet exclamationMark: Character = \"!\"\n```\n### 字符数组转字符串\n```swift\nlet catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]\nlet catString = String(catCharacters)\nprint(catString)\n// 打印输出：\"Cat!🐱\"\n```\n\n## 连接字符串和字符\n\n### +\n\n```swift\nlet string1 = \"hello\"\nlet string2 = \" there\"\nvar welcome = string1 + string2\n// welcome 现在等于 \"hello there\"\n```\n\n### +=\n\n```swift\nvar instruction = \"look over\"\ninstruction += string2\n// instruction 现在等于 \"look over there\"\n```\n\n### append()\n\n```swift\nlet exclamationMark: Character = \"!\"\nwelcome.append(exclamationMark)\n// welcome 现在等于 \"hello there!\"\n```\n\n## 字符串插值 \n\n```swift\nlet multiplier = 3\nlet message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"\n// message is \"3 times 2.5 is 7.5\"\n```\n\n## 计算字符数量 (str.count)\n\n```swift\nvar word = \"cafe\"\nprint(\"the number of characters in \\(word) is \\(word.characters.count)\")\n// 打印输出 \"the number of characters in cafe is 4\"\n```\n\n## 访问和修改字符串\n\n### 字符串索引\n\n```swift\nlet greeting = \"Guten Tag!\"\ngreeting[greeting.startIndex]\n// G\ngreeting[greeting.endIndex.predecessor()]\n// !\ngreeting[greeting.startIndex.successor()]\n// u\nlet index = greeting.startIndex.advancedBy(7)\ngreeting[index]\n// a\n```\n\n```swift\nfor index in greeting.characters.indices {\n   print(\"\\(greeting[index]) \", terminator: \" \")\n}\n// 打印输出 \"G u t e n   T a g !\"\n```\n\n### 插入和删除()\n\n调用insert(_:atIndex:)方法可以在一个字符串的指定索引插入一个字符。\n```swift\nvar welcome = \"hello\"\nwelcome.insert(\"!\", atIndex: welcome.endIndex)\n// welcome now 现在等于 \"hello!\"\n```\n调用insertContentsOf(_:at:)方法可以在一个字符串的指定索引插入一个字符串。\n```swift\nwelcome.insertContentsOf(\" there\".characters, at: welcome.endIndex.predecessor())\n// welcome 现在等于 \"hello there!\"\n```\n调用removeAtIndex(_:)方法可以在一个字符串的指定索引删除一个字符。\n```swift\nwelcome.removeAtIndex(welcome.endIndex.predecessor())\n// welcome 现在等于 \"hello there\"\n```\n\n调用removeRange(_:)方法可以在一个字符串的指定索引删除一个子字符串。\n```swift\nlet range = welcome.endIndex.advancedBy(-6)..<welcome.endIndex\nwelcome.removeRange(range)\n// welcome 现在等于 \"hello\"\n```\n\n## 比较字符串\n\n### 字符串/字符相等 (== 和 !=)\n\n```swift\nlet quotation = \"We're a lot alike, you and I.\"\nlet sameQuotation = \"We're a lot alike, you and I.\"\nif quotation == sameQuotation {\n    print(\"These two strings are considered equal\")\n}\n// 打印输出 \"These two strings are considered equal\"\n```\n\n### 前缀/后缀相等\n\n通过调用字符串的hasPrefix(_:)/hasSuffix(_:)方法来检查字符串是否拥有特定前缀/后缀，两个方法均接收一个String类型的参数，并返回一个布尔值。\n\n```swift\nlet romeoAndJuliet = [\n    \"Act 1 Scene 1: Verona, A public place\",\n    \"Act 1 Scene 2: Capulet's mansion\",\n    \"Act 1 Scene 3: A room in Capulet's mansion\",\n    \"Act 1 Scene 4: A street outside Capulet's mansion\",\n    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",\n    \"Act 2 Scene 1: Outside Capulet's mansion\",\n    \"Act 2 Scene 2: Capulet's orchard\",\n    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",\n    \"Act 2 Scene 4: A street in Verona\",\n    \"Act 2 Scene 5: Capulet's mansion\",\n    \"Act 2 Scene 6: Friar Lawrence's cell\"\n]\n```\n\n前缀判断\n```swift\nvar act1SceneCount = 0\nfor scene in romeoAndJuliet {\n    if scene.hasPrefix(\"Act 1 \") {\n        ++act1SceneCount\n    }\n}\nprint(\"There are \\(act1SceneCount) scenes in Act 1\")\n// 打印输出 \"There are 5 scenes in Act 1\"\n```\n后缀判断\n```swift\nvar mansionCount = 0\nvar cellCount = 0\nfor scene in romeoAndJuliet {\n    if scene.hasSuffix(\"Capulet's mansion\") {\n        ++mansionCount\n    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {\n        ++cellCount\n    }\n}\nprint(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")\n// 打印输出 \"6 mansion scenes; 2 cell scenes\"\n```","slug":"Swift笔记-字符串和字符","published":1,"updated":"2017-08-10T12:01:34.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft5002awou5proqcwuw","content":"<h2 id=\"初始化空字符串\"><a href=\"#初始化空字符串\" class=\"headerlink\" title=\"初始化空字符串\"></a>初始化空字符串</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> emptyString = <span class=\"string\">\"\"</span>               <span class=\"comment\">// 空字符串字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherEmptyString = <span class=\"type\">String</span>()  <span class=\"comment\">// 初始化方法</span></div><div class=\"line\"><span class=\"comment\">// 两个字符串均为空并等价。</span></div></pre></td></tr></table></figure>\n<p>判断该字符串是否为空<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> emptyString.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Nothing to see here\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Nothing to see here\"</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"字符串可变性\"><a href=\"#字符串可变性\" class=\"headerlink\" title=\"字符串可变性\"></a>字符串可变性</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> variableString = <span class=\"string\">\"Horse\"</span></div><div class=\"line\">variableString += <span class=\"string\">\" and carriage\"</span></div><div class=\"line\"><span class=\"comment\">// variableString 现在为 \"Horse and carriage\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> constantString = <span class=\"string\">\"Highlander\"</span></div><div class=\"line\">constantString += <span class=\"string\">\" and another Highlander\"</span></div><div class=\"line\"><span class=\"comment\">// 这会报告一个编译错误 (compile-time error) - 常量字符串不可以被修改。</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用字符\"><a href=\"#使用字符\" class=\"headerlink\" title=\"使用字符\"></a>使用字符</h2><h3 id=\"遍历字符串中的字符\"><a href=\"#遍历字符串中的字符\" class=\"headerlink\" title=\"遍历字符串中的字符\"></a>遍历字符串中的字符</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"string\">\"Dog!🐶\"</span>.characters &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(character)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// D</span></div><div class=\"line\"><span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"comment\">// g</span></div><div class=\"line\"><span class=\"comment\">// !</span></div><div class=\"line\"><span class=\"comment\">// 🐶</span></div></pre></td></tr></table></figure>\n<h3 id=\"声明字符常量\"><a href=\"#声明字符常量\" class=\"headerlink\" title=\"声明字符常量\"></a>声明字符常量</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> exclamationMark: <span class=\"type\">Character</span> = <span class=\"string\">\"!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符数组转字符串\"><a href=\"#字符数组转字符串\" class=\"headerlink\" title=\"字符数组转字符串\"></a>字符数组转字符串</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> catCharacters: [<span class=\"type\">Character</span>] = [<span class=\"string\">\"C\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"🐱\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> catString = <span class=\"type\">String</span>(catCharacters)</div><div class=\"line\"><span class=\"built_in\">print</span>(catString)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Cat!🐱\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"连接字符串和字符\"><a href=\"#连接字符串和字符\" class=\"headerlink\" title=\"连接字符串和字符\"></a>连接字符串和字符</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> string1 = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> string2 = <span class=\"string\">\" there\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> welcome = string1 + string2</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"+=\"></a>+=</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instruction = <span class=\"string\">\"look over\"</span></div><div class=\"line\">instruction += string2</div><div class=\"line\"><span class=\"comment\">// instruction 现在等于 \"look over there\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append()\"></a>append()</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> exclamationMark: <span class=\"type\">Character</span> = <span class=\"string\">\"!\"</span></div><div class=\"line\">welcome.append(exclamationMark)</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> multiplier = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">\"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"</span></div><div class=\"line\"><span class=\"comment\">// message is \"3 times 2.5 is 7.5\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"计算字符数量-str-count\"><a href=\"#计算字符数量-str-count\" class=\"headerlink\" title=\"计算字符数量 (str.count)\"></a>计算字符数量 (str.count)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> word = <span class=\"string\">\"cafe\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"the number of characters in \\(word) is \\(word.characters.count)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"the number of characters in cafe is 4\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"访问和修改字符串\"><a href=\"#访问和修改字符串\" class=\"headerlink\" title=\"访问和修改字符串\"></a>访问和修改字符串</h2><h3 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a>字符串索引</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">\"Guten Tag!\"</span></div><div class=\"line\">greeting[greeting.startIndex]</div><div class=\"line\"><span class=\"comment\">// G</span></div><div class=\"line\">greeting[greeting.endIndex.predecessor()]</div><div class=\"line\"><span class=\"comment\">// !</span></div><div class=\"line\">greeting[greeting.startIndex.successor()]</div><div class=\"line\"><span class=\"comment\">// u</span></div><div class=\"line\"><span class=\"keyword\">let</span> index = greeting.startIndex.advancedBy(<span class=\"number\">7</span>)</div><div class=\"line\">greeting[index]</div><div class=\"line\"><span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> greeting.characters.<span class=\"built_in\">indices</span> &#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(greeting[index]) \"</span>, terminator: <span class=\"string\">\" \"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"G u t e n   T a g !\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"插入和删除\"><a href=\"#插入和删除\" class=\"headerlink\" title=\"插入和删除()\"></a>插入和删除()</h3><p>调用insert(_:atIndex:)方法可以在一个字符串的指定索引插入一个字符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> welcome = <span class=\"string\">\"hello\"</span></div><div class=\"line\">welcome.insert(<span class=\"string\">\"!\"</span>, atIndex: welcome.endIndex)</div><div class=\"line\"><span class=\"comment\">// welcome now 现在等于 \"hello!\"</span></div></pre></td></tr></table></figure></p>\n<p>调用insertContentsOf(_:at:)方法可以在一个字符串的指定索引插入一个字符串。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">welcome.insertContentsOf(<span class=\"string\">\" there\"</span>.characters, at: welcome.endIndex.predecessor())</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there!\"</span></div></pre></td></tr></table></figure></p>\n<p>调用removeAtIndex(_:)方法可以在一个字符串的指定索引删除一个字符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">welcome.removeAtIndex(welcome.endIndex.predecessor())</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there\"</span></div></pre></td></tr></table></figure></p>\n<p>调用removeRange(_:)方法可以在一个字符串的指定索引删除一个子字符串。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> range = welcome.endIndex.advancedBy(-<span class=\"number\">6</span>)..&lt;welcome.endIndex</div><div class=\"line\">welcome.removeRange(range)</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"比较字符串\"><a href=\"#比较字符串\" class=\"headerlink\" title=\"比较字符串\"></a>比较字符串</h2><h3 id=\"字符串-字符相等-和\"><a href=\"#字符串-字符相等-和\" class=\"headerlink\" title=\"字符串/字符相等 (== 和 !=)\"></a>字符串/字符相等 (== 和 !=)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> quotation = <span class=\"string\">\"We're a lot alike, you and I.\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> sameQuotation = <span class=\"string\">\"We're a lot alike, you and I.\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> quotation == sameQuotation &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"These two strings are considered equal\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"These two strings are considered equal\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"前缀-后缀相等\"><a href=\"#前缀-后缀相等\" class=\"headerlink\" title=\"前缀/后缀相等\"></a>前缀/后缀相等</h3><p>通过调用字符串的hasPrefix(<em>:)/hasSuffix(</em>:)方法来检查字符串是否拥有特定前缀/后缀，两个方法均接收一个String类型的参数，并返回一个布尔值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> romeoAndJuliet = [</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 1: Verona, A public place\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 2: Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 3: A room in Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 4: A street outside Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 5: The Great Hall in Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 1: Outside Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 2: Capulet's orchard\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 3: Outside Friar Lawrence's cell\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 4: A street in Verona\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 5: Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 6: Friar Lawrence's cell\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>前缀判断<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> act1SceneCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> scene <span class=\"keyword\">in</span> romeoAndJuliet &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> scene.hasPrefix(<span class=\"string\">\"Act 1 \"</span>) &#123;</div><div class=\"line\">        ++act1SceneCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(act1SceneCount) scenes in Act 1\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"There are 5 scenes in Act 1\"</span></div></pre></td></tr></table></figure></p>\n<p>后缀判断<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mansionCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> cellCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> scene <span class=\"keyword\">in</span> romeoAndJuliet &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> scene.hasSuffix(<span class=\"string\">\"Capulet's mansion\"</span>) &#123;</div><div class=\"line\">        ++mansionCount</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scene.hasSuffix(<span class=\"string\">\"Friar Lawrence's cell\"</span>) &#123;</div><div class=\"line\">        ++cellCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"6 mansion scenes; 2 cell scenes\"</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"初始化空字符串\"><a href=\"#初始化空字符串\" class=\"headerlink\" title=\"初始化空字符串\"></a>初始化空字符串</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> emptyString = <span class=\"string\">\"\"</span>               <span class=\"comment\">// 空字符串字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherEmptyString = <span class=\"type\">String</span>()  <span class=\"comment\">// 初始化方法</span></div><div class=\"line\"><span class=\"comment\">// 两个字符串均为空并等价。</span></div></pre></td></tr></table></figure>\n<p>判断该字符串是否为空<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> emptyString.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Nothing to see here\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Nothing to see here\"</span></div></pre></td></tr></table></figure></p>","more":"<h2 id=\"字符串可变性\"><a href=\"#字符串可变性\" class=\"headerlink\" title=\"字符串可变性\"></a>字符串可变性</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> variableString = <span class=\"string\">\"Horse\"</span></div><div class=\"line\">variableString += <span class=\"string\">\" and carriage\"</span></div><div class=\"line\"><span class=\"comment\">// variableString 现在为 \"Horse and carriage\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> constantString = <span class=\"string\">\"Highlander\"</span></div><div class=\"line\">constantString += <span class=\"string\">\" and another Highlander\"</span></div><div class=\"line\"><span class=\"comment\">// 这会报告一个编译错误 (compile-time error) - 常量字符串不可以被修改。</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用字符\"><a href=\"#使用字符\" class=\"headerlink\" title=\"使用字符\"></a>使用字符</h2><h3 id=\"遍历字符串中的字符\"><a href=\"#遍历字符串中的字符\" class=\"headerlink\" title=\"遍历字符串中的字符\"></a>遍历字符串中的字符</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"string\">\"Dog!🐶\"</span>.characters &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(character)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// D</span></div><div class=\"line\"><span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"comment\">// g</span></div><div class=\"line\"><span class=\"comment\">// !</span></div><div class=\"line\"><span class=\"comment\">// 🐶</span></div></pre></td></tr></table></figure>\n<h3 id=\"声明字符常量\"><a href=\"#声明字符常量\" class=\"headerlink\" title=\"声明字符常量\"></a>声明字符常量</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> exclamationMark: <span class=\"type\">Character</span> = <span class=\"string\">\"!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符数组转字符串\"><a href=\"#字符数组转字符串\" class=\"headerlink\" title=\"字符数组转字符串\"></a>字符数组转字符串</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> catCharacters: [<span class=\"type\">Character</span>] = [<span class=\"string\">\"C\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"🐱\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> catString = <span class=\"type\">String</span>(catCharacters)</div><div class=\"line\"><span class=\"built_in\">print</span>(catString)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Cat!🐱\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"连接字符串和字符\"><a href=\"#连接字符串和字符\" class=\"headerlink\" title=\"连接字符串和字符\"></a>连接字符串和字符</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> string1 = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> string2 = <span class=\"string\">\" there\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> welcome = string1 + string2</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"+=\"></a>+=</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instruction = <span class=\"string\">\"look over\"</span></div><div class=\"line\">instruction += string2</div><div class=\"line\"><span class=\"comment\">// instruction 现在等于 \"look over there\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append()\"></a>append()</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> exclamationMark: <span class=\"type\">Character</span> = <span class=\"string\">\"!\"</span></div><div class=\"line\">welcome.append(exclamationMark)</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> multiplier = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">\"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"</span></div><div class=\"line\"><span class=\"comment\">// message is \"3 times 2.5 is 7.5\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"计算字符数量-str-count\"><a href=\"#计算字符数量-str-count\" class=\"headerlink\" title=\"计算字符数量 (str.count)\"></a>计算字符数量 (str.count)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> word = <span class=\"string\">\"cafe\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"the number of characters in \\(word) is \\(word.characters.count)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"the number of characters in cafe is 4\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"访问和修改字符串\"><a href=\"#访问和修改字符串\" class=\"headerlink\" title=\"访问和修改字符串\"></a>访问和修改字符串</h2><h3 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a>字符串索引</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">\"Guten Tag!\"</span></div><div class=\"line\">greeting[greeting.startIndex]</div><div class=\"line\"><span class=\"comment\">// G</span></div><div class=\"line\">greeting[greeting.endIndex.predecessor()]</div><div class=\"line\"><span class=\"comment\">// !</span></div><div class=\"line\">greeting[greeting.startIndex.successor()]</div><div class=\"line\"><span class=\"comment\">// u</span></div><div class=\"line\"><span class=\"keyword\">let</span> index = greeting.startIndex.advancedBy(<span class=\"number\">7</span>)</div><div class=\"line\">greeting[index]</div><div class=\"line\"><span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> greeting.characters.<span class=\"built_in\">indices</span> &#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(greeting[index]) \"</span>, terminator: <span class=\"string\">\" \"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"G u t e n   T a g !\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"插入和删除\"><a href=\"#插入和删除\" class=\"headerlink\" title=\"插入和删除()\"></a>插入和删除()</h3><p>调用insert(_:atIndex:)方法可以在一个字符串的指定索引插入一个字符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> welcome = <span class=\"string\">\"hello\"</span></div><div class=\"line\">welcome.insert(<span class=\"string\">\"!\"</span>, atIndex: welcome.endIndex)</div><div class=\"line\"><span class=\"comment\">// welcome now 现在等于 \"hello!\"</span></div></pre></td></tr></table></figure></p>\n<p>调用insertContentsOf(_:at:)方法可以在一个字符串的指定索引插入一个字符串。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">welcome.insertContentsOf(<span class=\"string\">\" there\"</span>.characters, at: welcome.endIndex.predecessor())</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there!\"</span></div></pre></td></tr></table></figure></p>\n<p>调用removeAtIndex(_:)方法可以在一个字符串的指定索引删除一个字符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">welcome.removeAtIndex(welcome.endIndex.predecessor())</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello there\"</span></div></pre></td></tr></table></figure></p>\n<p>调用removeRange(_:)方法可以在一个字符串的指定索引删除一个子字符串。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> range = welcome.endIndex.advancedBy(-<span class=\"number\">6</span>)..&lt;welcome.endIndex</div><div class=\"line\">welcome.removeRange(range)</div><div class=\"line\"><span class=\"comment\">// welcome 现在等于 \"hello\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"比较字符串\"><a href=\"#比较字符串\" class=\"headerlink\" title=\"比较字符串\"></a>比较字符串</h2><h3 id=\"字符串-字符相等-和\"><a href=\"#字符串-字符相等-和\" class=\"headerlink\" title=\"字符串/字符相等 (== 和 !=)\"></a>字符串/字符相等 (== 和 !=)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> quotation = <span class=\"string\">\"We're a lot alike, you and I.\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> sameQuotation = <span class=\"string\">\"We're a lot alike, you and I.\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> quotation == sameQuotation &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"These two strings are considered equal\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"These two strings are considered equal\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"前缀-后缀相等\"><a href=\"#前缀-后缀相等\" class=\"headerlink\" title=\"前缀/后缀相等\"></a>前缀/后缀相等</h3><p>通过调用字符串的hasPrefix(<em>:)/hasSuffix(</em>:)方法来检查字符串是否拥有特定前缀/后缀，两个方法均接收一个String类型的参数，并返回一个布尔值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> romeoAndJuliet = [</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 1: Verona, A public place\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 2: Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 3: A room in Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 4: A street outside Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 1 Scene 5: The Great Hall in Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 1: Outside Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 2: Capulet's orchard\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 3: Outside Friar Lawrence's cell\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 4: A street in Verona\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 5: Capulet's mansion\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Act 2 Scene 6: Friar Lawrence's cell\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>前缀判断<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> act1SceneCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> scene <span class=\"keyword\">in</span> romeoAndJuliet &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> scene.hasPrefix(<span class=\"string\">\"Act 1 \"</span>) &#123;</div><div class=\"line\">        ++act1SceneCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(act1SceneCount) scenes in Act 1\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"There are 5 scenes in Act 1\"</span></div></pre></td></tr></table></figure></p>\n<p>后缀判断<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mansionCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> cellCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> scene <span class=\"keyword\">in</span> romeoAndJuliet &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> scene.hasSuffix(<span class=\"string\">\"Capulet's mansion\"</span>) &#123;</div><div class=\"line\">        ++mansionCount</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> scene.hasSuffix(<span class=\"string\">\"Friar Lawrence's cell\"</span>) &#123;</div><div class=\"line\">        ++cellCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出 \"6 mansion scenes; 2 cell scenes\"</span></div></pre></td></tr></table></figure></p>"},{"title":"Swift笔记-基础部分","date":"2017-06-02T08:18:33.000Z","_content":"\n## 常量和变量\n\n1. 变量\n\n```swift\n//变量声明\nvar x = 1\n\n//声明多个变量\nvar x = 1, y = 2\n\n//带类型声明\nvar msg: String\n//变量赋值\nmsg = \"Hello\"\n```\n\n2. 常量\n\n```swift\n//声明常量\nlet pi = 3.14159\n```\n\n<!-- more -->\n\n## 注释\n\n1. 单行注释\n\n```\n//xxx\n```\n\n2. 多行注释\n\n```\n/*\nxxx\nxxx\n*/\n```\n\n## 基础数据类型\n\n1. 整数 \n\n（1）Int ：有符号整数\n\n- 在32位平台上，Int和Int32长度相同。\n- 在64位平台上，Int和Int64长度相同。\n\n（2）UInt : 无符号整数\n\n- 在32位平台上，UInt和UInt32长度相同。\n- 在64位平台上，UInt和UInt64长度相同。\n\n推荐使用Int，提高代码的可复用性。\n\n\n\n2. 浮点数\n\nDouble ： 64位浮点数\nFloat ： 32位浮点数\n\n**注意**：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。\n\n3. 布尔类型\n\nBool\n\n```swift\nlet a = true\n\nlet b = false\n```\n\n\n## 进制\n\n- 一个十进制数，没有前缀\n- 一个二进制数，前缀是0b\n- 一个八进制数，前缀是0o\n- 一个十六进制数，前缀是0x\n\n```swift\nlet decimalInteger = 17 \nlet binaryInteger = 0b10001       // 二进制的17 \nlet octalInteger = 0o21           // 八进制的17 \nlet hexadecimalInteger = 0x11     // 十六进制的17 \n```\n\n如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：\n \n1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。\n1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。\n \n如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：\n \n0xFp2 表示 $15 × 2^{2}$，等于 60.0。\n0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。\n\n\n## 类型转换\n\n1. 整数转换\n\n```swift\n// 下划线用来增加可读性，不会影响值\nlet twoThousand: UInt16 = 2_000 \nlet one: UInt8 = 1 \n// 将UInt8转换成UInt16再相加\nlet twoThousandAndOne = twoThousand + UInt16(one) \n```\n\n2. 浮点数转换\n\n（1）整数->浮点数\n\n```swift\nlet three = 3\nlet t = Double(three)\n```\n\n（2）浮点数->整数\n\n```swift\nlet d = 0.123\nlet i = Int(d) // i = 0\n```\n\n## 类型别名\n\n```swift\ntypealias AudioSample = UInt16\n\n```\n\n## 元组\n\n元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。\n\n\n```swift\nlet http404Error = (404, \"Not Found\") \n// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\") \n```\n你可以将一个元组的内容分解（decompose）成单独的常量和变量\n```swift\nlet (statusCode, statusMessage) = http404Error \nprintln(\"The status code is \\(statusCode)\") \n// 输出 \"The status code is 404\" \nprintln(\"The status message is \\(statusMessage)\") \n// 输出 \"The status message is Not Found\" \n```\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记\n```swift\nlet (justTheStatusCode, _) = http404Error \nprintln(\"The status code is \\(justTheStatusCode)\") \n// 输出 \"The status code is 404\" \n```\n你还可以通过下标来访问元组中的单个元素，下标从零开始\n```swift\nprintln(\"The status code is \\(http404Error.0)\") \n// 输出 \"The status code is 404\" \nprintln(\"The status message is \\(http404Error.1)\") \n// 输出 \"The status message is Not Found\" \n```\n你可以在定义元组的时候给单个元素命名\n```swift\nlet http200Status = (statusCode: 200, description: \"OK\") \nprintln(\"The status code is \\(http200Status.statusCode)\") \n// 输出 \"The status code is 200\" \nprintln(\"The status message is \\(http200Status.description)\") \n// 输出 \"The status message is OK\" \n\n\n```\n\n\n## 可选 （?）\n\n可选表示：\n \n**有值，等于 x**   或者   **没有值**\n\n\"Int?\"表示可选的Int\n\n```swift\nlet possibleNumber = \"123\" \nlet convertedNumber = possibleNumber.toInt() \n// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n```\n判断可选是否有值\n```swift\nif let actualNumber = possibleNumber.toInt() { \n    println(\"\\(possibleNumber) has an integer value of \\(actualNumber)\") \n} else { \n    println(\"\\(possibleNumber) could not be converted to an integer\") \n} \n// 输出 \"123 has an integer value of 123\" \n\n```\n\n### 隐式解析可选 （!）\n\n```swift\nlet possibleString: String? = \"An optional string.\" \nprintln(possibleString!) // 需要惊叹号来获取值 \n// 输出 \"An optional string.\" \n \nlet assumedString: String! = \"An implicitly unwrapped optional string.\" \nprintln(assumedString)  // 不需要感叹号 \n// 输出 \"An implicitly unwrapped optional string.\" \n```\n\n**注意**：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。\n\n## nil\n\n可以给可选变量赋值为nil来表示它没有值\n\n```swift\nvar serverResponseCode: Int? = 404 \n// serverResponseCode 包含一个可选的 Int 值 404 \nserverResponseCode = nil \n// serverResponseCode 现在不包含值 \n```\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：\n```swift\nvar surveyAnswer: String? \n// surveyAnswer 被自动设置为 nil \n\n```\n## 异常处理\n\nthrows 抛出异常\n\ntry method 抓取并执行可能抛出异常的方法\n\ndo {try ...} catch ErrorType {...处理} 处理异常\n\n```swift\nfunc makeASandwich() throws {\n    // ...\n}\n\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch Error.OutOfCleanDishes {\n    washDishes()\n} catch Error.MissingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n\n\n## 断言 （assert）\n\n```swift\nlet age = -3 \nassert(age >= 0, \"A person's age cannot be less than zero\") \n// 因为 age < 0，所以断言会触发 \n```\n\n何时使用断言\n当条件可能为假时使用断言，但是最终一定要保证条件为真，这样你的代码才能继续运行。\n\n断言的适用情景：\n \n- 整数的附属脚本索引被传入一个自定义附属脚本实现，但是下标索引值可能太小或者太大。\n- 需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。\n- 一个可选值现在是nil，但是后面的代码运行需要一个非nil值。","source":"_posts/Swift笔记-基础部分.md","raw":"---\ntitle: Swift笔记-基础部分\ndate: 2017-06-02 16:18:33\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 常量和变量\n\n1. 变量\n\n```swift\n//变量声明\nvar x = 1\n\n//声明多个变量\nvar x = 1, y = 2\n\n//带类型声明\nvar msg: String\n//变量赋值\nmsg = \"Hello\"\n```\n\n2. 常量\n\n```swift\n//声明常量\nlet pi = 3.14159\n```\n\n<!-- more -->\n\n## 注释\n\n1. 单行注释\n\n```\n//xxx\n```\n\n2. 多行注释\n\n```\n/*\nxxx\nxxx\n*/\n```\n\n## 基础数据类型\n\n1. 整数 \n\n（1）Int ：有符号整数\n\n- 在32位平台上，Int和Int32长度相同。\n- 在64位平台上，Int和Int64长度相同。\n\n（2）UInt : 无符号整数\n\n- 在32位平台上，UInt和UInt32长度相同。\n- 在64位平台上，UInt和UInt64长度相同。\n\n推荐使用Int，提高代码的可复用性。\n\n\n\n2. 浮点数\n\nDouble ： 64位浮点数\nFloat ： 32位浮点数\n\n**注意**：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。\n\n3. 布尔类型\n\nBool\n\n```swift\nlet a = true\n\nlet b = false\n```\n\n\n## 进制\n\n- 一个十进制数，没有前缀\n- 一个二进制数，前缀是0b\n- 一个八进制数，前缀是0o\n- 一个十六进制数，前缀是0x\n\n```swift\nlet decimalInteger = 17 \nlet binaryInteger = 0b10001       // 二进制的17 \nlet octalInteger = 0o21           // 八进制的17 \nlet hexadecimalInteger = 0x11     // 十六进制的17 \n```\n\n如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：\n \n1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。\n1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。\n \n如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：\n \n0xFp2 表示 $15 × 2^{2}$，等于 60.0。\n0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。\n\n\n## 类型转换\n\n1. 整数转换\n\n```swift\n// 下划线用来增加可读性，不会影响值\nlet twoThousand: UInt16 = 2_000 \nlet one: UInt8 = 1 \n// 将UInt8转换成UInt16再相加\nlet twoThousandAndOne = twoThousand + UInt16(one) \n```\n\n2. 浮点数转换\n\n（1）整数->浮点数\n\n```swift\nlet three = 3\nlet t = Double(three)\n```\n\n（2）浮点数->整数\n\n```swift\nlet d = 0.123\nlet i = Int(d) // i = 0\n```\n\n## 类型别名\n\n```swift\ntypealias AudioSample = UInt16\n\n```\n\n## 元组\n\n元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。\n\n\n```swift\nlet http404Error = (404, \"Not Found\") \n// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\") \n```\n你可以将一个元组的内容分解（decompose）成单独的常量和变量\n```swift\nlet (statusCode, statusMessage) = http404Error \nprintln(\"The status code is \\(statusCode)\") \n// 输出 \"The status code is 404\" \nprintln(\"The status message is \\(statusMessage)\") \n// 输出 \"The status message is Not Found\" \n```\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记\n```swift\nlet (justTheStatusCode, _) = http404Error \nprintln(\"The status code is \\(justTheStatusCode)\") \n// 输出 \"The status code is 404\" \n```\n你还可以通过下标来访问元组中的单个元素，下标从零开始\n```swift\nprintln(\"The status code is \\(http404Error.0)\") \n// 输出 \"The status code is 404\" \nprintln(\"The status message is \\(http404Error.1)\") \n// 输出 \"The status message is Not Found\" \n```\n你可以在定义元组的时候给单个元素命名\n```swift\nlet http200Status = (statusCode: 200, description: \"OK\") \nprintln(\"The status code is \\(http200Status.statusCode)\") \n// 输出 \"The status code is 200\" \nprintln(\"The status message is \\(http200Status.description)\") \n// 输出 \"The status message is OK\" \n\n\n```\n\n\n## 可选 （?）\n\n可选表示：\n \n**有值，等于 x**   或者   **没有值**\n\n\"Int?\"表示可选的Int\n\n```swift\nlet possibleNumber = \"123\" \nlet convertedNumber = possibleNumber.toInt() \n// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n```\n判断可选是否有值\n```swift\nif let actualNumber = possibleNumber.toInt() { \n    println(\"\\(possibleNumber) has an integer value of \\(actualNumber)\") \n} else { \n    println(\"\\(possibleNumber) could not be converted to an integer\") \n} \n// 输出 \"123 has an integer value of 123\" \n\n```\n\n### 隐式解析可选 （!）\n\n```swift\nlet possibleString: String? = \"An optional string.\" \nprintln(possibleString!) // 需要惊叹号来获取值 \n// 输出 \"An optional string.\" \n \nlet assumedString: String! = \"An implicitly unwrapped optional string.\" \nprintln(assumedString)  // 不需要感叹号 \n// 输出 \"An implicitly unwrapped optional string.\" \n```\n\n**注意**：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。\n\n## nil\n\n可以给可选变量赋值为nil来表示它没有值\n\n```swift\nvar serverResponseCode: Int? = 404 \n// serverResponseCode 包含一个可选的 Int 值 404 \nserverResponseCode = nil \n// serverResponseCode 现在不包含值 \n```\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：\n```swift\nvar surveyAnswer: String? \n// surveyAnswer 被自动设置为 nil \n\n```\n## 异常处理\n\nthrows 抛出异常\n\ntry method 抓取并执行可能抛出异常的方法\n\ndo {try ...} catch ErrorType {...处理} 处理异常\n\n```swift\nfunc makeASandwich() throws {\n    // ...\n}\n\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch Error.OutOfCleanDishes {\n    washDishes()\n} catch Error.MissingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n\n\n## 断言 （assert）\n\n```swift\nlet age = -3 \nassert(age >= 0, \"A person's age cannot be less than zero\") \n// 因为 age < 0，所以断言会触发 \n```\n\n何时使用断言\n当条件可能为假时使用断言，但是最终一定要保证条件为真，这样你的代码才能继续运行。\n\n断言的适用情景：\n \n- 整数的附属脚本索引被传入一个自定义附属脚本实现，但是下标索引值可能太小或者太大。\n- 需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。\n- 一个可选值现在是nil，但是后面的代码运行需要一个非nil值。","slug":"Swift笔记-基础部分","published":1,"updated":"2017-08-10T12:01:34.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft7002cwou552ox5iwr","content":"<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><ol>\n<li>变量</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//变量声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明多个变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//带类型声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> msg: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"comment\">//变量赋值</span></div><div class=\"line\">msg = <span class=\"string\">\"Hello\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>常量</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明常量</span></div><div class=\"line\"><span class=\"keyword\">let</span> pi = <span class=\"number\">3.14159</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ol>\n<li>单行注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//xxx</div></pre></td></tr></table></figure>\n<ol>\n<li>多行注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\">xxx</div><div class=\"line\">xxx</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><ol>\n<li>整数 </li>\n</ol>\n<p>（1）Int ：有符号整数</p>\n<ul>\n<li>在32位平台上，Int和Int32长度相同。</li>\n<li>在64位平台上，Int和Int64长度相同。</li>\n</ul>\n<p>（2）UInt : 无符号整数</p>\n<ul>\n<li>在32位平台上，UInt和UInt32长度相同。</li>\n<li>在64位平台上，UInt和UInt64长度相同。</li>\n</ul>\n<p>推荐使用Int，提高代码的可复用性。</p>\n<ol>\n<li>浮点数</li>\n</ol>\n<p>Double ： 64位浮点数<br>Float ： 32位浮点数</p>\n<p><strong>注意</strong>：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。</p>\n<ol>\n<li>布尔类型</li>\n</ol>\n<p>Bool</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是0b</li>\n<li>一个八进制数，前缀是0o</li>\n<li>一个十六进制数，前缀是0x</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalInteger = <span class=\"number\">17</span> </div><div class=\"line\"><span class=\"keyword\">let</span> binaryInteger = <span class=\"number\">0b10001</span>       <span class=\"comment\">// 二进制的17 </span></div><div class=\"line\"><span class=\"keyword\">let</span> octalInteger = <span class=\"number\">0o21</span>           <span class=\"comment\">// 八进制的17 </span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger = <span class=\"number\">0x11</span>     <span class=\"comment\">// 十六进制的17</span></div></pre></td></tr></table></figure>\n<p>如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：</p>\n<p>1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。<br>1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。</p>\n<p>如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：</p>\n<p>0xFp2 表示 $15 × 2^{2}$，等于 60.0。<br>0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li>整数转换</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下划线用来增加可读性，不会影响值</span></div><div class=\"line\"><span class=\"keyword\">let</span> twoThousand: <span class=\"type\">UInt16</span> = <span class=\"number\">2_000</span> </div><div class=\"line\"><span class=\"keyword\">let</span> one: <span class=\"type\">UInt8</span> = <span class=\"number\">1</span> </div><div class=\"line\"><span class=\"comment\">// 将UInt8转换成UInt16再相加</span></div><div class=\"line\"><span class=\"keyword\">let</span> twoThousandAndOne = twoThousand + <span class=\"type\">UInt16</span>(one)</div></pre></td></tr></table></figure>\n<ol>\n<li>浮点数转换</li>\n</ol>\n<p>（1）整数-&gt;浮点数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> three = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> t = <span class=\"type\">Double</span>(three)</div></pre></td></tr></table></figure>\n<p>（2）浮点数-&gt;整数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"number\">0.123</span></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Int</span>(d) <span class=\"comment\">// i = 0</span></div></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> = <span class=\"type\">UInt16</span></div></pre></td></tr></table></figure>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> http404Error = (<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>) </div><div class=\"line\"><span class=\"comment\">// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\")</span></div></pre></td></tr></table></figure>\n<p>你可以将一个元组的内容分解（decompose）成单独的常量和变量<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = http404Error </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(statusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(statusMessage)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></div></pre></td></tr></table></figure></p>\n<p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> (justTheStatusCode, <span class=\"number\">_</span>) = http404Error </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(justTheStatusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\"</span></div></pre></td></tr></table></figure></p>\n<p>你还可以通过下标来访问元组中的单个元素，下标从零开始<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(http404Error.0)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(http404Error.1)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></div></pre></td></tr></table></figure></p>\n<p>你可以在定义元组的时候给单个元素命名<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> http200Status = (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">\"OK\"</span>) </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(http200Status.statusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 200\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(http200Status.description)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is OK\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"可选-（-）\"><a href=\"#可选-（-）\" class=\"headerlink\" title=\"可选 （?）\"></a>可选 （?）</h2><p>可选表示：</p>\n<p><strong>有值，等于 x</strong>   或者   <strong>没有值</strong></p>\n<p>“Int?”表示可选的Int</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> possibleNumber = <span class=\"string\">\"123\"</span> </div><div class=\"line\"><span class=\"keyword\">let</span> convertedNumber = possibleNumber.toInt() </div><div class=\"line\"><span class=\"comment\">// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"</span></div></pre></td></tr></table></figure>\n<p>判断可选是否有值<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber = possibleNumber.toInt() &#123; </div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(possibleNumber) has an integer value of \\(actualNumber)\"</span>) </div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(possibleNumber) could not be converted to an integer\"</span>) </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"comment\">// 输出 \"123 has an integer value of 123\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"隐式解析可选-（-）\"><a href=\"#隐式解析可选-（-）\" class=\"headerlink\" title=\"隐式解析可选 （!）\"></a>隐式解析可选 （!）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? = <span class=\"string\">\"An optional string.\"</span> </div><div class=\"line\"><span class=\"built_in\">println</span>(possibleString!) <span class=\"comment\">// 需要惊叹号来获取值 </span></div><div class=\"line\"><span class=\"comment\">// 输出 \"An optional string.\" </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! = <span class=\"string\">\"An implicitly unwrapped optional string.\"</span> </div><div class=\"line\"><span class=\"built_in\">println</span>(assumedString)  <span class=\"comment\">// 不需要感叹号 </span></div><div class=\"line\"><span class=\"comment\">// 输出 \"An implicitly unwrapped optional string.\"</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>可以给可选变量赋值为nil来表示它没有值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? = <span class=\"number\">404</span> </div><div class=\"line\"><span class=\"comment\">// serverResponseCode 包含一个可选的 Int 值 404 </span></div><div class=\"line\">serverResponseCode = <span class=\"literal\">nil</span> </div><div class=\"line\"><span class=\"comment\">// serverResponseCode 现在不包含值</span></div></pre></td></tr></table></figure>\n<p>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>? </div><div class=\"line\"><span class=\"comment\">// surveyAnswer 被自动设置为 nil</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>throws 抛出异常</p>\n<p>try method 抓取并执行可能抛出异常的方法</p>\n<p>do {try …} catch ErrorType {…处理} 处理异常</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeASandwich</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> makeASandwich()</div><div class=\"line\">    eatASandwich()</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">OutOfCleanDishes</span> &#123;</div><div class=\"line\">    washDishes()</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">MissingIngredients</span>(<span class=\"keyword\">let</span> ingredients) &#123;</div><div class=\"line\">    buyGroceries(ingredients)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"断言-（assert）\"><a href=\"#断言-（assert）\" class=\"headerlink\" title=\"断言 （assert）\"></a>断言 （assert）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age = -<span class=\"number\">3</span> </div><div class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"A person's age cannot be less than zero\"</span>) </div><div class=\"line\"><span class=\"comment\">// 因为 age &lt; 0，所以断言会触发</span></div></pre></td></tr></table></figure>\n<p>何时使用断言<br>当条件可能为假时使用断言，但是最终一定要保证条件为真，这样你的代码才能继续运行。</p>\n<p>断言的适用情景：</p>\n<ul>\n<li>整数的附属脚本索引被传入一个自定义附属脚本实现，但是下标索引值可能太小或者太大。</li>\n<li>需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。</li>\n<li>一个可选值现在是nil，但是后面的代码运行需要一个非nil值。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><ol>\n<li>变量</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//变量声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明多个变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//带类型声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> msg: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"comment\">//变量赋值</span></div><div class=\"line\">msg = <span class=\"string\">\"Hello\"</span></div></pre></td></tr></table></figure>\n<ol>\n<li>常量</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明常量</span></div><div class=\"line\"><span class=\"keyword\">let</span> pi = <span class=\"number\">3.14159</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ol>\n<li>单行注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//xxx</div></pre></td></tr></table></figure>\n<ol>\n<li>多行注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\">xxx</div><div class=\"line\">xxx</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><ol>\n<li>整数 </li>\n</ol>\n<p>（1）Int ：有符号整数</p>\n<ul>\n<li>在32位平台上，Int和Int32长度相同。</li>\n<li>在64位平台上，Int和Int64长度相同。</li>\n</ul>\n<p>（2）UInt : 无符号整数</p>\n<ul>\n<li>在32位平台上，UInt和UInt32长度相同。</li>\n<li>在64位平台上，UInt和UInt64长度相同。</li>\n</ul>\n<p>推荐使用Int，提高代码的可复用性。</p>\n<ol>\n<li>浮点数</li>\n</ol>\n<p>Double ： 64位浮点数<br>Float ： 32位浮点数</p>\n<p><strong>注意</strong>：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。</p>\n<ol>\n<li>布尔类型</li>\n</ol>\n<p>Bool</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是0b</li>\n<li>一个八进制数，前缀是0o</li>\n<li>一个十六进制数，前缀是0x</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalInteger = <span class=\"number\">17</span> </div><div class=\"line\"><span class=\"keyword\">let</span> binaryInteger = <span class=\"number\">0b10001</span>       <span class=\"comment\">// 二进制的17 </span></div><div class=\"line\"><span class=\"keyword\">let</span> octalInteger = <span class=\"number\">0o21</span>           <span class=\"comment\">// 八进制的17 </span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger = <span class=\"number\">0x11</span>     <span class=\"comment\">// 十六进制的17</span></div></pre></td></tr></table></figure>\n<p>如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：</p>\n<p>1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。<br>1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。</p>\n<p>如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：</p>\n<p>0xFp2 表示 $15 × 2^{2}$，等于 60.0。<br>0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li>整数转换</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下划线用来增加可读性，不会影响值</span></div><div class=\"line\"><span class=\"keyword\">let</span> twoThousand: <span class=\"type\">UInt16</span> = <span class=\"number\">2_000</span> </div><div class=\"line\"><span class=\"keyword\">let</span> one: <span class=\"type\">UInt8</span> = <span class=\"number\">1</span> </div><div class=\"line\"><span class=\"comment\">// 将UInt8转换成UInt16再相加</span></div><div class=\"line\"><span class=\"keyword\">let</span> twoThousandAndOne = twoThousand + <span class=\"type\">UInt16</span>(one)</div></pre></td></tr></table></figure>\n<ol>\n<li>浮点数转换</li>\n</ol>\n<p>（1）整数-&gt;浮点数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> three = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> t = <span class=\"type\">Double</span>(three)</div></pre></td></tr></table></figure>\n<p>（2）浮点数-&gt;整数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"number\">0.123</span></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Int</span>(d) <span class=\"comment\">// i = 0</span></div></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> = <span class=\"type\">UInt16</span></div></pre></td></tr></table></figure>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> http404Error = (<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>) </div><div class=\"line\"><span class=\"comment\">// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\")</span></div></pre></td></tr></table></figure>\n<p>你可以将一个元组的内容分解（decompose）成单独的常量和变量<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = http404Error </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(statusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(statusMessage)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></div></pre></td></tr></table></figure></p>\n<p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（_）标记<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> (justTheStatusCode, <span class=\"number\">_</span>) = http404Error </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(justTheStatusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\"</span></div></pre></td></tr></table></figure></p>\n<p>你还可以通过下标来访问元组中的单个元素，下标从零开始<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(http404Error.0)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(http404Error.1)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></div></pre></td></tr></table></figure></p>\n<p>你可以在定义元组的时候给单个元素命名<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> http200Status = (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">\"OK\"</span>) </div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status code is \\(http200Status.statusCode)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status code is 200\" </span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The status message is \\(http200Status.description)\"</span>) </div><div class=\"line\"><span class=\"comment\">// 输出 \"The status message is OK\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"可选-（-）\"><a href=\"#可选-（-）\" class=\"headerlink\" title=\"可选 （?）\"></a>可选 （?）</h2><p>可选表示：</p>\n<p><strong>有值，等于 x</strong>   或者   <strong>没有值</strong></p>\n<p>“Int?”表示可选的Int</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> possibleNumber = <span class=\"string\">\"123\"</span> </div><div class=\"line\"><span class=\"keyword\">let</span> convertedNumber = possibleNumber.toInt() </div><div class=\"line\"><span class=\"comment\">// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"</span></div></pre></td></tr></table></figure>\n<p>判断可选是否有值<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber = possibleNumber.toInt() &#123; </div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(possibleNumber) has an integer value of \\(actualNumber)\"</span>) </div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(possibleNumber) could not be converted to an integer\"</span>) </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"comment\">// 输出 \"123 has an integer value of 123\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"隐式解析可选-（-）\"><a href=\"#隐式解析可选-（-）\" class=\"headerlink\" title=\"隐式解析可选 （!）\"></a>隐式解析可选 （!）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? = <span class=\"string\">\"An optional string.\"</span> </div><div class=\"line\"><span class=\"built_in\">println</span>(possibleString!) <span class=\"comment\">// 需要惊叹号来获取值 </span></div><div class=\"line\"><span class=\"comment\">// 输出 \"An optional string.\" </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! = <span class=\"string\">\"An implicitly unwrapped optional string.\"</span> </div><div class=\"line\"><span class=\"built_in\">println</span>(assumedString)  <span class=\"comment\">// 不需要感叹号 </span></div><div class=\"line\"><span class=\"comment\">// 输出 \"An implicitly unwrapped optional string.\"</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>可以给可选变量赋值为nil来表示它没有值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? = <span class=\"number\">404</span> </div><div class=\"line\"><span class=\"comment\">// serverResponseCode 包含一个可选的 Int 值 404 </span></div><div class=\"line\">serverResponseCode = <span class=\"literal\">nil</span> </div><div class=\"line\"><span class=\"comment\">// serverResponseCode 现在不包含值</span></div></pre></td></tr></table></figure>\n<p>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>? </div><div class=\"line\"><span class=\"comment\">// surveyAnswer 被自动设置为 nil</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>throws 抛出异常</p>\n<p>try method 抓取并执行可能抛出异常的方法</p>\n<p>do {try …} catch ErrorType {…处理} 处理异常</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeASandwich</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> makeASandwich()</div><div class=\"line\">    eatASandwich()</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">OutOfCleanDishes</span> &#123;</div><div class=\"line\">    washDishes()</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">MissingIngredients</span>(<span class=\"keyword\">let</span> ingredients) &#123;</div><div class=\"line\">    buyGroceries(ingredients)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"断言-（assert）\"><a href=\"#断言-（assert）\" class=\"headerlink\" title=\"断言 （assert）\"></a>断言 （assert）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age = -<span class=\"number\">3</span> </div><div class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"A person's age cannot be less than zero\"</span>) </div><div class=\"line\"><span class=\"comment\">// 因为 age &lt; 0，所以断言会触发</span></div></pre></td></tr></table></figure>\n<p>何时使用断言<br>当条件可能为假时使用断言，但是最终一定要保证条件为真，这样你的代码才能继续运行。</p>\n<p>断言的适用情景：</p>\n<ul>\n<li>整数的附属脚本索引被传入一个自定义附属脚本实现，但是下标索引值可能太小或者太大。</li>\n<li>需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。</li>\n<li>一个可选值现在是nil，但是后面的代码运行需要一个非nil值。</li>\n</ul>"},{"title":"Swift笔记-函数","date":"2017-06-05T07:29:35.000Z","_content":"\n\n\n## 函数的定义与调用\n\n\n```swift\nfunc sayHelloAgain(personName: String) -> String {\n    return \"Hello again, \" + personName + \"!\"\n}\n  \nprint(sayHelloAgain(personName: \"Anna\"))\n// prints \"Hello again, Anna!\"\n```\n## 函数参数与返回值\n\n### 无参函数\n\n```swift\nfunc sayHelloWorld() -> String {\n    return \"hello, world\"\n}\nprint(sayHelloWorld())\n// prints \"hello, world\"\n```\n\n<!-- more -->\n\n### 多参数函数\n\n```swift\nfunc sayHello(personName: String, alreadyGreeted: Bool) -> String {\n    if alreadyGreeted {\n        return sayHelloAgain(personName: personName)\n    } else {\n        return sayHello(personName: personName, alreadyGreeted: <#Bool#>)\n    }\n}\nprint(sayHello(personName: \"Tim\", alreadyGreeted: true))\n// prints \"Hello again, Tim!\"\n```\n### 无返回值函数\n\n```swift\nfunc sayGoodbye(personName: String) {\n    print(\"Goodbye, \\(personName)!\")\n}\nsayGoodbye(personName: \"Dave\")\n// prints \"Goodbye, Dave!\"\n```\n### 多重返回值函数\n\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int) {\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n### 可选元组返回类型\n\n为了安全地处理这个“空数组”问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nil：\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int)? {\n    if array.isEmpty { return nil }\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n\n### 函数参数名称\n\n函数参数都有一个外部参数名（external parameter name）和一个局部参数名（local parameter name）。外部参数名用于在函数调用时标注传递给函数的参数，局部参数名在函数的实现内部使用。\n```swift\nfunc someFunction(firstParameterName: Int, secondParameterName: Int) {\n    // function body goes here\n    // firstParameterName and secondParameterName refer to\n    // the argument values for the first and second parameters\n}\nsomeFunction(firstParameterName: 1, secondParameterName: 2)\n```\n\n### 指定外部参数名\n\n```swift\nfunc someFunction(externalParameterName localParameterName: Int) {\n    // function body goes here, and can use localParameterName\n    // to refer to the argument value for that parameter\n}\n```\n\n\n```swift\nfunc sayHello(to person: String, and anotherPerson: String) -> String {\n    return \"Hello \\(person) and \\(anotherPerson)!\"\n}\nprint(sayHello(to: \"Bill\", and: \"Ted\"))\n// prints \"Hello Bill and Ted!\"\n```\n为每个参数指定外部参数名后，在你调用sayHello(to:and:)函数时两个外部参数名都必须写出来。\n\n### 忽略外部参数名\n\n如果你不想为第二个及后续的参数设置外部参数名，用一个下划线（_）代替一个明确的参数名。\n```swift\nfunc someFunction(firstParameterName: Int, _ secondParameterName: Int) {\n    // function body goes here\n    // firstParameterName and secondParameterName refer to\n    // the argument values for the first and second parameters\n}\nsomeFunction(1, 2)\n```\n\n### 默认参数值\n\n你可以在函数体中为每个参数定义默认值（Deafult Values）。当默认值被定义后，调用这个函数时可以忽略这个参数。\n```swift\nfunc someFunction(_ parameterWithDefault: Int = 12) {\n    // function body goes here\n    // if no arguments are passed to the function call,\n    // value of parameterWithDefault is 12\n}\nsomeFunction(6) // parameterWithDefault is 6\nsomeFunction() // parameterWithDefault is 12\n```\n\n### 可变参数\n\n```swift\nfunc arithmeticMean(numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\narithmeticMean(3, 8.25, 18.75)\n// returns 10.0, which is the arithmetic mean of these three numbers\n```\n**注意**:一个函数最多只能有一个可变参数。\n\n### 输入输出参数\n\n\n```swift\nfunc swapTwoInts(a:inout Int, _ b:inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n```\n调用参数需要添加&\n\n```swift\nvar someInt = 3\nvar anotherInt = 107\nswapTwoInts(&someInt, &anotherInt)\nprint(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")\n// prints \"someInt is now 107, and anotherInt is now 3\"\n```\n从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(_:_:) 函数中被修改，尽管它们的定义在函数体外。\n\n## 函数类型\n\n每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成。\n\n## 嵌套函数\n\n\n```swift\nfunc chooseStepFunction(backwards: Bool) -> (Int) -> Int {\n    func stepForward(input: Int) -> Int { return input + 1 }\n    func stepBackward(input: Int) -> Int { return input - 1 }\n    return backwards ? stepBackward : stepForward\n}\nvar currentValue = -4\nlet moveNearerToZero = chooseStepFunction(backwards: currentValue > 0)\n// moveNearerToZero now refers to the nested stepForward() function\nwhile currentValue != 0 {\n    print(\"\\(currentValue)... \")\n    currentValue = moveNearerToZero(currentValue)\n}\nprint(\"zero!\")\n// -4...\n// -3...\n// -2...\n// -1...\n// zero!\n```\n","source":"_posts/Swift笔记-函数.md","raw":"---\ntitle: Swift笔记-函数\ndate: 2017-06-05 15:29:35\ntags: \n\t- Swift \ncategories: Swift \n---\n\n\n\n## 函数的定义与调用\n\n\n```swift\nfunc sayHelloAgain(personName: String) -> String {\n    return \"Hello again, \" + personName + \"!\"\n}\n  \nprint(sayHelloAgain(personName: \"Anna\"))\n// prints \"Hello again, Anna!\"\n```\n## 函数参数与返回值\n\n### 无参函数\n\n```swift\nfunc sayHelloWorld() -> String {\n    return \"hello, world\"\n}\nprint(sayHelloWorld())\n// prints \"hello, world\"\n```\n\n<!-- more -->\n\n### 多参数函数\n\n```swift\nfunc sayHello(personName: String, alreadyGreeted: Bool) -> String {\n    if alreadyGreeted {\n        return sayHelloAgain(personName: personName)\n    } else {\n        return sayHello(personName: personName, alreadyGreeted: <#Bool#>)\n    }\n}\nprint(sayHello(personName: \"Tim\", alreadyGreeted: true))\n// prints \"Hello again, Tim!\"\n```\n### 无返回值函数\n\n```swift\nfunc sayGoodbye(personName: String) {\n    print(\"Goodbye, \\(personName)!\")\n}\nsayGoodbye(personName: \"Dave\")\n// prints \"Goodbye, Dave!\"\n```\n### 多重返回值函数\n\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int) {\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n### 可选元组返回类型\n\n为了安全地处理这个“空数组”问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nil：\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int)? {\n    if array.isEmpty { return nil }\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n\n### 函数参数名称\n\n函数参数都有一个外部参数名（external parameter name）和一个局部参数名（local parameter name）。外部参数名用于在函数调用时标注传递给函数的参数，局部参数名在函数的实现内部使用。\n```swift\nfunc someFunction(firstParameterName: Int, secondParameterName: Int) {\n    // function body goes here\n    // firstParameterName and secondParameterName refer to\n    // the argument values for the first and second parameters\n}\nsomeFunction(firstParameterName: 1, secondParameterName: 2)\n```\n\n### 指定外部参数名\n\n```swift\nfunc someFunction(externalParameterName localParameterName: Int) {\n    // function body goes here, and can use localParameterName\n    // to refer to the argument value for that parameter\n}\n```\n\n\n```swift\nfunc sayHello(to person: String, and anotherPerson: String) -> String {\n    return \"Hello \\(person) and \\(anotherPerson)!\"\n}\nprint(sayHello(to: \"Bill\", and: \"Ted\"))\n// prints \"Hello Bill and Ted!\"\n```\n为每个参数指定外部参数名后，在你调用sayHello(to:and:)函数时两个外部参数名都必须写出来。\n\n### 忽略外部参数名\n\n如果你不想为第二个及后续的参数设置外部参数名，用一个下划线（_）代替一个明确的参数名。\n```swift\nfunc someFunction(firstParameterName: Int, _ secondParameterName: Int) {\n    // function body goes here\n    // firstParameterName and secondParameterName refer to\n    // the argument values for the first and second parameters\n}\nsomeFunction(1, 2)\n```\n\n### 默认参数值\n\n你可以在函数体中为每个参数定义默认值（Deafult Values）。当默认值被定义后，调用这个函数时可以忽略这个参数。\n```swift\nfunc someFunction(_ parameterWithDefault: Int = 12) {\n    // function body goes here\n    // if no arguments are passed to the function call,\n    // value of parameterWithDefault is 12\n}\nsomeFunction(6) // parameterWithDefault is 6\nsomeFunction() // parameterWithDefault is 12\n```\n\n### 可变参数\n\n```swift\nfunc arithmeticMean(numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\narithmeticMean(3, 8.25, 18.75)\n// returns 10.0, which is the arithmetic mean of these three numbers\n```\n**注意**:一个函数最多只能有一个可变参数。\n\n### 输入输出参数\n\n\n```swift\nfunc swapTwoInts(a:inout Int, _ b:inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n```\n调用参数需要添加&\n\n```swift\nvar someInt = 3\nvar anotherInt = 107\nswapTwoInts(&someInt, &anotherInt)\nprint(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")\n// prints \"someInt is now 107, and anotherInt is now 3\"\n```\n从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(_:_:) 函数中被修改，尽管它们的定义在函数体外。\n\n## 函数类型\n\n每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成。\n\n## 嵌套函数\n\n\n```swift\nfunc chooseStepFunction(backwards: Bool) -> (Int) -> Int {\n    func stepForward(input: Int) -> Int { return input + 1 }\n    func stepBackward(input: Int) -> Int { return input - 1 }\n    return backwards ? stepBackward : stepForward\n}\nvar currentValue = -4\nlet moveNearerToZero = chooseStepFunction(backwards: currentValue > 0)\n// moveNearerToZero now refers to the nested stepForward() function\nwhile currentValue != 0 {\n    print(\"\\(currentValue)... \")\n    currentValue = moveNearerToZero(currentValue)\n}\nprint(\"zero!\")\n// -4...\n// -3...\n// -2...\n// -1...\n// zero!\n```\n","slug":"Swift笔记-函数","published":1,"updated":"2017-08-10T12:01:34.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft8002gwou5uaswpptc","content":"<h2 id=\"函数的定义与调用\"><a href=\"#函数的定义与调用\" class=\"headerlink\" title=\"函数的定义与调用\"></a>函数的定义与调用</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloAgain</span><span class=\"params\">(personName: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello again, \"</span> + personName + <span class=\"string\">\"!\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(sayHelloAgain(personName: <span class=\"string\">\"Anna\"</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello again, Anna!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"函数参数与返回值\"><a href=\"#函数参数与返回值\" class=\"headerlink\" title=\"函数参数与返回值\"></a>函数参数与返回值</h2><h3 id=\"无参函数\"><a href=\"#无参函数\" class=\"headerlink\" title=\"无参函数\"></a>无参函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloWorld</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello, world\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHelloWorld())</div><div class=\"line\"><span class=\"comment\">// prints \"hello, world\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"多参数函数\"><a href=\"#多参数函数\" class=\"headerlink\" title=\"多参数函数\"></a>多参数函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(personName: String, alreadyGreeted: Bool)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> alreadyGreeted &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sayHelloAgain(personName: personName)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sayHello(personName: personName, alreadyGreeted: &lt;#<span class=\"type\">Bool</span>#&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHello(personName: <span class=\"string\">\"Tim\"</span>, alreadyGreeted: <span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello again, Tim!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayGoodbye</span><span class=\"params\">(personName: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Goodbye, \\(personName)!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">sayGoodbye(personName: <span class=\"string\">\"Dave\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Goodbye, Dave!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"多重返回值函数\"><a href=\"#多重返回值函数\" class=\"headerlink\" title=\"多重返回值函数\"></a>多重返回值函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</div><div class=\"line\">            currentMin = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</div><div class=\"line\">            currentMax = value</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可选元组返回类型\"><a href=\"#可选元组返回类型\" class=\"headerlink\" title=\"可选元组返回类型\"></a>可选元组返回类型</h3><p>为了安全地处理这个“空数组”问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>)? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> array.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</div><div class=\"line\">            currentMin = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</div><div class=\"line\">            currentMax = value</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数参数名称\"><a href=\"#函数参数名称\" class=\"headerlink\" title=\"函数参数名称\"></a>函数参数名称</h3><p>函数参数都有一个外部参数名（external parameter name）和一个局部参数名（local parameter name）。外部参数名用于在函数调用时标注传递给函数的参数，局部参数名在函数的实现内部使用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(firstParameterName: Int, secondParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// firstParameterName and secondParameterName refer to</span></div><div class=\"line\">    <span class=\"comment\">// the argument values for the first and second parameters</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(firstParameterName: <span class=\"number\">1</span>, secondParameterName: <span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"指定外部参数名\"><a href=\"#指定外部参数名\" class=\"headerlink\" title=\"指定外部参数名\"></a>指定外部参数名</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(externalParameterName localParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here, and can use localParameterName</span></div><div class=\"line\">    <span class=\"comment\">// to refer to the argument value for that parameter</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(to person: String, and anotherPerson: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(person) and \\(anotherPerson)!\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHello(to: <span class=\"string\">\"Bill\"</span>, and: <span class=\"string\">\"Ted\"</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello Bill and Ted!\"</span></div></pre></td></tr></table></figure>\n<p>为每个参数指定外部参数名后，在你调用sayHello(to:and:)函数时两个外部参数名都必须写出来。</p>\n<h3 id=\"忽略外部参数名\"><a href=\"#忽略外部参数名\" class=\"headerlink\" title=\"忽略外部参数名\"></a>忽略外部参数名</h3><p>如果你不想为第二个及后续的参数设置外部参数名，用一个下划线（_）代替一个明确的参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(firstParameterName: Int, <span class=\"number\">_</span> secondParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// firstParameterName and secondParameterName refer to</span></div><div class=\"line\">    <span class=\"comment\">// the argument values for the first and second parameters</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><p>你可以在函数体中为每个参数定义默认值（Deafult Values）。当默认值被定义后，调用这个函数时可以忽略这个参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(<span class=\"number\">_</span> parameterWithDefault: Int = <span class=\"number\">12</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// if no arguments are passed to the function call,</span></div><div class=\"line\">    <span class=\"comment\">// value of parameterWithDefault is 12</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(<span class=\"number\">6</span>) <span class=\"comment\">// parameterWithDefault is 6</span></div><div class=\"line\">someFunction() <span class=\"comment\">// parameterWithDefault is 12</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        total += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span></div><div class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8.25</span>, <span class=\"number\">18.75</span>)</div><div class=\"line\"><span class=\"comment\">// returns 10.0, which is the arithmetic mean of these three numbers</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>:一个函数最多只能有一个可变参数。</p>\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoInts</span><span class=\"params\">(a:<span class=\"keyword\">inout</span> Int, <span class=\"number\">_</span> b:<span class=\"keyword\">inout</span> Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用参数需要添加&amp;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherInt = <span class=\"number\">107</span></div><div class=\"line\">swapTwoInts(&amp;someInt, &amp;anotherInt)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"someInt is now 107, and anotherInt is now 3\"</span></div></pre></td></tr></table></figure>\n<p>从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(<em>:</em>:) 函数中被修改，尽管它们的定义在函数体外。</p>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成。</p>\n<h2 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backwards: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input + <span class=\"number\">1</span> &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input - <span class=\"number\">1</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> backwards ? stepBackward : stepForward</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> currentValue = -<span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero = chooseStepFunction(backwards: currentValue &gt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// moveNearerToZero now refers to the nested stepForward() function</span></div><div class=\"line\"><span class=\"keyword\">while</span> currentValue != <span class=\"number\">0</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(currentValue)... \"</span>)</div><div class=\"line\">    currentValue = moveNearerToZero(currentValue)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"zero!\"</span>)</div><div class=\"line\"><span class=\"comment\">// -4...</span></div><div class=\"line\"><span class=\"comment\">// -3...</span></div><div class=\"line\"><span class=\"comment\">// -2...</span></div><div class=\"line\"><span class=\"comment\">// -1...</span></div><div class=\"line\"><span class=\"comment\">// zero!</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数的定义与调用\"><a href=\"#函数的定义与调用\" class=\"headerlink\" title=\"函数的定义与调用\"></a>函数的定义与调用</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloAgain</span><span class=\"params\">(personName: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello again, \"</span> + personName + <span class=\"string\">\"!\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(sayHelloAgain(personName: <span class=\"string\">\"Anna\"</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello again, Anna!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"函数参数与返回值\"><a href=\"#函数参数与返回值\" class=\"headerlink\" title=\"函数参数与返回值\"></a>函数参数与返回值</h2><h3 id=\"无参函数\"><a href=\"#无参函数\" class=\"headerlink\" title=\"无参函数\"></a>无参函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloWorld</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello, world\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHelloWorld())</div><div class=\"line\"><span class=\"comment\">// prints \"hello, world\"</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"多参数函数\"><a href=\"#多参数函数\" class=\"headerlink\" title=\"多参数函数\"></a>多参数函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(personName: String, alreadyGreeted: Bool)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> alreadyGreeted &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sayHelloAgain(personName: personName)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sayHello(personName: personName, alreadyGreeted: &lt;#<span class=\"type\">Bool</span>#&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHello(personName: <span class=\"string\">\"Tim\"</span>, alreadyGreeted: <span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello again, Tim!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayGoodbye</span><span class=\"params\">(personName: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Goodbye, \\(personName)!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">sayGoodbye(personName: <span class=\"string\">\"Dave\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Goodbye, Dave!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"多重返回值函数\"><a href=\"#多重返回值函数\" class=\"headerlink\" title=\"多重返回值函数\"></a>多重返回值函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</div><div class=\"line\">            currentMin = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</div><div class=\"line\">            currentMax = value</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可选元组返回类型\"><a href=\"#可选元组返回类型\" class=\"headerlink\" title=\"可选元组返回类型\"></a>可选元组返回类型</h3><p>为了安全地处理这个“空数组”问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>)? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> array.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</div><div class=\"line\">            currentMin = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</div><div class=\"line\">            currentMax = value</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"函数参数名称\"><a href=\"#函数参数名称\" class=\"headerlink\" title=\"函数参数名称\"></a>函数参数名称</h3><p>函数参数都有一个外部参数名（external parameter name）和一个局部参数名（local parameter name）。外部参数名用于在函数调用时标注传递给函数的参数，局部参数名在函数的实现内部使用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(firstParameterName: Int, secondParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// firstParameterName and secondParameterName refer to</span></div><div class=\"line\">    <span class=\"comment\">// the argument values for the first and second parameters</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(firstParameterName: <span class=\"number\">1</span>, secondParameterName: <span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"指定外部参数名\"><a href=\"#指定外部参数名\" class=\"headerlink\" title=\"指定外部参数名\"></a>指定外部参数名</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(externalParameterName localParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here, and can use localParameterName</span></div><div class=\"line\">    <span class=\"comment\">// to refer to the argument value for that parameter</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(to person: String, and anotherPerson: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(person) and \\(anotherPerson)!\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sayHello(to: <span class=\"string\">\"Bill\"</span>, and: <span class=\"string\">\"Ted\"</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"Hello Bill and Ted!\"</span></div></pre></td></tr></table></figure>\n<p>为每个参数指定外部参数名后，在你调用sayHello(to:and:)函数时两个外部参数名都必须写出来。</p>\n<h3 id=\"忽略外部参数名\"><a href=\"#忽略外部参数名\" class=\"headerlink\" title=\"忽略外部参数名\"></a>忽略外部参数名</h3><p>如果你不想为第二个及后续的参数设置外部参数名，用一个下划线（_）代替一个明确的参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(firstParameterName: Int, <span class=\"number\">_</span> secondParameterName: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// firstParameterName and secondParameterName refer to</span></div><div class=\"line\">    <span class=\"comment\">// the argument values for the first and second parameters</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><p>你可以在函数体中为每个参数定义默认值（Deafult Values）。当默认值被定义后，调用这个函数时可以忽略这个参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(<span class=\"number\">_</span> parameterWithDefault: Int = <span class=\"number\">12</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">    <span class=\"comment\">// if no arguments are passed to the function call,</span></div><div class=\"line\">    <span class=\"comment\">// value of parameterWithDefault is 12</span></div><div class=\"line\">&#125;</div><div class=\"line\">someFunction(<span class=\"number\">6</span>) <span class=\"comment\">// parameterWithDefault is 6</span></div><div class=\"line\">someFunction() <span class=\"comment\">// parameterWithDefault is 12</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        total += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span></div><div class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8.25</span>, <span class=\"number\">18.75</span>)</div><div class=\"line\"><span class=\"comment\">// returns 10.0, which is the arithmetic mean of these three numbers</span></div></pre></td></tr></table></figure>\n<p><strong>注意</strong>:一个函数最多只能有一个可变参数。</p>\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoInts</span><span class=\"params\">(a:<span class=\"keyword\">inout</span> Int, <span class=\"number\">_</span> b:<span class=\"keyword\">inout</span> Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用参数需要添加&amp;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherInt = <span class=\"number\">107</span></div><div class=\"line\">swapTwoInts(&amp;someInt, &amp;anotherInt)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"someInt is now 107, and anotherInt is now 3\"</span></div></pre></td></tr></table></figure>\n<p>从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(<em>:</em>:) 函数中被修改，尽管它们的定义在函数体外。</p>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成。</p>\n<h2 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backwards: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input + <span class=\"number\">1</span> &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input - <span class=\"number\">1</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> backwards ? stepBackward : stepForward</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> currentValue = -<span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero = chooseStepFunction(backwards: currentValue &gt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// moveNearerToZero now refers to the nested stepForward() function</span></div><div class=\"line\"><span class=\"keyword\">while</span> currentValue != <span class=\"number\">0</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(currentValue)... \"</span>)</div><div class=\"line\">    currentValue = moveNearerToZero(currentValue)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"zero!\"</span>)</div><div class=\"line\"><span class=\"comment\">// -4...</span></div><div class=\"line\"><span class=\"comment\">// -3...</span></div><div class=\"line\"><span class=\"comment\">// -2...</span></div><div class=\"line\"><span class=\"comment\">// -1...</span></div><div class=\"line\"><span class=\"comment\">// zero!</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-属性","date":"2017-06-06T02:35:36.000Z","_content":"\n## 存储属性\n\n```swift\nimport Cocoa\n  \nstruct Number\n{\n   var digits: Int\n   let pi = 3.1415\n}\n  \nvar n = Number(digits: 12345)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.pi)\")\n```\n\n<!-- more -->\n\n存储属性可以是**变量存储属性**（用关键字var定义），也可以是**常量存储属性**（用关键字let定义）。\n- 可以在定义存储属性的时候指定默认值\n- 也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值\n\n```swift\nimport Cocoa\n  \nstruct Number\n{\n   var digits: Int\n   let pi = 3.1415\n}\n  \nvar n = Number(digits: 12345)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.pi)\")\n//67\n//3.1415\n```\n\n//构造方法给常量赋值\n```swift\nimport Cocoa\n  \nstruct Number\n{\n    var digits: Int\n    let numbers: Double\n    init(digits: Int, numbers : Double) {\n        self.digits = digits;\n        self.numbers = numbers;\n    }\n}\n  \nvar n = Number(digits: 12345, numbers: 3.14)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.numbers)\")\n//67\n//3.14\n```\n\n### 延迟存储属性\n延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。\n\n延迟存储属性一般用于：\n- 延迟对象的创建。\n- 当属性的值依赖于其他未知类\n\n```swift\nimport Cocoa\n  \nclass sample {\n    lazy var no = number() // `var` 关键字是必须的\n}\n  \nclass number {\n    var name = \"Runoob Swift 教程\"\n}\n  \nvar firstsample = sample()\nprint(firstsample.no.name)\n//Runoob Swift 教程\n```\n\n\n\n## 计算属性\n计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。\n```swift\nimport Cocoa\n  \nclass sample {\n    var no1 = 0.0, no2 = 0.0\n    var length = 300.0, breadth = 150.0\n    \n    var middle: (Double, Double) {\n        get{\n            return (length / 2, breadth / 2)\n        }\n        set(axis){\n            no1 = axis.0 - (length / 2)\n            no2 = axis.1 - (breadth / 2)\n        }\n    }\n}\n  \nvar result = sample()\nprint(result.middle)\nresult.middle = (0.0, 10.0)\n  \nprint(result.no1)\nprint(result.no2)\n//(150.0, 75.0)\n//-150.0\n//-65.0\n```\n### 只读计算属性\n只有 getter 没有 setter 的计算属性就是只读计算属性。\n```swift\nimport Cocoa\n  \nclass film {\n    var head = \"\"\n    var duration = 0.0\n    var metaInfo: [String:String] {\n        return [\n            \"head\": self.head,\n            \"duration\":\"\\(self.duration)\"\n        ]\n    }\n}\n  \nvar movie = film()\nmovie.head = \"Swift 属性\"\nmovie.duration = 3.09\n  \nprint(movie.metaInfo[\"head\"]!)\nprint(movie.metaInfo[\"duration\"]!)\n  \n//Swift 属性\n//3.09\n```\n\n## 属性观察器\n\n属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。\n\n可以为属性添加如下的一个或全部观察器：\n\n- willSet在设置新的值之前调用\n- didSet在新的值被设置之后立即调用\n- willSet和didSet观察器在属性初始化过程中不会被调用\n\n```swift\nimport Cocoa\n  \nclass Samplepgm {\n    var counter: Int = 0{\n        willSet(newTotal){\n            print(\"计数器: \\(newTotal)\")\n        }\n        didSet{\n            if counter > oldValue {\n                print(\"新增数 \\(counter - oldValue)\")\n            }\n        }\n    }\n}\nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n//计数器: 100\n//新增数 100\n//计数器: 800\n//新增数 700\n```\n\n## 类型属性\n\n类型属性是作为类型定义的一部分写在类型最外层的花括号（{}）内。\n\n使用关键字 **static** 来定义值类型的类型属性，关键字 **class** 来为类定义类型属性。\n\n```swift\nstruct Structname {\n   static var storedTypeProperty = \" \"\n   static var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n  \nenum Enumname {\n   static var storedTypeProperty = \" \"\n   static var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n  \nclass Classname {\n   class var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n```\n\n### 获取和设置类型属性的值\n\n类型属性是通过类型本身来获取和设置，而不是通过实例。\n\n```swift\nimport Cocoa\n  \nstruct StudMarks {\n   static let markCount = 97\n   static var totalCount = 0\n   var InternalMarks: Int = 0 {\n      didSet {\n         if InternalMarks > StudMarks.markCount {\n            InternalMarks = StudMarks.markCount\n         }\n         if InternalMarks > StudMarks.totalCount {\n            //类型属性赋值\n            StudMarks.totalCount = InternalMarks\n         }\n      }\n   }\n}\n  \nvar stud1Mark1 = StudMarks()\nvar stud1Mark2 = StudMarks()\n  \nstud1Mark1.InternalMarks = 98\nprint(stud1Mark1.InternalMarks) \n  \nstud1Mark2.InternalMarks = 87\nprint(stud1Mark2.InternalMarks)\n//97\n//87\n```","source":"_posts/Swift笔记-属性.md","raw":"---\ntitle: Swift笔记-属性\ndate: 2017-06-06 10:35:36\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 存储属性\n\n```swift\nimport Cocoa\n  \nstruct Number\n{\n   var digits: Int\n   let pi = 3.1415\n}\n  \nvar n = Number(digits: 12345)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.pi)\")\n```\n\n<!-- more -->\n\n存储属性可以是**变量存储属性**（用关键字var定义），也可以是**常量存储属性**（用关键字let定义）。\n- 可以在定义存储属性的时候指定默认值\n- 也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值\n\n```swift\nimport Cocoa\n  \nstruct Number\n{\n   var digits: Int\n   let pi = 3.1415\n}\n  \nvar n = Number(digits: 12345)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.pi)\")\n//67\n//3.1415\n```\n\n//构造方法给常量赋值\n```swift\nimport Cocoa\n  \nstruct Number\n{\n    var digits: Int\n    let numbers: Double\n    init(digits: Int, numbers : Double) {\n        self.digits = digits;\n        self.numbers = numbers;\n    }\n}\n  \nvar n = Number(digits: 12345, numbers: 3.14)\nn.digits = 67\n  \nprint(\"\\(n.digits)\")\nprint(\"\\(n.numbers)\")\n//67\n//3.14\n```\n\n### 延迟存储属性\n延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。\n\n延迟存储属性一般用于：\n- 延迟对象的创建。\n- 当属性的值依赖于其他未知类\n\n```swift\nimport Cocoa\n  \nclass sample {\n    lazy var no = number() // `var` 关键字是必须的\n}\n  \nclass number {\n    var name = \"Runoob Swift 教程\"\n}\n  \nvar firstsample = sample()\nprint(firstsample.no.name)\n//Runoob Swift 教程\n```\n\n\n\n## 计算属性\n计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。\n```swift\nimport Cocoa\n  \nclass sample {\n    var no1 = 0.0, no2 = 0.0\n    var length = 300.0, breadth = 150.0\n    \n    var middle: (Double, Double) {\n        get{\n            return (length / 2, breadth / 2)\n        }\n        set(axis){\n            no1 = axis.0 - (length / 2)\n            no2 = axis.1 - (breadth / 2)\n        }\n    }\n}\n  \nvar result = sample()\nprint(result.middle)\nresult.middle = (0.0, 10.0)\n  \nprint(result.no1)\nprint(result.no2)\n//(150.0, 75.0)\n//-150.0\n//-65.0\n```\n### 只读计算属性\n只有 getter 没有 setter 的计算属性就是只读计算属性。\n```swift\nimport Cocoa\n  \nclass film {\n    var head = \"\"\n    var duration = 0.0\n    var metaInfo: [String:String] {\n        return [\n            \"head\": self.head,\n            \"duration\":\"\\(self.duration)\"\n        ]\n    }\n}\n  \nvar movie = film()\nmovie.head = \"Swift 属性\"\nmovie.duration = 3.09\n  \nprint(movie.metaInfo[\"head\"]!)\nprint(movie.metaInfo[\"duration\"]!)\n  \n//Swift 属性\n//3.09\n```\n\n## 属性观察器\n\n属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。\n\n可以为属性添加如下的一个或全部观察器：\n\n- willSet在设置新的值之前调用\n- didSet在新的值被设置之后立即调用\n- willSet和didSet观察器在属性初始化过程中不会被调用\n\n```swift\nimport Cocoa\n  \nclass Samplepgm {\n    var counter: Int = 0{\n        willSet(newTotal){\n            print(\"计数器: \\(newTotal)\")\n        }\n        didSet{\n            if counter > oldValue {\n                print(\"新增数 \\(counter - oldValue)\")\n            }\n        }\n    }\n}\nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n//计数器: 100\n//新增数 100\n//计数器: 800\n//新增数 700\n```\n\n## 类型属性\n\n类型属性是作为类型定义的一部分写在类型最外层的花括号（{}）内。\n\n使用关键字 **static** 来定义值类型的类型属性，关键字 **class** 来为类定义类型属性。\n\n```swift\nstruct Structname {\n   static var storedTypeProperty = \" \"\n   static var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n  \nenum Enumname {\n   static var storedTypeProperty = \" \"\n   static var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n  \nclass Classname {\n   class var computedTypeProperty: Int {\n      // 这里返回一个 Int 值\n   }\n}\n```\n\n### 获取和设置类型属性的值\n\n类型属性是通过类型本身来获取和设置，而不是通过实例。\n\n```swift\nimport Cocoa\n  \nstruct StudMarks {\n   static let markCount = 97\n   static var totalCount = 0\n   var InternalMarks: Int = 0 {\n      didSet {\n         if InternalMarks > StudMarks.markCount {\n            InternalMarks = StudMarks.markCount\n         }\n         if InternalMarks > StudMarks.totalCount {\n            //类型属性赋值\n            StudMarks.totalCount = InternalMarks\n         }\n      }\n   }\n}\n  \nvar stud1Mark1 = StudMarks()\nvar stud1Mark2 = StudMarks()\n  \nstud1Mark1.InternalMarks = 98\nprint(stud1Mark1.InternalMarks) \n  \nstud1Mark2.InternalMarks = 87\nprint(stud1Mark2.InternalMarks)\n//97\n//87\n```","slug":"Swift笔记-属性","published":1,"updated":"2017-08-10T12:01:34.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edft9002iwou5f49y6ntb","content":"<h2 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.pi)\"</span>)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>存储属性可以是<strong>变量存储属性</strong>（用关键字var定义），也可以是<strong>常量存储属性</strong>（用关键字let定义）。</p>\n<ul>\n<li>可以在定义存储属性的时候指定默认值</li>\n<li>也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.pi)\"</span>)</div><div class=\"line\"><span class=\"comment\">//67</span></div><div class=\"line\"><span class=\"comment\">//3.1415</span></div></pre></td></tr></table></figure>\n<p>//构造方法给常量赋值<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> numbers: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(digits: <span class=\"type\">Int</span>, numbers : <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.digits = digits;</div><div class=\"line\">        <span class=\"keyword\">self</span>.numbers = numbers;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>, numbers: <span class=\"number\">3.14</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.numbers)\"</span>)</div><div class=\"line\"><span class=\"comment\">//67</span></div><div class=\"line\"><span class=\"comment\">//3.14</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"延迟存储属性\"><a href=\"#延迟存储属性\" class=\"headerlink\" title=\"延迟存储属性\"></a>延迟存储属性</h3><p>延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。</p>\n<p>延迟存储属性一般用于：</p>\n<ul>\n<li>延迟对象的创建。</li>\n<li>当属性的值依赖于其他未知类</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> no = number() <span class=\"comment\">// `var` 关键字是必须的</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">number</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Runoob Swift 教程\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> firstsample = sample()</div><div class=\"line\"><span class=\"built_in\">print</span>(firstsample.no.name)</div><div class=\"line\"><span class=\"comment\">//Runoob Swift 教程</span></div></pre></td></tr></table></figure>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1 = <span class=\"number\">0.0</span>, no2 = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">300.0</span>, breadth = <span class=\"number\">150.0</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> middle: (<span class=\"type\">Double</span>, <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (length / <span class=\"number\">2</span>, breadth / <span class=\"number\">2</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>(axis)&#123;</div><div class=\"line\">            no1 = axis.<span class=\"number\">0</span> - (length / <span class=\"number\">2</span>)</div><div class=\"line\">            no2 = axis.<span class=\"number\">1</span> - (breadth / <span class=\"number\">2</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> result = sample()</div><div class=\"line\"><span class=\"built_in\">print</span>(result.middle)</div><div class=\"line\">result.middle = (<span class=\"number\">0.0</span>, <span class=\"number\">10.0</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(result.no1)</div><div class=\"line\"><span class=\"built_in\">print</span>(result.no2)</div><div class=\"line\"><span class=\"comment\">//(150.0, 75.0)</span></div><div class=\"line\"><span class=\"comment\">//-150.0</span></div><div class=\"line\"><span class=\"comment\">//-65.0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"只读计算属性\"><a href=\"#只读计算属性\" class=\"headerlink\" title=\"只读计算属性\"></a>只读计算属性</h3><p>只有 getter 没有 setter 的计算属性就是只读计算属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">film</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> head = <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> duration = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> metaInfo: [<span class=\"type\">String</span>:<span class=\"type\">String</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [</div><div class=\"line\">            <span class=\"string\">\"head\"</span>: <span class=\"keyword\">self</span>.head,</div><div class=\"line\">            <span class=\"string\">\"duration\"</span>:<span class=\"string\">\"\\(self.duration)\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> movie = film()</div><div class=\"line\">movie.head = <span class=\"string\">\"Swift 属性\"</span></div><div class=\"line\">movie.duration = <span class=\"number\">3.09</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(movie.metaInfo[<span class=\"string\">\"head\"</span>]!)</div><div class=\"line\"><span class=\"built_in\">print</span>(movie.metaInfo[<span class=\"string\">\"duration\"</span>]!)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Swift 属性</span></div><div class=\"line\"><span class=\"comment\">//3.09</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h2><p>属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。</p>\n<p>可以为属性添加如下的一个或全部观察器：</p>\n<ul>\n<li>willSet在设置新的值之前调用</li>\n<li>didSet在新的值被设置之后立即调用</li>\n<li>willSet和didSet观察器在属性初始化过程中不会被调用</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Samplepgm</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>(newTotal)&#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"计数器: \\(newTotal)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> counter &gt; oldValue &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"新增数 \\(counter - oldValue)\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">NewCounter</span> = <span class=\"type\">Samplepgm</span>()</div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">800</span></div><div class=\"line\"><span class=\"comment\">//计数器: 100</span></div><div class=\"line\"><span class=\"comment\">//新增数 100</span></div><div class=\"line\"><span class=\"comment\">//计数器: 800</span></div><div class=\"line\"><span class=\"comment\">//新增数 700</span></div></pre></td></tr></table></figure>\n<h2 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h2><p>类型属性是作为类型定义的一部分写在类型最外层的花括号（{}）内。</p>\n<p>使用关键字 <strong>static</strong> 来定义值类型的类型属性，关键字 <strong>class</strong> 来为类定义类型属性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Structname</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\" \"</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Enumname</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\" \"</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classname</span> </span>&#123;</div><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">computedTypeProperty</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取和设置类型属性的值\"><a href=\"#获取和设置类型属性的值\" class=\"headerlink\" title=\"获取和设置类型属性的值\"></a>获取和设置类型属性的值</h3><p>类型属性是通过类型本身来获取和设置，而不是通过实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StudMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> markCount = <span class=\"number\">97</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> totalCount = <span class=\"number\">0</span></div><div class=\"line\">   <span class=\"keyword\">var</span> <span class=\"type\">InternalMarks</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"type\">InternalMarks</span> &gt; <span class=\"type\">StudMarks</span>.markCount &#123;</div><div class=\"line\">            <span class=\"type\">InternalMarks</span> = <span class=\"type\">StudMarks</span>.markCount</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"type\">InternalMarks</span> &gt; <span class=\"type\">StudMarks</span>.totalCount &#123;</div><div class=\"line\">            <span class=\"comment\">//类型属性赋值</span></div><div class=\"line\">            <span class=\"type\">StudMarks</span>.totalCount = <span class=\"type\">InternalMarks</span></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> stud1Mark1 = <span class=\"type\">StudMarks</span>()</div><div class=\"line\"><span class=\"keyword\">var</span> stud1Mark2 = <span class=\"type\">StudMarks</span>()</div><div class=\"line\">  </div><div class=\"line\">stud1Mark1.<span class=\"type\">InternalMarks</span> = <span class=\"number\">98</span></div><div class=\"line\"><span class=\"built_in\">print</span>(stud1Mark1.<span class=\"type\">InternalMarks</span>) </div><div class=\"line\">  </div><div class=\"line\">stud1Mark2.<span class=\"type\">InternalMarks</span> = <span class=\"number\">87</span></div><div class=\"line\"><span class=\"built_in\">print</span>(stud1Mark2.<span class=\"type\">InternalMarks</span>)</div><div class=\"line\"><span class=\"comment\">//97</span></div><div class=\"line\"><span class=\"comment\">//87</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.pi)\"</span>)</div></pre></td></tr></table></figure>","more":"<p>存储属性可以是<strong>变量存储属性</strong>（用关键字var定义），也可以是<strong>常量存储属性</strong>（用关键字let定义）。</p>\n<ul>\n<li>可以在定义存储属性的时候指定默认值</li>\n<li>也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.pi)\"</span>)</div><div class=\"line\"><span class=\"comment\">//67</span></div><div class=\"line\"><span class=\"comment\">//3.1415</span></div></pre></td></tr></table></figure>\n<p>//构造方法给常量赋值<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Number</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> digits: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> numbers: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(digits: <span class=\"type\">Int</span>, numbers : <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.digits = digits;</div><div class=\"line\">        <span class=\"keyword\">self</span>.numbers = numbers;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"type\">Number</span>(digits: <span class=\"number\">12345</span>, numbers: <span class=\"number\">3.14</span>)</div><div class=\"line\">n.digits = <span class=\"number\">67</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.digits)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(n.numbers)\"</span>)</div><div class=\"line\"><span class=\"comment\">//67</span></div><div class=\"line\"><span class=\"comment\">//3.14</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"延迟存储属性\"><a href=\"#延迟存储属性\" class=\"headerlink\" title=\"延迟存储属性\"></a>延迟存储属性</h3><p>延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。</p>\n<p>延迟存储属性一般用于：</p>\n<ul>\n<li>延迟对象的创建。</li>\n<li>当属性的值依赖于其他未知类</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> no = number() <span class=\"comment\">// `var` 关键字是必须的</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">number</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Runoob Swift 教程\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> firstsample = sample()</div><div class=\"line\"><span class=\"built_in\">print</span>(firstsample.no.name)</div><div class=\"line\"><span class=\"comment\">//Runoob Swift 教程</span></div></pre></td></tr></table></figure>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>计算属性不直接存储值，而是提供一个 getter 来获取值，一个可选的 setter 来间接设置其他属性或变量的值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1 = <span class=\"number\">0.0</span>, no2 = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">300.0</span>, breadth = <span class=\"number\">150.0</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> middle: (<span class=\"type\">Double</span>, <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (length / <span class=\"number\">2</span>, breadth / <span class=\"number\">2</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>(axis)&#123;</div><div class=\"line\">            no1 = axis.<span class=\"number\">0</span> - (length / <span class=\"number\">2</span>)</div><div class=\"line\">            no2 = axis.<span class=\"number\">1</span> - (breadth / <span class=\"number\">2</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> result = sample()</div><div class=\"line\"><span class=\"built_in\">print</span>(result.middle)</div><div class=\"line\">result.middle = (<span class=\"number\">0.0</span>, <span class=\"number\">10.0</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(result.no1)</div><div class=\"line\"><span class=\"built_in\">print</span>(result.no2)</div><div class=\"line\"><span class=\"comment\">//(150.0, 75.0)</span></div><div class=\"line\"><span class=\"comment\">//-150.0</span></div><div class=\"line\"><span class=\"comment\">//-65.0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"只读计算属性\"><a href=\"#只读计算属性\" class=\"headerlink\" title=\"只读计算属性\"></a>只读计算属性</h3><p>只有 getter 没有 setter 的计算属性就是只读计算属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">film</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> head = <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> duration = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> metaInfo: [<span class=\"type\">String</span>:<span class=\"type\">String</span>] &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [</div><div class=\"line\">            <span class=\"string\">\"head\"</span>: <span class=\"keyword\">self</span>.head,</div><div class=\"line\">            <span class=\"string\">\"duration\"</span>:<span class=\"string\">\"\\(self.duration)\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> movie = film()</div><div class=\"line\">movie.head = <span class=\"string\">\"Swift 属性\"</span></div><div class=\"line\">movie.duration = <span class=\"number\">3.09</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(movie.metaInfo[<span class=\"string\">\"head\"</span>]!)</div><div class=\"line\"><span class=\"built_in\">print</span>(movie.metaInfo[<span class=\"string\">\"duration\"</span>]!)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Swift 属性</span></div><div class=\"line\"><span class=\"comment\">//3.09</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h2><p>属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。</p>\n<p>可以为属性添加如下的一个或全部观察器：</p>\n<ul>\n<li>willSet在设置新的值之前调用</li>\n<li>didSet在新的值被设置之后立即调用</li>\n<li>willSet和didSet观察器在属性初始化过程中不会被调用</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Samplepgm</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>(newTotal)&#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"计数器: \\(newTotal)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> counter &gt; oldValue &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"新增数 \\(counter - oldValue)\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">NewCounter</span> = <span class=\"type\">Samplepgm</span>()</div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">800</span></div><div class=\"line\"><span class=\"comment\">//计数器: 100</span></div><div class=\"line\"><span class=\"comment\">//新增数 100</span></div><div class=\"line\"><span class=\"comment\">//计数器: 800</span></div><div class=\"line\"><span class=\"comment\">//新增数 700</span></div></pre></td></tr></table></figure>\n<h2 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h2><p>类型属性是作为类型定义的一部分写在类型最外层的花括号（{}）内。</p>\n<p>使用关键字 <strong>static</strong> 来定义值类型的类型属性，关键字 <strong>class</strong> 来为类定义类型属性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Structname</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\" \"</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Enumname</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\" \"</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classname</span> </span>&#123;</div><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">computedTypeProperty</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取和设置类型属性的值\"><a href=\"#获取和设置类型属性的值\" class=\"headerlink\" title=\"获取和设置类型属性的值\"></a>获取和设置类型属性的值</h3><p>类型属性是通过类型本身来获取和设置，而不是通过实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StudMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> markCount = <span class=\"number\">97</span></div><div class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> totalCount = <span class=\"number\">0</span></div><div class=\"line\">   <span class=\"keyword\">var</span> <span class=\"type\">InternalMarks</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"type\">InternalMarks</span> &gt; <span class=\"type\">StudMarks</span>.markCount &#123;</div><div class=\"line\">            <span class=\"type\">InternalMarks</span> = <span class=\"type\">StudMarks</span>.markCount</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">if</span> <span class=\"type\">InternalMarks</span> &gt; <span class=\"type\">StudMarks</span>.totalCount &#123;</div><div class=\"line\">            <span class=\"comment\">//类型属性赋值</span></div><div class=\"line\">            <span class=\"type\">StudMarks</span>.totalCount = <span class=\"type\">InternalMarks</span></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> stud1Mark1 = <span class=\"type\">StudMarks</span>()</div><div class=\"line\"><span class=\"keyword\">var</span> stud1Mark2 = <span class=\"type\">StudMarks</span>()</div><div class=\"line\">  </div><div class=\"line\">stud1Mark1.<span class=\"type\">InternalMarks</span> = <span class=\"number\">98</span></div><div class=\"line\"><span class=\"built_in\">print</span>(stud1Mark1.<span class=\"type\">InternalMarks</span>) </div><div class=\"line\">  </div><div class=\"line\">stud1Mark2.<span class=\"type\">InternalMarks</span> = <span class=\"number\">87</span></div><div class=\"line\"><span class=\"built_in\">print</span>(stud1Mark2.<span class=\"type\">InternalMarks</span>)</div><div class=\"line\"><span class=\"comment\">//97</span></div><div class=\"line\"><span class=\"comment\">//87</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-扩展","date":"2017-06-06T08:53:57.000Z","_content":"\n扩展就是向一个已有的类、结构体或枚举类型添加新功能。\n扩展可以对一个类型添加新的功能，但是不能重写已有的功能。\n\nSwift 中的扩展可以：\n- 添加计算型属性和计算型静态属性\n- 定义实例方法和类型方法\n- 提供新的构造器\n- 定义下标\n- 定义和使用新的嵌套类型\n- 使一个已有类型符合某个协议\n\n<!-- more -->\n\n## 语法\n\n\n扩展声明使用关键字 extension：\n\n```swift\nextension SomeType {\n    // 加到SomeType的新功能写到这里\n}\n```\n\n```swift\nextension SomeType: SomeProtocol, AnotherProctocol {\n    // 协议实现写到这里\n}\n```\n\n\n## 计算型属性\n\n扩展可以向已有类型添加计算型实例属性和计算型类型属性。\n\n\n```swift\nextension Int {\n   var add: Int {return self + 100 }\n   var sub: Int { return self - 10 }\n   var mul: Int { return self * 10 }\n   var div: Int { return self / 5 }\n}\n    \nlet addition = 3.add\nprint(\"加法运算后的值：\\(addition)\")\n    \nlet subtraction = 120.sub\nprint(\"减法运算后的值：\\(subtraction)\")\n    \nlet multiplication = 39.mul\nprint(\"乘法运算后的值：\\(multiplication)\")\n    \nlet division = 55.div\nprint(\"除法运算后的值: \\(division)\")\n    \nlet mix = 30.add + 34.sub\nprint(\"混合运算结果：\\(mix)\")\n```\n\n\n## 构造器\n\n扩展可以向已有类型添加新的构造器。\n\n\n```swift\nstruct sum {\n    var num1 = 100, num2 = 200\n}\n    \nstruct diff {\n    var no1 = 200, no2 = 100\n}\n    \nstruct mult {\n    var a = sum()\n    var b = diff()\n}\n    \nextension mult {\n    init(x: sum, y: diff) {\n        _ = x.num1 + x.num2\n        _ = y.no1 + y.no2\n    }\n}\n    \nlet a = sum(num1: 100, num2: 200)\nlet b = diff(no1: 200, no2: 100)\nlet getMult = mult(x: a, y: b)\n    \nprint(\"getMult sum\\(getMult.a.num1, getMult.a.num2)\")\nprint(\"getMult diff\\(getMult.b.no1, getMult.b.no2)\")   \n```\n\n\n## 方法\n\n扩展可以向已有类型添加新的实例方法和类型方法。\n\n\n```swift\nextension Int {\n   func topics(summation: () -> ()) {\n      for _ in 0..<self {\n         summation() \n      }\n   }\n}  \n\n4.topics({\n   print(\"扩展模块内\")       \n})    \n    \n3.topics({\n   print(\"内型转换模块内\")       \n})  \n```\n  \n\n这个topics方法使用了一个() -> ()类型的单参数，表明函数没有参数而且没有返回值。\n\n## 可变实例方法\n\n通过扩展添加的实例方法也可以修改该实例本身。\n\n  \n\n```swift\nextension Double {\n   mutating func square() {\n      let pi = 3.1415\n      self = pi * self * self\n   }\n}\n    \nvar Trial1 = 3.3\nTrial1.square()\nprint(\"圆的面积为: \\(Trial1)\")\n    \nvar Trial2 = 5.8\nTrial2.square()\nprint(\"圆的面积为: \\(Trial2)\")\n    \nvar Trial3 = 120.3\nTrial3.square()\nprint(\"圆的面积为: \\(Trial3)\")  \n```\n  \n\n## 下标\n\n扩展可以向一个已有类型添加新下标。\n\n  \n\n```swift\nextension Int {\n   subscript(var multtable: Int) -> Int {\n      var no1 = 1\n      while multtable > 0 {\n         no1 *= 10\n         --multtable\n      }\n      return (self / no1) % 10\n   }\n}\n    \nprint(12[0])  //2\nprint(7869[1]) //6\nprint(786543[2]) //5      \n```\n  \n\n## 嵌套类型\n\n扩展可以向已有的类、结构体和枚举添加新的嵌套类型：\n  \n\n```swift\nextension Int {\n   enum calc\n   {\n      case add\n      case sub\n      case mult\n      case div\n      case anything\n   }\n  \n   var print: calc {\n      switch self\n      {\n         case 0:\n            return .add\n         case 1:\n            return .sub\n         case 2:\n            return .mult\n         case 3:\n            return .div\n         default:\n            return .anything\n       }\n   }\n}\n    \nfunc result(numb: [Int]) {\n   for i in numb {\n      switch i.print {\n         case .add:\n            print(\" 10 \")\n          case .sub:\n            print(\" 20 \")\n         case .mult:\n         print(\" 30 \")\n         case .div:\n         print(\" 40 \")\n         default:\n         print(\" 50 \")\n\n      }\n   }\n}\n    \nresult([0, 1, 2, 3, 4, 7])\n```\n  \n","source":"_posts/Swift笔记-扩展.md","raw":"---\ntitle: Swift笔记-扩展\ndate: 2017-06-06 16:53:57\ntags: \n\t- Swift \ncategories: Swift \n---\n\n扩展就是向一个已有的类、结构体或枚举类型添加新功能。\n扩展可以对一个类型添加新的功能，但是不能重写已有的功能。\n\nSwift 中的扩展可以：\n- 添加计算型属性和计算型静态属性\n- 定义实例方法和类型方法\n- 提供新的构造器\n- 定义下标\n- 定义和使用新的嵌套类型\n- 使一个已有类型符合某个协议\n\n<!-- more -->\n\n## 语法\n\n\n扩展声明使用关键字 extension：\n\n```swift\nextension SomeType {\n    // 加到SomeType的新功能写到这里\n}\n```\n\n```swift\nextension SomeType: SomeProtocol, AnotherProctocol {\n    // 协议实现写到这里\n}\n```\n\n\n## 计算型属性\n\n扩展可以向已有类型添加计算型实例属性和计算型类型属性。\n\n\n```swift\nextension Int {\n   var add: Int {return self + 100 }\n   var sub: Int { return self - 10 }\n   var mul: Int { return self * 10 }\n   var div: Int { return self / 5 }\n}\n    \nlet addition = 3.add\nprint(\"加法运算后的值：\\(addition)\")\n    \nlet subtraction = 120.sub\nprint(\"减法运算后的值：\\(subtraction)\")\n    \nlet multiplication = 39.mul\nprint(\"乘法运算后的值：\\(multiplication)\")\n    \nlet division = 55.div\nprint(\"除法运算后的值: \\(division)\")\n    \nlet mix = 30.add + 34.sub\nprint(\"混合运算结果：\\(mix)\")\n```\n\n\n## 构造器\n\n扩展可以向已有类型添加新的构造器。\n\n\n```swift\nstruct sum {\n    var num1 = 100, num2 = 200\n}\n    \nstruct diff {\n    var no1 = 200, no2 = 100\n}\n    \nstruct mult {\n    var a = sum()\n    var b = diff()\n}\n    \nextension mult {\n    init(x: sum, y: diff) {\n        _ = x.num1 + x.num2\n        _ = y.no1 + y.no2\n    }\n}\n    \nlet a = sum(num1: 100, num2: 200)\nlet b = diff(no1: 200, no2: 100)\nlet getMult = mult(x: a, y: b)\n    \nprint(\"getMult sum\\(getMult.a.num1, getMult.a.num2)\")\nprint(\"getMult diff\\(getMult.b.no1, getMult.b.no2)\")   \n```\n\n\n## 方法\n\n扩展可以向已有类型添加新的实例方法和类型方法。\n\n\n```swift\nextension Int {\n   func topics(summation: () -> ()) {\n      for _ in 0..<self {\n         summation() \n      }\n   }\n}  \n\n4.topics({\n   print(\"扩展模块内\")       \n})    \n    \n3.topics({\n   print(\"内型转换模块内\")       \n})  \n```\n  \n\n这个topics方法使用了一个() -> ()类型的单参数，表明函数没有参数而且没有返回值。\n\n## 可变实例方法\n\n通过扩展添加的实例方法也可以修改该实例本身。\n\n  \n\n```swift\nextension Double {\n   mutating func square() {\n      let pi = 3.1415\n      self = pi * self * self\n   }\n}\n    \nvar Trial1 = 3.3\nTrial1.square()\nprint(\"圆的面积为: \\(Trial1)\")\n    \nvar Trial2 = 5.8\nTrial2.square()\nprint(\"圆的面积为: \\(Trial2)\")\n    \nvar Trial3 = 120.3\nTrial3.square()\nprint(\"圆的面积为: \\(Trial3)\")  \n```\n  \n\n## 下标\n\n扩展可以向一个已有类型添加新下标。\n\n  \n\n```swift\nextension Int {\n   subscript(var multtable: Int) -> Int {\n      var no1 = 1\n      while multtable > 0 {\n         no1 *= 10\n         --multtable\n      }\n      return (self / no1) % 10\n   }\n}\n    \nprint(12[0])  //2\nprint(7869[1]) //6\nprint(786543[2]) //5      \n```\n  \n\n## 嵌套类型\n\n扩展可以向已有的类、结构体和枚举添加新的嵌套类型：\n  \n\n```swift\nextension Int {\n   enum calc\n   {\n      case add\n      case sub\n      case mult\n      case div\n      case anything\n   }\n  \n   var print: calc {\n      switch self\n      {\n         case 0:\n            return .add\n         case 1:\n            return .sub\n         case 2:\n            return .mult\n         case 3:\n            return .div\n         default:\n            return .anything\n       }\n   }\n}\n    \nfunc result(numb: [Int]) {\n   for i in numb {\n      switch i.print {\n         case .add:\n            print(\" 10 \")\n          case .sub:\n            print(\" 20 \")\n         case .mult:\n         print(\" 30 \")\n         case .div:\n         print(\" 40 \")\n         default:\n         print(\" 50 \")\n\n      }\n   }\n}\n    \nresult([0, 1, 2, 3, 4, 7])\n```\n  \n","slug":"Swift笔记-扩展","published":1,"updated":"2017-08-10T12:01:34.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftc002nwou5luprr0o8","content":"<p>扩展就是向一个已有的类、结构体或枚举类型添加新功能。<br>扩展可以对一个类型添加新的功能，但是不能重写已有的功能。</p>\n<p>Swift 中的扩展可以：</p>\n<ul>\n<li>添加计算型属性和计算型静态属性</li>\n<li>定义实例方法和类型方法</li>\n<li>提供新的构造器</li>\n<li>定义下标</li>\n<li>定义和使用新的嵌套类型</li>\n<li>使一个已有类型符合某个协议</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>扩展声明使用关键字 extension：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 加到SomeType的新功能写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProctocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议实现写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"计算型属性\"><a href=\"#计算型属性\" class=\"headerlink\" title=\"计算型属性\"></a>计算型属性</h2><p>扩展可以向已有类型添加计算型实例属性和计算型类型属性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> add: <span class=\"type\">Int</span> &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">self</span> + <span class=\"number\">100</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> sub: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> - <span class=\"number\">10</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> mul: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> * <span class=\"number\">10</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> div: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">5</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> addition = <span class=\"number\">3</span>.add</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"加法运算后的值：\\(addition)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> subtraction = <span class=\"number\">120</span>.sub</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"减法运算后的值：\\(subtraction)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> multiplication = <span class=\"number\">39</span>.mul</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"乘法运算后的值：\\(multiplication)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> division = <span class=\"number\">55</span>.div</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"除法运算后的值: \\(division)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> mix = <span class=\"number\">30</span>.add + <span class=\"number\">34</span>.sub</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"混合运算结果：\\(mix)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>扩展可以向已有类型添加新的构造器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sum</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num1 = <span class=\"number\">100</span>, num2 = <span class=\"number\">200</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">diff</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1 = <span class=\"number\">200</span>, no2 = <span class=\"number\">100</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = sum()</div><div class=\"line\">    <span class=\"keyword\">var</span> b = diff()</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">mult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(x: sum, y: diff) &#123;</div><div class=\"line\">        <span class=\"number\">_</span> = x.num1 + x.num2</div><div class=\"line\">        <span class=\"number\">_</span> = y.no1 + y.no2</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> a = sum(num1: <span class=\"number\">100</span>, num2: <span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> b = diff(no1: <span class=\"number\">200</span>, no2: <span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> getMult = mult(x: a, y: b)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"getMult sum\\(getMult.a.num1, getMult.a.num2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"getMult diff\\(getMult.b.no1, getMult.b.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>扩展可以向已有类型添加新的实例方法和类型方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">topics</span><span class=\"params\">(summation: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"keyword\">self</span> &#123;</div><div class=\"line\">         summation() </div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">4</span>.topics(&#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"扩展模块内\"</span>)       </div><div class=\"line\">&#125;)    </div><div class=\"line\">    </div><div class=\"line\"><span class=\"number\">3</span>.topics(&#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"内型转换模块内\"</span>)       </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这个topics方法使用了一个() -&gt; ()类型的单参数，表明函数没有参数而且没有返回值。</p>\n<h2 id=\"可变实例方法\"><a href=\"#可变实例方法\" class=\"headerlink\" title=\"可变实例方法\"></a>可变实例方法</h2><p>通过扩展添加的实例方法也可以修改该实例本身。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Double</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">      <span class=\"keyword\">self</span> = pi * <span class=\"keyword\">self</span> * <span class=\"keyword\">self</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial1</span> = <span class=\"number\">3.3</span></div><div class=\"line\"><span class=\"type\">Trial1</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial1)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial2</span> = <span class=\"number\">5.8</span></div><div class=\"line\"><span class=\"type\">Trial2</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial2)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial3</span> = <span class=\"number\">120.3</span></div><div class=\"line\"><span class=\"type\">Trial3</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial3)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>扩展可以向一个已有类型添加新下标。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"keyword\">var</span> multtable: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> no1 = <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">while</span> multtable &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">         no1 *= <span class=\"number\">10</span></div><div class=\"line\">         --multtable</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">self</span> / no1) % <span class=\"number\">10</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">12</span>[<span class=\"number\">0</span>])  <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7869</span>[<span class=\"number\">1</span>]) <span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">786543</span>[<span class=\"number\">2</span>]) <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h2 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h2><p>扩展可以向已有的类、结构体和枚举添加新的嵌套类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">calc</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> add</div><div class=\"line\">      <span class=\"keyword\">case</span> sub</div><div class=\"line\">      <span class=\"keyword\">case</span> mult</div><div class=\"line\">      <span class=\"keyword\">case</span> div</div><div class=\"line\">      <span class=\"keyword\">case</span> anything</div><div class=\"line\">   &#125;</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">var</span> <span class=\"built_in\">print</span>: calc &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span></div><div class=\"line\">      &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .add</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .sub</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .mult</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .div</div><div class=\"line\">         <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .anything</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">(numb: [Int])</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numb &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> i.<span class=\"built_in\">print</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> .add:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\" 10 \"</span>)</div><div class=\"line\">          <span class=\"keyword\">case</span> .sub:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\" 20 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">case</span> .mult:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 30 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">case</span> .div:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 40 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">default</span>:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 50 \"</span>)</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\">result([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>])</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>扩展就是向一个已有的类、结构体或枚举类型添加新功能。<br>扩展可以对一个类型添加新的功能，但是不能重写已有的功能。</p>\n<p>Swift 中的扩展可以：</p>\n<ul>\n<li>添加计算型属性和计算型静态属性</li>\n<li>定义实例方法和类型方法</li>\n<li>提供新的构造器</li>\n<li>定义下标</li>\n<li>定义和使用新的嵌套类型</li>\n<li>使一个已有类型符合某个协议</li>\n</ul>","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>扩展声明使用关键字 extension：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 加到SomeType的新功能写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProctocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议实现写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"计算型属性\"><a href=\"#计算型属性\" class=\"headerlink\" title=\"计算型属性\"></a>计算型属性</h2><p>扩展可以向已有类型添加计算型实例属性和计算型类型属性。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> add: <span class=\"type\">Int</span> &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">self</span> + <span class=\"number\">100</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> sub: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> - <span class=\"number\">10</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> mul: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> * <span class=\"number\">10</span> &#125;</div><div class=\"line\">   <span class=\"keyword\">var</span> div: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">5</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> addition = <span class=\"number\">3</span>.add</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"加法运算后的值：\\(addition)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> subtraction = <span class=\"number\">120</span>.sub</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"减法运算后的值：\\(subtraction)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> multiplication = <span class=\"number\">39</span>.mul</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"乘法运算后的值：\\(multiplication)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> division = <span class=\"number\">55</span>.div</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"除法运算后的值: \\(division)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> mix = <span class=\"number\">30</span>.add + <span class=\"number\">34</span>.sub</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"混合运算结果：\\(mix)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>扩展可以向已有类型添加新的构造器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sum</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num1 = <span class=\"number\">100</span>, num2 = <span class=\"number\">200</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">diff</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1 = <span class=\"number\">200</span>, no2 = <span class=\"number\">100</span></div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = sum()</div><div class=\"line\">    <span class=\"keyword\">var</span> b = diff()</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">mult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(x: sum, y: diff) &#123;</div><div class=\"line\">        <span class=\"number\">_</span> = x.num1 + x.num2</div><div class=\"line\">        <span class=\"number\">_</span> = y.no1 + y.no2</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">let</span> a = sum(num1: <span class=\"number\">100</span>, num2: <span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> b = diff(no1: <span class=\"number\">200</span>, no2: <span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> getMult = mult(x: a, y: b)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"getMult sum\\(getMult.a.num1, getMult.a.num2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"getMult diff\\(getMult.b.no1, getMult.b.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>扩展可以向已有类型添加新的实例方法和类型方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">topics</span><span class=\"params\">(summation: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"keyword\">self</span> &#123;</div><div class=\"line\">         summation() </div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">4</span>.topics(&#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"扩展模块内\"</span>)       </div><div class=\"line\">&#125;)    </div><div class=\"line\">    </div><div class=\"line\"><span class=\"number\">3</span>.topics(&#123;</div><div class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"内型转换模块内\"</span>)       </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这个topics方法使用了一个() -&gt; ()类型的单参数，表明函数没有参数而且没有返回值。</p>\n<h2 id=\"可变实例方法\"><a href=\"#可变实例方法\" class=\"headerlink\" title=\"可变实例方法\"></a>可变实例方法</h2><p>通过扩展添加的实例方法也可以修改该实例本身。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Double</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415</span></div><div class=\"line\">      <span class=\"keyword\">self</span> = pi * <span class=\"keyword\">self</span> * <span class=\"keyword\">self</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial1</span> = <span class=\"number\">3.3</span></div><div class=\"line\"><span class=\"type\">Trial1</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial1)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial2</span> = <span class=\"number\">5.8</span></div><div class=\"line\"><span class=\"type\">Trial2</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial2)\"</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Trial3</span> = <span class=\"number\">120.3</span></div><div class=\"line\"><span class=\"type\">Trial3</span>.square()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"圆的面积为: \\(Trial3)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>扩展可以向一个已有类型添加新下标。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"keyword\">var</span> multtable: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> no1 = <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">while</span> multtable &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">         no1 *= <span class=\"number\">10</span></div><div class=\"line\">         --multtable</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">self</span> / no1) % <span class=\"number\">10</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">12</span>[<span class=\"number\">0</span>])  <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7869</span>[<span class=\"number\">1</span>]) <span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">786543</span>[<span class=\"number\">2</span>]) <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<h2 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h2><p>扩展可以向已有的类、结构体和枚举添加新的嵌套类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">calc</span></span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> add</div><div class=\"line\">      <span class=\"keyword\">case</span> sub</div><div class=\"line\">      <span class=\"keyword\">case</span> mult</div><div class=\"line\">      <span class=\"keyword\">case</span> div</div><div class=\"line\">      <span class=\"keyword\">case</span> anything</div><div class=\"line\">   &#125;</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">var</span> <span class=\"built_in\">print</span>: calc &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span></div><div class=\"line\">      &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .add</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .sub</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .mult</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .div</div><div class=\"line\">         <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .anything</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">(numb: [Int])</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numb &#123;</div><div class=\"line\">      <span class=\"keyword\">switch</span> i.<span class=\"built_in\">print</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> .add:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\" 10 \"</span>)</div><div class=\"line\">          <span class=\"keyword\">case</span> .sub:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\" 20 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">case</span> .mult:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 30 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">case</span> .div:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 40 \"</span>)</div><div class=\"line\">         <span class=\"keyword\">default</span>:</div><div class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\" 50 \"</span>)</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\">result([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>])</div></pre></td></tr></table></figure>"},{"title":"Swift笔记-控制流","date":"2017-06-05T06:26:31.000Z","_content":"\n## For循环\n\n### For-In\n\n你可以使用for-in循环来遍历一个集合里面的所有元素\n```swift\nfor index in 1...5 {\n    print(\"\\(index) times 5 is \\(index * 5)\")\n}\n// 1 times 5 is 5\n// 2 times 5 is 10\n// 3 times 5 is 15\n// 4 times 5 is 20\n// 5 times 5 is 25\n```\n\n如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：\n\n```swift\nlet base = 3\nlet power = 10\nvar answer = 1\nfor _ in 1...power {\n    answer *= base\n}\nprint(\"\\(base) to the power of \\(power) is \\(answer)\")\n// 输出 \"3 to the power of 10 is 59049\"\n```\n\n<!-- more -->\n\n\n### For\n```swift\nfor var index = 0; index < 3; ++index {\n    print(\"index is \\(index)\")\n}\n// index is 0\n// index is 1\n// index is 2\n```\n## While循环\n\n- while循环，每次在循环开始时计算条件是否符合；\n- repeat-while循环，每次在循环结束时计算条件是否符合。while循环，每次在循环开始时计算条件是否符合；\nrepeat-while循环，每次在循环结束时计算条件是否符合。\n\n### While\n\n\n```swift\nwhile condition {  \n    statements\n}\n```\n\n### Repeat-While\n\n类似于java的do while\n\n```swift\nrepeat {\n    statements\n} while condition\n```\n\n\n## 条件语句\n\n### if\n```swift\nvar temperatureInFahrenheit = 30\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n}\n// 输出 \"It's very cold. Consider wearing a scarf.\"\n```\n\n### if else\n```swift\ntemperatureInFahrenheit = 40\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else {\n    print(\"It's not that cold. Wear a t-shirt.\")\n}\n// 输出 \"It's not that cold. Wear a t-shirt.\"\n```\n\n### if else if else \n```swift\ntemperatureInFahrenheit = 90\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else if temperatureInFahrenheit >= 86 {\n    print(\"It's really warm. Don't forget to wear sunscreen.\")\n} else {\n    print(\"It's not that cold. Wear a t-shirt.\")\n}\n// 输出 \"It's really warm. Don't forget to wear sunscreen.\"\n```\n### if else if\n\n```swift\ntemperatureInFahrenheit = 72\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else if temperatureInFahrenheit >= 86 {\n    print(\"It's really warm. Don't forget to wear sunscreen.\")\n}\n```\n\n## Switch\n\n\n```swift\nswitch some value to consider {\ncase value 1:\n    respond to value 1\ncase value 2, value 3:\n    respond to value 2 or 3\ndefault:\n    otherwise, do something else\n}\n```\n\n\n```swift\nlet someCharacter: Character = \"e\"\nswitch someCharacter {\ncase \"a\", \"e\", \"i\", \"o\", \"u\":\n    print(\"\\(someCharacter) is a vowel\")\ncase \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n\"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n    print(\"\\(someCharacter) is a consonant\")\ndefault:\n    print(\"\\(someCharacter) is not a vowel or a consonant\")\n}\n// 输出 \"e is a vowel\"\n```\n\n### 区间匹配\n```swift\nlet approximateCount = 62\nlet countedThings = \"moons orbiting Saturn\"\nvar naturalCount: String\nswitch approximateCount {\ncase 0:\n    naturalCount = \"no\"\ncase 1..<5:\n    naturalCount = \"a few\"\ncase 5..<12:\n    naturalCount = \"several\"\ncase 12..<100:\n    naturalCount = \"dozens of\"\ncase 100..<1000:\n    naturalCount = \"hundreds of\"\ndefault:\n    naturalCount = \"many\"\n}\nprint(\"There are \\(naturalCount) \\(countedThings).\")\n// 输出 \"There are dozens of moons orbiting Saturn.\"\n```\n### 元组\n\n```swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    print(\"(0, 0) is at the origin\")\ncase (_, 0):\n    print(\"(\\(somePoint.0), 0) is on the x-axis\")\ncase (0, _):\n    print(\"(0, \\(somePoint.1)) is on the y-axis\")\ncase (-2...2, -2...2):\n    print(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\ndefault:\n    print(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n}\n// 输出 \"(1, 1) is inside the box\"\n```\n\n### 值绑定\n```swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    print(\"on the x-axis with an x value of \\(x)\")\ncase (0, let y):\n    print(\"on the y-axis with a y value of \\(y)\")\ncase let (x, y):\n    print(\"somewhere else at (\\(x), \\(y))\")\n}\n// 输出 \"on the x-axis with an x value of 2\"\n```\n\n### Where\n```swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    print(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y) where x == -y:\n    print(\"(\\(x), \\(y)) is on the line x == -y\")\ncase let (x, y):\n    print(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n// 输出 \"(1, -1) is on the line x == -y\"\n```\n\n## 控制转移语句\nSwift 有五种控制转移语句：\n\n- continue\n- break\n- fallthrough\n- return\n- throw\n\n### Continue\n```swift\nlet puzzleInput = \"great minds think alike\"\nvar puzzleOutput = \"\"\nfor character in puzzleInput.characters {\n    switch character {\n    case \"a\", \"e\", \"i\", \"o\", \"u\", \" \":\n        continue\n    default:\n        puzzleOutput.append(character)\n    }\n}\nprint(puzzleOutput)\n// 输出 \"grtmndsthnklk\"\n```\n### Break\nbreak语句会立刻结束整个控制流的执行。\n\n#### 循环语句中的 break\n当在一个循环体中使用break时，会立刻中断该循环体的执行，然后跳转到表示循环体结束的大括号(})后的第一行代码。\n\n#### Switch 语句中的 break\n当在一个switch代码块中使用break时，会立即中断该switch代码块的执行，并且跳转到表示switch代码块结束的大括号(})后的第一行代码。\n\n### fallthrough\n\n```swift\nlet integerToDescribe = 5\nvar description = \"The number \\(integerToDescribe) is\"\nswitch integerToDescribe {\ncase 2, 3, 5, 7, 11, 13, 17, 19:\n    description += \" a prime number, and also\"\n    fallthrough\ndefault:\n    description += \" an integer.\"\n}\nprint(description)\n// 输出 \"The number 5 is a prime number, and also an integer.\"\n```\n\n### return\n像if语句一样，guard的执行取决于一个表达式的布尔值。我们可以使用guard语句来要求条件必须为真时，以执行guard语句后的代码。不同于if语句，一个guard语句总是有一个else分句，如果条件不为真则执行else分句中的代码。\n```swift\nfunc greet(person: [String: String]) {\n    guard let name = person[\"name\"] else {\n        return\n    }\n  \n    print(\"Hello \\(name)\")\n  \n    guard let location = person[\"location\"] else {\n        print(\"I hope the weather is nice near you.\")\n        return\n    }\n  \n    print(\"I hope the weather is nice in \\(location).\")\n}\n  \ngreet([\"name\": \"John\"])\n// prints \"Hello John!\"\n// prints \"I hope the weather is nice near you.\"\ngreet([\"name\": \"Jane\", \"location\": \"Cupertino\"])\n// prints \"Hello Jane!\"\n// prints \"I hope the weather is nice in Cupertino.\"\n``` \n  \n## 检测 API 可用性\n  \n```swift\nif #available(iOS 9, OSX 10.10, *) {\n    // 在 iOS 使用 iOS 9 的 API, 在 OS X 使用 OS X v10.10 的 API\n} else {\n    // 使用先前版本的 iOS 和 OS X 的 API\n}\n```","source":"_posts/Swift笔记-控制流.md","raw":"---\ntitle: Swift笔记-控制流\ndate: 2017-06-05 14:26:31\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## For循环\n\n### For-In\n\n你可以使用for-in循环来遍历一个集合里面的所有元素\n```swift\nfor index in 1...5 {\n    print(\"\\(index) times 5 is \\(index * 5)\")\n}\n// 1 times 5 is 5\n// 2 times 5 is 10\n// 3 times 5 is 15\n// 4 times 5 is 20\n// 5 times 5 is 25\n```\n\n如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：\n\n```swift\nlet base = 3\nlet power = 10\nvar answer = 1\nfor _ in 1...power {\n    answer *= base\n}\nprint(\"\\(base) to the power of \\(power) is \\(answer)\")\n// 输出 \"3 to the power of 10 is 59049\"\n```\n\n<!-- more -->\n\n\n### For\n```swift\nfor var index = 0; index < 3; ++index {\n    print(\"index is \\(index)\")\n}\n// index is 0\n// index is 1\n// index is 2\n```\n## While循环\n\n- while循环，每次在循环开始时计算条件是否符合；\n- repeat-while循环，每次在循环结束时计算条件是否符合。while循环，每次在循环开始时计算条件是否符合；\nrepeat-while循环，每次在循环结束时计算条件是否符合。\n\n### While\n\n\n```swift\nwhile condition {  \n    statements\n}\n```\n\n### Repeat-While\n\n类似于java的do while\n\n```swift\nrepeat {\n    statements\n} while condition\n```\n\n\n## 条件语句\n\n### if\n```swift\nvar temperatureInFahrenheit = 30\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n}\n// 输出 \"It's very cold. Consider wearing a scarf.\"\n```\n\n### if else\n```swift\ntemperatureInFahrenheit = 40\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else {\n    print(\"It's not that cold. Wear a t-shirt.\")\n}\n// 输出 \"It's not that cold. Wear a t-shirt.\"\n```\n\n### if else if else \n```swift\ntemperatureInFahrenheit = 90\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else if temperatureInFahrenheit >= 86 {\n    print(\"It's really warm. Don't forget to wear sunscreen.\")\n} else {\n    print(\"It's not that cold. Wear a t-shirt.\")\n}\n// 输出 \"It's really warm. Don't forget to wear sunscreen.\"\n```\n### if else if\n\n```swift\ntemperatureInFahrenheit = 72\nif temperatureInFahrenheit <= 32 {\n    print(\"It's very cold. Consider wearing a scarf.\")\n} else if temperatureInFahrenheit >= 86 {\n    print(\"It's really warm. Don't forget to wear sunscreen.\")\n}\n```\n\n## Switch\n\n\n```swift\nswitch some value to consider {\ncase value 1:\n    respond to value 1\ncase value 2, value 3:\n    respond to value 2 or 3\ndefault:\n    otherwise, do something else\n}\n```\n\n\n```swift\nlet someCharacter: Character = \"e\"\nswitch someCharacter {\ncase \"a\", \"e\", \"i\", \"o\", \"u\":\n    print(\"\\(someCharacter) is a vowel\")\ncase \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n\"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n    print(\"\\(someCharacter) is a consonant\")\ndefault:\n    print(\"\\(someCharacter) is not a vowel or a consonant\")\n}\n// 输出 \"e is a vowel\"\n```\n\n### 区间匹配\n```swift\nlet approximateCount = 62\nlet countedThings = \"moons orbiting Saturn\"\nvar naturalCount: String\nswitch approximateCount {\ncase 0:\n    naturalCount = \"no\"\ncase 1..<5:\n    naturalCount = \"a few\"\ncase 5..<12:\n    naturalCount = \"several\"\ncase 12..<100:\n    naturalCount = \"dozens of\"\ncase 100..<1000:\n    naturalCount = \"hundreds of\"\ndefault:\n    naturalCount = \"many\"\n}\nprint(\"There are \\(naturalCount) \\(countedThings).\")\n// 输出 \"There are dozens of moons orbiting Saturn.\"\n```\n### 元组\n\n```swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    print(\"(0, 0) is at the origin\")\ncase (_, 0):\n    print(\"(\\(somePoint.0), 0) is on the x-axis\")\ncase (0, _):\n    print(\"(0, \\(somePoint.1)) is on the y-axis\")\ncase (-2...2, -2...2):\n    print(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\ndefault:\n    print(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n}\n// 输出 \"(1, 1) is inside the box\"\n```\n\n### 值绑定\n```swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    print(\"on the x-axis with an x value of \\(x)\")\ncase (0, let y):\n    print(\"on the y-axis with a y value of \\(y)\")\ncase let (x, y):\n    print(\"somewhere else at (\\(x), \\(y))\")\n}\n// 输出 \"on the x-axis with an x value of 2\"\n```\n\n### Where\n```swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    print(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y) where x == -y:\n    print(\"(\\(x), \\(y)) is on the line x == -y\")\ncase let (x, y):\n    print(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n// 输出 \"(1, -1) is on the line x == -y\"\n```\n\n## 控制转移语句\nSwift 有五种控制转移语句：\n\n- continue\n- break\n- fallthrough\n- return\n- throw\n\n### Continue\n```swift\nlet puzzleInput = \"great minds think alike\"\nvar puzzleOutput = \"\"\nfor character in puzzleInput.characters {\n    switch character {\n    case \"a\", \"e\", \"i\", \"o\", \"u\", \" \":\n        continue\n    default:\n        puzzleOutput.append(character)\n    }\n}\nprint(puzzleOutput)\n// 输出 \"grtmndsthnklk\"\n```\n### Break\nbreak语句会立刻结束整个控制流的执行。\n\n#### 循环语句中的 break\n当在一个循环体中使用break时，会立刻中断该循环体的执行，然后跳转到表示循环体结束的大括号(})后的第一行代码。\n\n#### Switch 语句中的 break\n当在一个switch代码块中使用break时，会立即中断该switch代码块的执行，并且跳转到表示switch代码块结束的大括号(})后的第一行代码。\n\n### fallthrough\n\n```swift\nlet integerToDescribe = 5\nvar description = \"The number \\(integerToDescribe) is\"\nswitch integerToDescribe {\ncase 2, 3, 5, 7, 11, 13, 17, 19:\n    description += \" a prime number, and also\"\n    fallthrough\ndefault:\n    description += \" an integer.\"\n}\nprint(description)\n// 输出 \"The number 5 is a prime number, and also an integer.\"\n```\n\n### return\n像if语句一样，guard的执行取决于一个表达式的布尔值。我们可以使用guard语句来要求条件必须为真时，以执行guard语句后的代码。不同于if语句，一个guard语句总是有一个else分句，如果条件不为真则执行else分句中的代码。\n```swift\nfunc greet(person: [String: String]) {\n    guard let name = person[\"name\"] else {\n        return\n    }\n  \n    print(\"Hello \\(name)\")\n  \n    guard let location = person[\"location\"] else {\n        print(\"I hope the weather is nice near you.\")\n        return\n    }\n  \n    print(\"I hope the weather is nice in \\(location).\")\n}\n  \ngreet([\"name\": \"John\"])\n// prints \"Hello John!\"\n// prints \"I hope the weather is nice near you.\"\ngreet([\"name\": \"Jane\", \"location\": \"Cupertino\"])\n// prints \"Hello Jane!\"\n// prints \"I hope the weather is nice in Cupertino.\"\n``` \n  \n## 检测 API 可用性\n  \n```swift\nif #available(iOS 9, OSX 10.10, *) {\n    // 在 iOS 使用 iOS 9 的 API, 在 OS X 使用 OS X v10.10 的 API\n} else {\n    // 使用先前版本的 iOS 和 OS X 的 API\n}\n```","slug":"Swift笔记-控制流","published":1,"updated":"2017-08-10T12:01:34.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftd002pwou50ca8n77x","content":"<h2 id=\"For循环\"><a href=\"#For循环\" class=\"headerlink\" title=\"For循环\"></a>For循环</h2><h3 id=\"For-In\"><a href=\"#For-In\" class=\"headerlink\" title=\"For-In\"></a>For-In</h3><p>你可以使用for-in循环来遍历一个集合里面的所有元素<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) times 5 is \\(index * 5)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 times 5 is 5</span></div><div class=\"line\"><span class=\"comment\">// 2 times 5 is 10</span></div><div class=\"line\"><span class=\"comment\">// 3 times 5 is 15</span></div><div class=\"line\"><span class=\"comment\">// 4 times 5 is 20</span></div><div class=\"line\"><span class=\"comment\">// 5 times 5 is 25</span></div></pre></td></tr></table></figure></p>\n<p>如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> base = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> power = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...power &#123;</div><div class=\"line\">    answer *= base</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(base) to the power of \\(power) is \\(answer)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"3 to the power of 10 is 59049\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"For\"><a href=\"#For\" class=\"headerlink\" title=\"For\"></a>For</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">3</span>; ++index &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"index is \\(index)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// index is 0</span></div><div class=\"line\"><span class=\"comment\">// index is 1</span></div><div class=\"line\"><span class=\"comment\">// index is 2</span></div></pre></td></tr></table></figure>\n<h2 id=\"While循环\"><a href=\"#While循环\" class=\"headerlink\" title=\"While循环\"></a>While循环</h2><ul>\n<li>while循环，每次在循环开始时计算条件是否符合；</li>\n<li>repeat-while循环，每次在循环结束时计算条件是否符合。while循环，每次在循环开始时计算条件是否符合；<br>repeat-while循环，每次在循环结束时计算条件是否符合。</li>\n</ul>\n<h3 id=\"While\"><a href=\"#While\" class=\"headerlink\" title=\"While\"></a>While</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition &#123;  </div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Repeat-While\"><a href=\"#Repeat-While\" class=\"headerlink\" title=\"Repeat-While\"></a>Repeat-While</h3><p>类似于java的do while</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repeat</span> &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> condition</div></pre></td></tr></table></figure>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temperatureInFahrenheit = <span class=\"number\">30</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's very cold. Consider wearing a scarf.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">40</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's not that cold. Wear a t-shirt.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's not that cold. Wear a t-shirt.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if else if else\"></a>if else if else</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">90</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> temperatureInFahrenheit &gt;= <span class=\"number\">86</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's really warm. Don't forget to wear sunscreen.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's not that cold. Wear a t-shirt.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's really warm. Don't forget to wear sunscreen.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else-if\"><a href=\"#if-else-if\" class=\"headerlink\" title=\"if else if\"></a>if else if</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">72</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> temperatureInFahrenheit &gt;= <span class=\"number\">86</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's really warm. Don't forget to wear sunscreen.\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span> some value to consider &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">1</span>:</div><div class=\"line\">    respond to value <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">2</span>, value <span class=\"number\">3</span>:</div><div class=\"line\">    respond to value <span class=\"number\">2</span> or <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    otherwise, <span class=\"keyword\">do</span> something <span class=\"keyword\">else</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someCharacter: <span class=\"type\">Character</span> = <span class=\"string\">\"e\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> someCharacter &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is a vowel\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\"><span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is a consonant\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is not a vowel or a consonant\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"e is a vowel\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"区间匹配\"><a href=\"#区间匹配\" class=\"headerlink\" title=\"区间匹配\"></a>区间匹配</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> approximateCount = <span class=\"number\">62</span></div><div class=\"line\"><span class=\"keyword\">let</span> countedThings = <span class=\"string\">\"moons orbiting Saturn\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> naturalCount: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">switch</span> approximateCount &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>..&lt;<span class=\"number\">5</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">5</span>..&lt;<span class=\"number\">12</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"several\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">12</span>..&lt;<span class=\"number\">100</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"dozens of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">100</span>..&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"hundreds of\"</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"many\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(naturalCount) \\(countedThings).\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"There are dozens of moons orbiting Saturn.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(0, 0) is at the origin\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), 0) is on the x-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">_</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(0, \\(somePoint.1)) is on the y-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, 1) is inside the box\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"值绑定\"><a href=\"#值绑定\" class=\"headerlink\" title=\"值绑定\"></a>值绑定</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"keyword\">let</span> y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the y-axis with a y value of \\(y)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"on the x-axis with an x value of 2\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Where\"><a href=\"#Where\" class=\"headerlink\" title=\"Where\"></a>Where</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == -y:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == -y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, -1) is on the line x == -y\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"控制转移语句\"><a href=\"#控制转移语句\" class=\"headerlink\" title=\"控制转移语句\"></a>控制转移语句</h2><p>Swift 有五种控制转移语句：</p>\n<ul>\n<li>continue</li>\n<li>break</li>\n<li>fallthrough</li>\n<li>return</li>\n<li>throw</li>\n</ul>\n<h3 id=\"Continue\"><a href=\"#Continue\" class=\"headerlink\" title=\"Continue\"></a>Continue</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> puzzleInput = <span class=\"string\">\"great minds think alike\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> puzzleOutput = <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> puzzleInput.characters &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> character &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\" \"</span>:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        puzzleOutput.append(character)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(puzzleOutput)</div><div class=\"line\"><span class=\"comment\">// 输出 \"grtmndsthnklk\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Break\"><a href=\"#Break\" class=\"headerlink\" title=\"Break\"></a>Break</h3><p>break语句会立刻结束整个控制流的执行。</p>\n<h4 id=\"循环语句中的-break\"><a href=\"#循环语句中的-break\" class=\"headerlink\" title=\"循环语句中的 break\"></a>循环语句中的 break</h4><p>当在一个循环体中使用break时，会立刻中断该循环体的执行，然后跳转到表示循环体结束的大括号(})后的第一行代码。</p>\n<h4 id=\"Switch-语句中的-break\"><a href=\"#Switch-语句中的-break\" class=\"headerlink\" title=\"Switch 语句中的 break\"></a>Switch 语句中的 break</h4><p>当在一个switch代码块中使用break时，会立即中断该switch代码块的执行，并且跳转到表示switch代码块结束的大括号(})后的第一行代码。</p>\n<h3 id=\"fallthrough\"><a href=\"#fallthrough\" class=\"headerlink\" title=\"fallthrough\"></a>fallthrough</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> integerToDescribe = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">var</span> description = <span class=\"string\">\"The number \\(integerToDescribe) is\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> integerToDescribe &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">    description += <span class=\"string\">\" a prime number, and also\"</span></div><div class=\"line\">    <span class=\"keyword\">fallthrough</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    description += <span class=\"string\">\" an integer.\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(description)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The number 5 is a prime number, and also an integer.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p>像if语句一样，guard的执行取决于一个表达式的布尔值。我们可以使用guard语句来要求条件必须为真时，以执行guard语句后的代码。不同于if语句，一个guard语句总是有一个else分句，如果条件不为真则执行else分句中的代码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(person: [String: String])</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> name = person[<span class=\"string\">\"name\"</span>] <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Hello \\(name)\"</span>)</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> location = person[<span class=\"string\">\"location\"</span>] <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"I hope the weather is nice near you.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I hope the weather is nice in \\(location).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">greet([<span class=\"string\">\"name\"</span>: <span class=\"string\">\"John\"</span>])</div><div class=\"line\"><span class=\"comment\">// prints \"Hello John!\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"I hope the weather is nice near you.\"</span></div><div class=\"line\">greet([<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Jane\"</span>, <span class=\"string\">\"location\"</span>: <span class=\"string\">\"Cupertino\"</span>])</div><div class=\"line\"><span class=\"comment\">// prints \"Hello Jane!\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"I hope the weather is nice in Cupertino.\"</span></div><div class=\"line\">``` </div><div class=\"line\">  </div><div class=\"line\">## 检测 <span class=\"type\">API</span> 可用性</div><div class=\"line\">  </div><div class=\"line\">```swift</div><div class=\"line\"><span class=\"keyword\">if</span> #available(iOS <span class=\"number\">9</span>, <span class=\"type\">OSX</span> <span class=\"number\">10.10</span>, *) &#123;</div><div class=\"line\">    <span class=\"comment\">// 在 iOS 使用 iOS 9 的 API, 在 OS X 使用 OS X v10.10 的 API</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用先前版本的 iOS 和 OS X 的 API</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"For循环\"><a href=\"#For循环\" class=\"headerlink\" title=\"For循环\"></a>For循环</h2><h3 id=\"For-In\"><a href=\"#For-In\" class=\"headerlink\" title=\"For-In\"></a>For-In</h3><p>你可以使用for-in循环来遍历一个集合里面的所有元素<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) times 5 is \\(index * 5)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 times 5 is 5</span></div><div class=\"line\"><span class=\"comment\">// 2 times 5 is 10</span></div><div class=\"line\"><span class=\"comment\">// 3 times 5 is 15</span></div><div class=\"line\"><span class=\"comment\">// 4 times 5 is 20</span></div><div class=\"line\"><span class=\"comment\">// 5 times 5 is 25</span></div></pre></td></tr></table></figure></p>\n<p>如果你不需要知道区间序列内每一项的值，你可以使用下划线（_）替代变量名来忽略对值的访问：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> base = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> power = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...power &#123;</div><div class=\"line\">    answer *= base</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"\\(base) to the power of \\(power) is \\(answer)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"3 to the power of 10 is 59049\"</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"For\"><a href=\"#For\" class=\"headerlink\" title=\"For\"></a>For</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">3</span>; ++index &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"index is \\(index)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// index is 0</span></div><div class=\"line\"><span class=\"comment\">// index is 1</span></div><div class=\"line\"><span class=\"comment\">// index is 2</span></div></pre></td></tr></table></figure>\n<h2 id=\"While循环\"><a href=\"#While循环\" class=\"headerlink\" title=\"While循环\"></a>While循环</h2><ul>\n<li>while循环，每次在循环开始时计算条件是否符合；</li>\n<li>repeat-while循环，每次在循环结束时计算条件是否符合。while循环，每次在循环开始时计算条件是否符合；<br>repeat-while循环，每次在循环结束时计算条件是否符合。</li>\n</ul>\n<h3 id=\"While\"><a href=\"#While\" class=\"headerlink\" title=\"While\"></a>While</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition &#123;  </div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Repeat-While\"><a href=\"#Repeat-While\" class=\"headerlink\" title=\"Repeat-While\"></a>Repeat-While</h3><p>类似于java的do while</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repeat</span> &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> condition</div></pre></td></tr></table></figure>\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temperatureInFahrenheit = <span class=\"number\">30</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's very cold. Consider wearing a scarf.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">40</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's not that cold. Wear a t-shirt.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's not that cold. Wear a t-shirt.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if else if else\"></a>if else if else</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">90</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> temperatureInFahrenheit &gt;= <span class=\"number\">86</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's really warm. Don't forget to wear sunscreen.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's not that cold. Wear a t-shirt.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"It's really warm. Don't forget to wear sunscreen.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"if-else-if\"><a href=\"#if-else-if\" class=\"headerlink\" title=\"if else if\"></a>if else if</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">temperatureInFahrenheit = <span class=\"number\">72</span></div><div class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit &lt;= <span class=\"number\">32</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's very cold. Consider wearing a scarf.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> temperatureInFahrenheit &gt;= <span class=\"number\">86</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's really warm. Don't forget to wear sunscreen.\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span> some value to consider &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">1</span>:</div><div class=\"line\">    respond to value <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">2</span>, value <span class=\"number\">3</span>:</div><div class=\"line\">    respond to value <span class=\"number\">2</span> or <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    otherwise, <span class=\"keyword\">do</span> something <span class=\"keyword\">else</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someCharacter: <span class=\"type\">Character</span> = <span class=\"string\">\"e\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> someCharacter &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is a vowel\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\"><span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is a consonant\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someCharacter) is not a vowel or a consonant\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"e is a vowel\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"区间匹配\"><a href=\"#区间匹配\" class=\"headerlink\" title=\"区间匹配\"></a>区间匹配</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> approximateCount = <span class=\"number\">62</span></div><div class=\"line\"><span class=\"keyword\">let</span> countedThings = <span class=\"string\">\"moons orbiting Saturn\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> naturalCount: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">switch</span> approximateCount &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>..&lt;<span class=\"number\">5</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">5</span>..&lt;<span class=\"number\">12</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"several\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">12</span>..&lt;<span class=\"number\">100</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"dozens of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">100</span>..&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"hundreds of\"</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"many\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(naturalCount) \\(countedThings).\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"There are dozens of moons orbiting Saturn.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(0, 0) is at the origin\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), 0) is on the x-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">_</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(0, \\(somePoint.1)) is on the y-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, 1) is inside the box\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"值绑定\"><a href=\"#值绑定\" class=\"headerlink\" title=\"值绑定\"></a>值绑定</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"keyword\">let</span> y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the y-axis with a y value of \\(y)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"on the x-axis with an x value of 2\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Where\"><a href=\"#Where\" class=\"headerlink\" title=\"Where\"></a>Where</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == -y:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == -y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, -1) is on the line x == -y\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"控制转移语句\"><a href=\"#控制转移语句\" class=\"headerlink\" title=\"控制转移语句\"></a>控制转移语句</h2><p>Swift 有五种控制转移语句：</p>\n<ul>\n<li>continue</li>\n<li>break</li>\n<li>fallthrough</li>\n<li>return</li>\n<li>throw</li>\n</ul>\n<h3 id=\"Continue\"><a href=\"#Continue\" class=\"headerlink\" title=\"Continue\"></a>Continue</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> puzzleInput = <span class=\"string\">\"great minds think alike\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> puzzleOutput = <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> puzzleInput.characters &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> character &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\" \"</span>:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        puzzleOutput.append(character)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(puzzleOutput)</div><div class=\"line\"><span class=\"comment\">// 输出 \"grtmndsthnklk\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Break\"><a href=\"#Break\" class=\"headerlink\" title=\"Break\"></a>Break</h3><p>break语句会立刻结束整个控制流的执行。</p>\n<h4 id=\"循环语句中的-break\"><a href=\"#循环语句中的-break\" class=\"headerlink\" title=\"循环语句中的 break\"></a>循环语句中的 break</h4><p>当在一个循环体中使用break时，会立刻中断该循环体的执行，然后跳转到表示循环体结束的大括号(})后的第一行代码。</p>\n<h4 id=\"Switch-语句中的-break\"><a href=\"#Switch-语句中的-break\" class=\"headerlink\" title=\"Switch 语句中的 break\"></a>Switch 语句中的 break</h4><p>当在一个switch代码块中使用break时，会立即中断该switch代码块的执行，并且跳转到表示switch代码块结束的大括号(})后的第一行代码。</p>\n<h3 id=\"fallthrough\"><a href=\"#fallthrough\" class=\"headerlink\" title=\"fallthrough\"></a>fallthrough</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> integerToDescribe = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">var</span> description = <span class=\"string\">\"The number \\(integerToDescribe) is\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> integerToDescribe &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">    description += <span class=\"string\">\" a prime number, and also\"</span></div><div class=\"line\">    <span class=\"keyword\">fallthrough</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    description += <span class=\"string\">\" an integer.\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(description)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The number 5 is a prime number, and also an integer.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p>像if语句一样，guard的执行取决于一个表达式的布尔值。我们可以使用guard语句来要求条件必须为真时，以执行guard语句后的代码。不同于if语句，一个guard语句总是有一个else分句，如果条件不为真则执行else分句中的代码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(person: [String: String])</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> name = person[<span class=\"string\">\"name\"</span>] <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Hello \\(name)\"</span>)</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> location = person[<span class=\"string\">\"location\"</span>] <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"I hope the weather is nice near you.\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I hope the weather is nice in \\(location).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">greet([<span class=\"string\">\"name\"</span>: <span class=\"string\">\"John\"</span>])</div><div class=\"line\"><span class=\"comment\">// prints \"Hello John!\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"I hope the weather is nice near you.\"</span></div><div class=\"line\">greet([<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Jane\"</span>, <span class=\"string\">\"location\"</span>: <span class=\"string\">\"Cupertino\"</span>])</div><div class=\"line\"><span class=\"comment\">// prints \"Hello Jane!\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"I hope the weather is nice in Cupertino.\"</span></div><div class=\"line\">``` </div><div class=\"line\">  </div><div class=\"line\">## 检测 <span class=\"type\">API</span> 可用性</div><div class=\"line\">  </div><div class=\"line\">```swift</div><div class=\"line\"><span class=\"keyword\">if</span> #available(iOS <span class=\"number\">9</span>, <span class=\"type\">OSX</span> <span class=\"number\">10.10</span>, *) &#123;</div><div class=\"line\">    <span class=\"comment\">// 在 iOS 使用 iOS 9 的 API, 在 OS X 使用 OS X v10.10 的 API</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用先前版本的 iOS 和 OS X 的 API</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Swift笔记-方法","date":"2017-06-06T05:07:15.000Z","_content":"\n## 实例方法\n在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。\n实例方法提供以下方法：\n- 可以访问和修改实例属性\n- 提供与实例目的相关的功能\n\n实例方法要写在它所属的类型的前后大括号({})之间。\n实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。\n实例方法只能被它所属的类的某个特定实例调用。\n实例方法不能脱离于现存的实例而被调用。\n\n<!-- more -->\n\n```swift\nimport Cocoa\n\nclass Counter {\n    var count = 0\n    func increment() {\n        count += 1\n    }\n    func incrementBy(amount: Int) {\n        count += amount\n    }\n    func reset() {\n        count = 0\n    }\n}\n// 初始计数值是0\nlet counter = Counter()\n\n// 计数值现在是1\ncounter.increment()\n\n// 计数值现在是6\ncounter.incrementBy(amount: 5)\nprint(counter.count)\n\n// 计数值现在是0\ncounter.reset()\nprint(counter.count)\n```\n\n## 方法的局部参数名称和外部参数名称\n\n```swift\nimport Cocoa\n\nclass multiplication {\n    var count: Int = 0\n    func incrementBy(first no1: Int, no2: Int) {\n        count = no1 * no2\n        print(count)\n    }\n}\n\nlet counter = multiplication()\ncounter.incrementBy(first: 800, no2: 3)\ncounter.incrementBy(first: 100, no2: 5)\ncounter.incrementBy(first: 15000, no2: 3)\n//我们呢也可以使用下划线（_）设置第二个及后续的参数不提供一个外部名称。\n\n```\n\n## self 属性\n\n类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身。\n\n```swift\nimport Cocoa\n\nclass calculations {\n    let a: Int\n    let b: Int\n    let res: Int\n    \n    init(a: Int, b: Int) {\n        self.a = a\n        self.b = b\n        res = a + b\n        print(\"Self 内: \\(res)\")\n    }\n    \n    func tot(c: Int) -> Int {\n        return res - c\n    }\n    \n    func result() {\n        print(\"结果为: \\(tot(c: 20))\")\n        print(\"结果为: \\(tot(c: 50))\")\n    }\n}\n\nlet pri = calculations(a: 600, b: 300)\nlet sum = calculations(a: 1200, b: 300)\n\npri.result()\nsum.result()\n//Self 内: 900\n//Self 内: 1500\n//结果为: 880\n//结果为: 850\n//结果为: 1480\n//结果为: 1450\n```\n\n## 在实例方法中修改值类型\n\nSwift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。\n\n```swift\nimport Cocoa\n\nstruct area {\n    var length = 1\n    var breadth = 1\n    \n    func area() -> Int {\n        return length * breadth\n    }\n    \n    //使用mutating方法可以在实例中改变值类型的属性\n    mutating func scaleBy(res: Int) {\n        length *= res\n        breadth *= res\n        \n        print(length)\n        print(breadth)\n    }\n}\n\nvar val = area(length: 3, breadth: 5)\nval.scaleBy(res: 3)\nval.scaleBy(res: 30)\nval.scaleBy(res: 300)\n```\n\n## 类型方法\n\n类型本身调用的方法，这种方法就叫做类型方法。\n\n声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法。\n\n```swift\nmport Cocoa\n\n//类\nclass Math\n{\n    //类型方法\n    class func abs(number: Int) -> Int\n    {\n        if number < 0\n        {\n            return (-number)\n        }\n        else\n        {\n            return number\n        }\n    }\n}\n\n//结构体\nstruct absno\n{\n    //类型方法\n    static func abs(number: Int) -> Int\n    {\n        if number < 0\n        {\n            return (-number)\n        }\n        else\n        {\n            return number\n        }\n    }\n}\n\nlet no = Math.abs(number: -35)\nlet num = absno.abs(number: -5)\n\nprint(no)\nprint(num)\n//35\n//5\n```","source":"_posts/Swift笔记-方法.md","raw":"---\ntitle: Swift笔记-方法\ndate: 2017-06-06 13:07:15\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 实例方法\n在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。\n实例方法提供以下方法：\n- 可以访问和修改实例属性\n- 提供与实例目的相关的功能\n\n实例方法要写在它所属的类型的前后大括号({})之间。\n实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。\n实例方法只能被它所属的类的某个特定实例调用。\n实例方法不能脱离于现存的实例而被调用。\n\n<!-- more -->\n\n```swift\nimport Cocoa\n\nclass Counter {\n    var count = 0\n    func increment() {\n        count += 1\n    }\n    func incrementBy(amount: Int) {\n        count += amount\n    }\n    func reset() {\n        count = 0\n    }\n}\n// 初始计数值是0\nlet counter = Counter()\n\n// 计数值现在是1\ncounter.increment()\n\n// 计数值现在是6\ncounter.incrementBy(amount: 5)\nprint(counter.count)\n\n// 计数值现在是0\ncounter.reset()\nprint(counter.count)\n```\n\n## 方法的局部参数名称和外部参数名称\n\n```swift\nimport Cocoa\n\nclass multiplication {\n    var count: Int = 0\n    func incrementBy(first no1: Int, no2: Int) {\n        count = no1 * no2\n        print(count)\n    }\n}\n\nlet counter = multiplication()\ncounter.incrementBy(first: 800, no2: 3)\ncounter.incrementBy(first: 100, no2: 5)\ncounter.incrementBy(first: 15000, no2: 3)\n//我们呢也可以使用下划线（_）设置第二个及后续的参数不提供一个外部名称。\n\n```\n\n## self 属性\n\n类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身。\n\n```swift\nimport Cocoa\n\nclass calculations {\n    let a: Int\n    let b: Int\n    let res: Int\n    \n    init(a: Int, b: Int) {\n        self.a = a\n        self.b = b\n        res = a + b\n        print(\"Self 内: \\(res)\")\n    }\n    \n    func tot(c: Int) -> Int {\n        return res - c\n    }\n    \n    func result() {\n        print(\"结果为: \\(tot(c: 20))\")\n        print(\"结果为: \\(tot(c: 50))\")\n    }\n}\n\nlet pri = calculations(a: 600, b: 300)\nlet sum = calculations(a: 1200, b: 300)\n\npri.result()\nsum.result()\n//Self 内: 900\n//Self 内: 1500\n//结果为: 880\n//结果为: 850\n//结果为: 1480\n//结果为: 1450\n```\n\n## 在实例方法中修改值类型\n\nSwift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。\n\n```swift\nimport Cocoa\n\nstruct area {\n    var length = 1\n    var breadth = 1\n    \n    func area() -> Int {\n        return length * breadth\n    }\n    \n    //使用mutating方法可以在实例中改变值类型的属性\n    mutating func scaleBy(res: Int) {\n        length *= res\n        breadth *= res\n        \n        print(length)\n        print(breadth)\n    }\n}\n\nvar val = area(length: 3, breadth: 5)\nval.scaleBy(res: 3)\nval.scaleBy(res: 30)\nval.scaleBy(res: 300)\n```\n\n## 类型方法\n\n类型本身调用的方法，这种方法就叫做类型方法。\n\n声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法。\n\n```swift\nmport Cocoa\n\n//类\nclass Math\n{\n    //类型方法\n    class func abs(number: Int) -> Int\n    {\n        if number < 0\n        {\n            return (-number)\n        }\n        else\n        {\n            return number\n        }\n    }\n}\n\n//结构体\nstruct absno\n{\n    //类型方法\n    static func abs(number: Int) -> Int\n    {\n        if number < 0\n        {\n            return (-number)\n        }\n        else\n        {\n            return number\n        }\n    }\n}\n\nlet no = Math.abs(number: -35)\nlet num = absno.abs(number: -5)\n\nprint(no)\nprint(num)\n//35\n//5\n```","slug":"Swift笔记-方法","published":1,"updated":"2017-08-10T12:01:34.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftf002uwou58te532dm","content":"<h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。<br>实例方法提供以下方法：</p>\n<ul>\n<li>可以访问和修改实例属性</li>\n<li>提供与实例目的相关的功能</li>\n</ul>\n<p>实例方法要写在它所属的类型的前后大括号({})之间。<br>实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。<br>实例方法只能被它所属的类的某个特定实例调用。<br>实例方法不能脱离于现存的实例而被调用。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += amount</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 初始计数值是0</span></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是1</span></div><div class=\"line\">counter.increment()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是6</span></div><div class=\"line\">counter.incrementBy(amount: <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是0</span></div><div class=\"line\">counter.reset()</div><div class=\"line\"><span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"方法的局部参数名称和外部参数名称\"><a href=\"#方法的局部参数名称和外部参数名称\" class=\"headerlink\" title=\"方法的局部参数名称和外部参数名称\"></a>方法的局部参数名称和外部参数名称</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">multiplication</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(first no1: Int, no2: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> = no1 * no2</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">count</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = multiplication()</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">800</span>, no2: <span class=\"number\">3</span>)</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">100</span>, no2: <span class=\"number\">5</span>)</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">15000</span>, no2: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"comment\">//我们呢也可以使用下划线（_）设置第二个及后续的参数不提供一个外部名称。</span></div></pre></td></tr></table></figure>\n<h2 id=\"self-属性\"><a href=\"#self-属性\" class=\"headerlink\" title=\"self 属性\"></a>self 属性</h2><p>类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">calculations</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> b: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> res: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.a = a</div><div class=\"line\">        <span class=\"keyword\">self</span>.b = b</div><div class=\"line\">        res = a + b</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Self 内: \\(res)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tot</span><span class=\"params\">(<span class=\"built_in\">c</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> res - <span class=\"built_in\">c</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"结果为: \\(tot(c: 20))\"</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"结果为: \\(tot(c: 50))\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> pri = calculations(a: <span class=\"number\">600</span>, b: <span class=\"number\">300</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> sum = calculations(a: <span class=\"number\">1200</span>, b: <span class=\"number\">300</span>)</div><div class=\"line\"></div><div class=\"line\">pri.result()</div><div class=\"line\">sum.result()</div><div class=\"line\"><span class=\"comment\">//Self 内: 900</span></div><div class=\"line\"><span class=\"comment\">//Self 内: 1500</span></div><div class=\"line\"><span class=\"comment\">//结果为: 880</span></div><div class=\"line\"><span class=\"comment\">//结果为: 850</span></div><div class=\"line\"><span class=\"comment\">//结果为: 1480</span></div><div class=\"line\"><span class=\"comment\">//结果为: 1450</span></div></pre></td></tr></table></figure>\n<h2 id=\"在实例方法中修改值类型\"><a href=\"#在实例方法中修改值类型\" class=\"headerlink\" title=\"在实例方法中修改值类型\"></a>在实例方法中修改值类型</h2><p>Swift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">area</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">var</span> breadth = <span class=\"number\">1</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> length * breadth</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//使用mutating方法可以在实例中改变值类型的属性</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scaleBy</span><span class=\"params\">(res: Int)</span></span> &#123;</div><div class=\"line\">        length *= res</div><div class=\"line\">        breadth *= res</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">print</span>(length)</div><div class=\"line\">        <span class=\"built_in\">print</span>(breadth)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> val = area(length: <span class=\"number\">3</span>, breadth: <span class=\"number\">5</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">3</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">30</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">300</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类型方法\"><a href=\"#类型方法\" class=\"headerlink\" title=\"类型方法\"></a>类型方法</h2><p>类型本身调用的方法，这种方法就叫做类型方法。</p>\n<p>声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">mport <span class=\"type\">Cocoa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Math</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//类型方法</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">abs</span>(<span class=\"title\">number</span>: <span class=\"title\">Int</span>) -&gt; <span class=\"title\">Int</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (-number)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结构体</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">absno</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//类型方法</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (-number)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> no = <span class=\"type\">Math</span>.<span class=\"built_in\">abs</span>(number: -<span class=\"number\">35</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> num = absno.<span class=\"built_in\">abs</span>(number: -<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(no)</div><div class=\"line\"><span class=\"built_in\">print</span>(num)</div><div class=\"line\"><span class=\"comment\">//35</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>在 Swift 语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法。<br>实例方法提供以下方法：</p>\n<ul>\n<li>可以访问和修改实例属性</li>\n<li>提供与实例目的相关的功能</li>\n</ul>\n<p>实例方法要写在它所属的类型的前后大括号({})之间。<br>实例方法能够隐式访问它所属类型的所有的其他实例方法和属性。<br>实例方法只能被它所属的类的某个特定实例调用。<br>实例方法不能脱离于现存的实例而被调用。</p>","more":"<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += amount</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 初始计数值是0</span></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是1</span></div><div class=\"line\">counter.increment()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是6</span></div><div class=\"line\">counter.incrementBy(amount: <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 计数值现在是0</span></div><div class=\"line\">counter.reset()</div><div class=\"line\"><span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"方法的局部参数名称和外部参数名称\"><a href=\"#方法的局部参数名称和外部参数名称\" class=\"headerlink\" title=\"方法的局部参数名称和外部参数名称\"></a>方法的局部参数名称和外部参数名称</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">multiplication</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(first no1: Int, no2: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> = no1 * no2</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">count</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = multiplication()</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">800</span>, no2: <span class=\"number\">3</span>)</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">100</span>, no2: <span class=\"number\">5</span>)</div><div class=\"line\">counter.incrementBy(first: <span class=\"number\">15000</span>, no2: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"comment\">//我们呢也可以使用下划线（_）设置第二个及后续的参数不提供一个外部名称。</span></div></pre></td></tr></table></figure>\n<h2 id=\"self-属性\"><a href=\"#self-属性\" class=\"headerlink\" title=\"self 属性\"></a>self 属性</h2><p>类型的每一个实例都有一个隐含属性叫做self，self 完全等同于该实例本身。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">calculations</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> b: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> res: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.a = a</div><div class=\"line\">        <span class=\"keyword\">self</span>.b = b</div><div class=\"line\">        res = a + b</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Self 内: \\(res)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tot</span><span class=\"params\">(<span class=\"built_in\">c</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> res - <span class=\"built_in\">c</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"结果为: \\(tot(c: 20))\"</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"结果为: \\(tot(c: 50))\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> pri = calculations(a: <span class=\"number\">600</span>, b: <span class=\"number\">300</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> sum = calculations(a: <span class=\"number\">1200</span>, b: <span class=\"number\">300</span>)</div><div class=\"line\"></div><div class=\"line\">pri.result()</div><div class=\"line\">sum.result()</div><div class=\"line\"><span class=\"comment\">//Self 内: 900</span></div><div class=\"line\"><span class=\"comment\">//Self 内: 1500</span></div><div class=\"line\"><span class=\"comment\">//结果为: 880</span></div><div class=\"line\"><span class=\"comment\">//结果为: 850</span></div><div class=\"line\"><span class=\"comment\">//结果为: 1480</span></div><div class=\"line\"><span class=\"comment\">//结果为: 1450</span></div></pre></td></tr></table></figure>\n<h2 id=\"在实例方法中修改值类型\"><a href=\"#在实例方法中修改值类型\" class=\"headerlink\" title=\"在实例方法中修改值类型\"></a>在实例方法中修改值类型</h2><p>Swift 语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">area</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">var</span> breadth = <span class=\"number\">1</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> length * breadth</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//使用mutating方法可以在实例中改变值类型的属性</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scaleBy</span><span class=\"params\">(res: Int)</span></span> &#123;</div><div class=\"line\">        length *= res</div><div class=\"line\">        breadth *= res</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">print</span>(length)</div><div class=\"line\">        <span class=\"built_in\">print</span>(breadth)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> val = area(length: <span class=\"number\">3</span>, breadth: <span class=\"number\">5</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">3</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">30</span>)</div><div class=\"line\">val.scaleBy(res: <span class=\"number\">300</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类型方法\"><a href=\"#类型方法\" class=\"headerlink\" title=\"类型方法\"></a>类型方法</h2><p>类型本身调用的方法，这种方法就叫做类型方法。</p>\n<p>声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">mport <span class=\"type\">Cocoa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Math</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//类型方法</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">abs</span>(<span class=\"title\">number</span>: <span class=\"title\">Int</span>) -&gt; <span class=\"title\">Int</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (-number)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结构体</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">absno</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//类型方法</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (-number)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> no = <span class=\"type\">Math</span>.<span class=\"built_in\">abs</span>(number: -<span class=\"number\">35</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> num = absno.<span class=\"built_in\">abs</span>(number: -<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(no)</div><div class=\"line\"><span class=\"built_in\">print</span>(num)</div><div class=\"line\"><span class=\"comment\">//35</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-泛型","date":"2017-06-07T04:28:41.000Z","_content":"\nSwift 提供了泛型让你写出灵活且可重用的函数和类型。\nSwift 标准库是通过泛型代码构建出来的。\nSwift 的数组和字典类型都是泛型集。\n\n泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。\n\n<!-- more -->\n\n## 语法\n\n```swift\nfunc swapTwoValues<T>(_ a: inout T, _ b: inout T)\n```\n## 实例\n\n```swift\n// 定义一个交换两个变量的函数\nfunc swapTwoValues<T>(_ a: inout T, _ b: inout T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n \nvar numb1 = 100\nvar numb2 = 200\n \nprint(\"交换前数据:  \\(numb1) 和 \\(numb2)\")\nswapTwoValues(&numb1, &numb2)\nprint(\"交换后数据: \\(numb1) 和 \\(numb2)\")\n \nvar str1 = \"A\"\nvar str2 = \"B\"\n \nprint(\"交换前数据:  \\(str1) 和 \\(str2)\")\nswapTwoValues(&str1, &str2)\nprint(\"交换后数据: \\(str1) 和 \\(str2)\")\n```\n\n## 泛型类型\n\nSwift 允许你定义你自己的泛型类型。\n\n```swift\nstruct Stack<Element> {\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n}\n \nvar stackOfStrings = Stack<String>()\nprint(\"字符串元素入栈: \")\nstackOfStrings.push(\"google\")\nstackOfStrings.push(\"runoob\")\nprint(stackOfStrings.items);\n \nlet deletetos = stackOfStrings.pop()\nprint(\"出栈元素: \" + deletetos)\n \nvar stackOfInts = Stack<Int>()\nprint(\"整数元素入栈: \")\nstackOfInts.push(1)\nstackOfInts.push(2)\nprint(stackOfInts.items);\n\n```\n\n## 扩展泛型类型\n\n当你扩展一个泛型类型的时候（使用 extension 关键字），你并不需要在扩展的定义中提供类型参数列表。\n\n```swift\nstruct Stack<Element> {\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n}\n \nextension Stack {\n    var topItem: Element? {\n       return items.isEmpty ? nil : items[items.count - 1]\n    }\n}\n \nvar stackOfStrings = Stack<String>()\nprint(\"字符串元素入栈: \")\nstackOfStrings.push(\"google\")\nstackOfStrings.push(\"runoob\")\n \nif let topItem = stackOfStrings.topItem {\n    print(\"栈中的顶部元素是：\\(topItem).\")\n}\n \nprint(stackOfStrings.items)\n```\n\n## 类型约束\n类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。\n\n### 类型约束语法\n\n```swift\nfunc someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {\n    // 这里是泛型函数的函数体部分\n}\n```\n\n上面这个函数有两个类型参数。第一个类型参数 T，有一个要求 T 必须是 SomeClass 子类的类型约束；第二个类型参数 U，有一个要求 U 必须符合 SomeProtocol 协议的类型约束。\n\n\n### 实例\n\n```swift\n// 非泛型函数，查找指定字符串在数组中的索引\nfunc findIndex(ofString valueToFind: String, in array: [String]) -> Int? {\n    for (index, value) in array.enumerated() {\n        if value == valueToFind {\n            // 找到返回索引值\n            return index\n        }\n    }\n    return nil\n}\n \n \nlet strings = [\"google\", \"weibo\", \"taobao\", \"runoob\", \"facebook\"]\nif let foundIndex = findIndex(ofString: \"runoob\", in: strings) {\n    print(\"runoob 的索引为 \\(foundIndex)\")\n}\n```\n\n## 关联类\n\nSwift 中使用 associatedtype 关键字来设置关联类型实例。\n\n```swift\n// Container 协议\nprotocol Container {\n    associatedtype ItemType\n    // 添加一个新元素到容器里\n    mutating func append(_ item: ItemType)\n    // 获取容器中元素的数\n    var count: Int { get }\n    // 通过索引值类型为 Int 的下标检索到容器中的每一个元素\n    subscript(i: Int) -> ItemType { get }\n}\n\n// Stack 结构体遵从 Container 协议\nstruct Stack<Element>: Container {\n    // Stack<Element> 的原始实现部分\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    // Container 协议的实现部分\n    mutating func append(_ item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n\nvar tos = Stack<String>()\ntos.push(\"google\")\ntos.push(\"runoob\")\ntos.push(\"taobao\")\n// 元素列表\nprint(tos.items)\n// 元素个数\nprint( tos.count)\n```\n\n## Where 语句\n\n类型约束能够确保类型符合泛型函数或类的定义约束。\n\n你可以在参数列表中通过where语句定义参数的约束。\n\n### 实例\n下面的例子定义了一个名为allItemsMatch的泛型函数，用来检查两个Container实例是否包含相同顺序的相同元素。\n如果所有的元素能够匹配，那么返回 true，反之则返回 false。\n\n```swift\n// Container 协议\nprotocol Container {\n    associatedtype ItemType\n    // 添加一个新元素到容器里\n    mutating func append(_ item: ItemType)\n    // 获取容器中元素的数\n    var count: Int { get }\n    // 通过索引值类型为 Int 的下标检索到容器中的每一个元素\n    subscript(i: Int) -> ItemType { get }\n}\n  \n// // 遵循Container协议的泛型TOS类型\nstruct Stack<Element>: Container {\n    // Stack<Element> 的原始实现部分\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    // Container 协议的实现部分\n    mutating func append(_ item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n// 扩展，将 Array 当作 Container 来使用\nextension Array: Container {}\n  \nfunc allItemsMatch<C1: Container, C2: Container>\n    (_ someContainer: C1, _ anotherContainer: C2) -> Bool\n    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable {\n        \n        // 检查两个容器含有相同数量的元素\n        if someContainer.count != anotherContainer.count {\n            return false\n        }\n        \n        // 检查每一对元素是否相等\n        for i in 0..<someContainer.count {\n            if someContainer[i] != anotherContainer[i] {\n                return false\n            }\n        }\n        \n        // 所有元素都匹配，返回 true\n        return true\n}\nvar tos = Stack<String>()\ntos.push(\"google\")\ntos.push(\"runoob\")\ntos.push(\"taobao\")\n   \nvar aos = [\"google\", \"runoob\", \"taobao\"]\n   \nif allItemsMatch(tos, aos) {\n    print(\"匹配所有元素\")\n} else {\n    print(\"元素不匹配\")\n}\n  \n//匹配所有元素\n```","source":"_posts/Swift笔记-泛型.md","raw":"---\ntitle: Swift笔记-泛型\ndate: 2017-06-07 12:28:41\ntags: \n\t- Swift \ncategories: Swift \n---\n\nSwift 提供了泛型让你写出灵活且可重用的函数和类型。\nSwift 标准库是通过泛型代码构建出来的。\nSwift 的数组和字典类型都是泛型集。\n\n泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。\n\n<!-- more -->\n\n## 语法\n\n```swift\nfunc swapTwoValues<T>(_ a: inout T, _ b: inout T)\n```\n## 实例\n\n```swift\n// 定义一个交换两个变量的函数\nfunc swapTwoValues<T>(_ a: inout T, _ b: inout T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n \nvar numb1 = 100\nvar numb2 = 200\n \nprint(\"交换前数据:  \\(numb1) 和 \\(numb2)\")\nswapTwoValues(&numb1, &numb2)\nprint(\"交换后数据: \\(numb1) 和 \\(numb2)\")\n \nvar str1 = \"A\"\nvar str2 = \"B\"\n \nprint(\"交换前数据:  \\(str1) 和 \\(str2)\")\nswapTwoValues(&str1, &str2)\nprint(\"交换后数据: \\(str1) 和 \\(str2)\")\n```\n\n## 泛型类型\n\nSwift 允许你定义你自己的泛型类型。\n\n```swift\nstruct Stack<Element> {\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n}\n \nvar stackOfStrings = Stack<String>()\nprint(\"字符串元素入栈: \")\nstackOfStrings.push(\"google\")\nstackOfStrings.push(\"runoob\")\nprint(stackOfStrings.items);\n \nlet deletetos = stackOfStrings.pop()\nprint(\"出栈元素: \" + deletetos)\n \nvar stackOfInts = Stack<Int>()\nprint(\"整数元素入栈: \")\nstackOfInts.push(1)\nstackOfInts.push(2)\nprint(stackOfInts.items);\n\n```\n\n## 扩展泛型类型\n\n当你扩展一个泛型类型的时候（使用 extension 关键字），你并不需要在扩展的定义中提供类型参数列表。\n\n```swift\nstruct Stack<Element> {\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n}\n \nextension Stack {\n    var topItem: Element? {\n       return items.isEmpty ? nil : items[items.count - 1]\n    }\n}\n \nvar stackOfStrings = Stack<String>()\nprint(\"字符串元素入栈: \")\nstackOfStrings.push(\"google\")\nstackOfStrings.push(\"runoob\")\n \nif let topItem = stackOfStrings.topItem {\n    print(\"栈中的顶部元素是：\\(topItem).\")\n}\n \nprint(stackOfStrings.items)\n```\n\n## 类型约束\n类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。\n\n### 类型约束语法\n\n```swift\nfunc someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {\n    // 这里是泛型函数的函数体部分\n}\n```\n\n上面这个函数有两个类型参数。第一个类型参数 T，有一个要求 T 必须是 SomeClass 子类的类型约束；第二个类型参数 U，有一个要求 U 必须符合 SomeProtocol 协议的类型约束。\n\n\n### 实例\n\n```swift\n// 非泛型函数，查找指定字符串在数组中的索引\nfunc findIndex(ofString valueToFind: String, in array: [String]) -> Int? {\n    for (index, value) in array.enumerated() {\n        if value == valueToFind {\n            // 找到返回索引值\n            return index\n        }\n    }\n    return nil\n}\n \n \nlet strings = [\"google\", \"weibo\", \"taobao\", \"runoob\", \"facebook\"]\nif let foundIndex = findIndex(ofString: \"runoob\", in: strings) {\n    print(\"runoob 的索引为 \\(foundIndex)\")\n}\n```\n\n## 关联类\n\nSwift 中使用 associatedtype 关键字来设置关联类型实例。\n\n```swift\n// Container 协议\nprotocol Container {\n    associatedtype ItemType\n    // 添加一个新元素到容器里\n    mutating func append(_ item: ItemType)\n    // 获取容器中元素的数\n    var count: Int { get }\n    // 通过索引值类型为 Int 的下标检索到容器中的每一个元素\n    subscript(i: Int) -> ItemType { get }\n}\n\n// Stack 结构体遵从 Container 协议\nstruct Stack<Element>: Container {\n    // Stack<Element> 的原始实现部分\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    // Container 协议的实现部分\n    mutating func append(_ item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n\nvar tos = Stack<String>()\ntos.push(\"google\")\ntos.push(\"runoob\")\ntos.push(\"taobao\")\n// 元素列表\nprint(tos.items)\n// 元素个数\nprint( tos.count)\n```\n\n## Where 语句\n\n类型约束能够确保类型符合泛型函数或类的定义约束。\n\n你可以在参数列表中通过where语句定义参数的约束。\n\n### 实例\n下面的例子定义了一个名为allItemsMatch的泛型函数，用来检查两个Container实例是否包含相同顺序的相同元素。\n如果所有的元素能够匹配，那么返回 true，反之则返回 false。\n\n```swift\n// Container 协议\nprotocol Container {\n    associatedtype ItemType\n    // 添加一个新元素到容器里\n    mutating func append(_ item: ItemType)\n    // 获取容器中元素的数\n    var count: Int { get }\n    // 通过索引值类型为 Int 的下标检索到容器中的每一个元素\n    subscript(i: Int) -> ItemType { get }\n}\n  \n// // 遵循Container协议的泛型TOS类型\nstruct Stack<Element>: Container {\n    // Stack<Element> 的原始实现部分\n    var items = [Element]()\n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    // Container 协议的实现部分\n    mutating func append(_ item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n// 扩展，将 Array 当作 Container 来使用\nextension Array: Container {}\n  \nfunc allItemsMatch<C1: Container, C2: Container>\n    (_ someContainer: C1, _ anotherContainer: C2) -> Bool\n    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable {\n        \n        // 检查两个容器含有相同数量的元素\n        if someContainer.count != anotherContainer.count {\n            return false\n        }\n        \n        // 检查每一对元素是否相等\n        for i in 0..<someContainer.count {\n            if someContainer[i] != anotherContainer[i] {\n                return false\n            }\n        }\n        \n        // 所有元素都匹配，返回 true\n        return true\n}\nvar tos = Stack<String>()\ntos.push(\"google\")\ntos.push(\"runoob\")\ntos.push(\"taobao\")\n   \nvar aos = [\"google\", \"runoob\", \"taobao\"]\n   \nif allItemsMatch(tos, aos) {\n    print(\"匹配所有元素\")\n} else {\n    print(\"元素不匹配\")\n}\n  \n//匹配所有元素\n```","slug":"Swift笔记-泛型","published":1,"updated":"2017-08-10T12:01:34.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftg002wwou564f5nuk5","content":"<p>Swift 提供了泛型让你写出灵活且可重用的函数和类型。<br>Swift 标准库是通过泛型代码构建出来的。<br>Swift 的数组和字典类型都是泛型集。</p>\n<p>泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。</p>\n<a id=\"more\"></a>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> T, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> T)</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义一个交换两个变量的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> T, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> numb1 = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">var</span> numb2 = <span class=\"number\">200</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换前数据:  \\(numb1) 和 \\(numb2)\"</span>)</div><div class=\"line\">swapTwoValues(&amp;numb1, &amp;numb2)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换后数据: \\(numb1) 和 \\(numb2)\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">\"B\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换前数据:  \\(str1) 和 \\(str2)\"</span>)</div><div class=\"line\">swapTwoValues(&amp;str1, &amp;str2)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换后数据: \\(str1) 和 \\(str2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h2><p>Swift 允许你定义你自己的泛型类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"字符串元素入栈: \"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfStrings.items);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> deletetos = stackOfStrings.pop()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"出栈元素: \"</span> + deletetos)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfInts = <span class=\"type\">Stack</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"整数元素入栈: \"</span>)</div><div class=\"line\">stackOfInts.push(<span class=\"number\">1</span>)</div><div class=\"line\">stackOfInts.push(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfInts.items);</div></pre></td></tr></table></figure>\n<h2 id=\"扩展泛型类型\"><a href=\"#扩展泛型类型\" class=\"headerlink\" title=\"扩展泛型类型\"></a>扩展泛型类型</h2><p>当你扩展一个泛型类型的时候（使用 extension 关键字），你并不需要在扩展的定义中提供类型参数列表。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Stack</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> topItem: <span class=\"type\">Element</span>? &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> items.isEmpty ? <span class=\"literal\">nil</span> : items[items.<span class=\"built_in\">count</span> - <span class=\"number\">1</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"字符串元素入栈: \"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> topItem = stackOfStrings.topItem &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"栈中的顶部元素是：\\(topItem).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfStrings.items)</div></pre></td></tr></table></figure>\n<h2 id=\"类型约束\"><a href=\"#类型约束\" class=\"headerlink\" title=\"类型约束\"></a>类型约束</h2><p>类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。</p>\n<h3 id=\"类型约束语法\"><a href=\"#类型约束语法\" class=\"headerlink\" title=\"类型约束语法\"></a>类型约束语法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class=\"params\">(someT: T, someU: U)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里是泛型函数的函数体部分</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这个函数有两个类型参数。第一个类型参数 T，有一个要求 T 必须是 SomeClass 子类的类型约束；第二个类型参数 U，有一个要求 U 必须符合 SomeProtocol 协议的类型约束。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非泛型函数，查找指定字符串在数组中的索引</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findIndex</span><span class=\"params\">(ofString valueToFind: String, <span class=\"keyword\">in</span> array: [String])</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> array.enumerated() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value == valueToFind &#123;</div><div class=\"line\">            <span class=\"comment\">// 找到返回索引值</span></div><div class=\"line\">            <span class=\"keyword\">return</span> index</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"google\"</span>, <span class=\"string\">\"weibo\"</span>, <span class=\"string\">\"taobao\"</span>, <span class=\"string\">\"runoob\"</span>, <span class=\"string\">\"facebook\"</span>]</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> foundIndex = findIndex(ofString: <span class=\"string\">\"runoob\"</span>, <span class=\"keyword\">in</span>: strings) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"runoob 的索引为 \\(foundIndex)\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关联类\"><a href=\"#关联类\" class=\"headerlink\" title=\"关联类\"></a>关联类</h2><p>Swift 中使用 associatedtype 关键字来设置关联类型实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    associatedtype <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"comment\">// 添加一个新元素到容器里</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: ItemType)</span></span></div><div class=\"line\">    <span class=\"comment\">// 获取容器中元素的数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"comment\">// 通过索引值类型为 Int 的下标检索到容器中的每一个元素</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Stack 结构体遵从 Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Stack&lt;Element&gt; 的原始实现部分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Container 协议的实现部分</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"taobao\"</span>)</div><div class=\"line\"><span class=\"comment\">// 元素列表</span></div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"><span class=\"comment\">// 元素个数</span></div><div class=\"line\"><span class=\"built_in\">print</span>( tos.<span class=\"built_in\">count</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Where-语句\"><a href=\"#Where-语句\" class=\"headerlink\" title=\"Where 语句\"></a>Where 语句</h2><p>类型约束能够确保类型符合泛型函数或类的定义约束。</p>\n<p>你可以在参数列表中通过where语句定义参数的约束。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>下面的例子定义了一个名为allItemsMatch的泛型函数，用来检查两个Container实例是否包含相同顺序的相同元素。<br>如果所有的元素能够匹配，那么返回 true，反之则返回 false。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    associatedtype <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"comment\">// 添加一个新元素到容器里</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: ItemType)</span></span></div><div class=\"line\">    <span class=\"comment\">// 获取容器中元素的数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"comment\">// 通过索引值类型为 Int 的下标检索到容器中的每一个元素</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// // 遵循Container协议的泛型TOS类型</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Stack&lt;Element&gt; 的原始实现部分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Container 协议的实现部分</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 扩展，将 Array 当作 Container 来使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Container</span> </span>&#123;&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">allItemsMatch</span>&lt;C1: Container, C2: Container&gt;</span></div><div class=\"line\">    <span class=\"params\">(<span class=\"number\">_</span> someContainer: C1, <span class=\"number\">_</span> anotherContainer: C2)</span> -&gt; <span class=\"type\">Bool</span></div><div class=\"line\">    <span class=\"keyword\">where</span> <span class=\"type\">C1</span>.<span class=\"type\">ItemType</span> == <span class=\"type\">C2</span>.<span class=\"type\">ItemType</span>, <span class=\"type\">C1</span>.<span class=\"type\">ItemType</span>: <span class=\"type\">Equatable</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检查两个容器含有相同数量的元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span> someContainer.<span class=\"built_in\">count</span> != anotherContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检查每一对元素是否相等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;someContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> someContainer[i] != anotherContainer[i] &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 所有元素都匹配，返回 true</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"taobao\"</span>)</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">var</span> aos = [<span class=\"string\">\"google\"</span>, <span class=\"string\">\"runoob\"</span>, <span class=\"string\">\"taobao\"</span>]</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">if</span> allItemsMatch(tos, aos) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"匹配所有元素\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"元素不匹配\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//匹配所有元素</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Swift 提供了泛型让你写出灵活且可重用的函数和类型。<br>Swift 标准库是通过泛型代码构建出来的。<br>Swift 的数组和字典类型都是泛型集。</p>\n<p>泛型使用了占位类型名（在这里用字母 T 来表示）来代替实际类型名（例如 Int、String 或 Double）。</p>","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> T, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> T)</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义一个交换两个变量的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> T, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> numb1 = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">var</span> numb2 = <span class=\"number\">200</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换前数据:  \\(numb1) 和 \\(numb2)\"</span>)</div><div class=\"line\">swapTwoValues(&amp;numb1, &amp;numb2)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换后数据: \\(numb1) 和 \\(numb2)\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"A\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">\"B\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换前数据:  \\(str1) 和 \\(str2)\"</span>)</div><div class=\"line\">swapTwoValues(&amp;str1, &amp;str2)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"交换后数据: \\(str1) 和 \\(str2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h2><p>Swift 允许你定义你自己的泛型类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"字符串元素入栈: \"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfStrings.items);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> deletetos = stackOfStrings.pop()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"出栈元素: \"</span> + deletetos)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfInts = <span class=\"type\">Stack</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"整数元素入栈: \"</span>)</div><div class=\"line\">stackOfInts.push(<span class=\"number\">1</span>)</div><div class=\"line\">stackOfInts.push(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfInts.items);</div></pre></td></tr></table></figure>\n<h2 id=\"扩展泛型类型\"><a href=\"#扩展泛型类型\" class=\"headerlink\" title=\"扩展泛型类型\"></a>扩展泛型类型</h2><p>当你扩展一个泛型类型的时候（使用 extension 关键字），你并不需要在扩展的定义中提供类型参数列表。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Stack</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> topItem: <span class=\"type\">Element</span>? &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> items.isEmpty ? <span class=\"literal\">nil</span> : items[items.<span class=\"built_in\">count</span> - <span class=\"number\">1</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"字符串元素入栈: \"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> topItem = stackOfStrings.topItem &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"栈中的顶部元素是：\\(topItem).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(stackOfStrings.items)</div></pre></td></tr></table></figure>\n<h2 id=\"类型约束\"><a href=\"#类型约束\" class=\"headerlink\" title=\"类型约束\"></a>类型约束</h2><p>类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。</p>\n<h3 id=\"类型约束语法\"><a href=\"#类型约束语法\" class=\"headerlink\" title=\"类型约束语法\"></a>类型约束语法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class=\"params\">(someT: T, someU: U)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里是泛型函数的函数体部分</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这个函数有两个类型参数。第一个类型参数 T，有一个要求 T 必须是 SomeClass 子类的类型约束；第二个类型参数 U，有一个要求 U 必须符合 SomeProtocol 协议的类型约束。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非泛型函数，查找指定字符串在数组中的索引</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findIndex</span><span class=\"params\">(ofString valueToFind: String, <span class=\"keyword\">in</span> array: [String])</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> array.enumerated() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value == valueToFind &#123;</div><div class=\"line\">            <span class=\"comment\">// 找到返回索引值</span></div><div class=\"line\">            <span class=\"keyword\">return</span> index</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"google\"</span>, <span class=\"string\">\"weibo\"</span>, <span class=\"string\">\"taobao\"</span>, <span class=\"string\">\"runoob\"</span>, <span class=\"string\">\"facebook\"</span>]</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> foundIndex = findIndex(ofString: <span class=\"string\">\"runoob\"</span>, <span class=\"keyword\">in</span>: strings) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"runoob 的索引为 \\(foundIndex)\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关联类\"><a href=\"#关联类\" class=\"headerlink\" title=\"关联类\"></a>关联类</h2><p>Swift 中使用 associatedtype 关键字来设置关联类型实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    associatedtype <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"comment\">// 添加一个新元素到容器里</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: ItemType)</span></span></div><div class=\"line\">    <span class=\"comment\">// 获取容器中元素的数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"comment\">// 通过索引值类型为 Int 的下标检索到容器中的每一个元素</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Stack 结构体遵从 Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Stack&lt;Element&gt; 的原始实现部分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Container 协议的实现部分</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"taobao\"</span>)</div><div class=\"line\"><span class=\"comment\">// 元素列表</span></div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"><span class=\"comment\">// 元素个数</span></div><div class=\"line\"><span class=\"built_in\">print</span>( tos.<span class=\"built_in\">count</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Where-语句\"><a href=\"#Where-语句\" class=\"headerlink\" title=\"Where 语句\"></a>Where 语句</h2><p>类型约束能够确保类型符合泛型函数或类的定义约束。</p>\n<p>你可以在参数列表中通过where语句定义参数的约束。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>下面的例子定义了一个名为allItemsMatch的泛型函数，用来检查两个Container实例是否包含相同顺序的相同元素。<br>如果所有的元素能够匹配，那么返回 true，反之则返回 false。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Container 协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    associatedtype <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"comment\">// 添加一个新元素到容器里</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: ItemType)</span></span></div><div class=\"line\">    <span class=\"comment\">// 获取容器中元素的数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"comment\">// 通过索引值类型为 Int 的下标检索到容器中的每一个元素</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// // 遵循Container协议的泛型TOS类型</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Stack&lt;Element&gt; 的原始实现部分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Element</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Container 协议的实现部分</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"number\">_</span> item: Element)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Element</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 扩展，将 Array 当作 Container 来使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Container</span> </span>&#123;&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">allItemsMatch</span>&lt;C1: Container, C2: Container&gt;</span></div><div class=\"line\">    <span class=\"params\">(<span class=\"number\">_</span> someContainer: C1, <span class=\"number\">_</span> anotherContainer: C2)</span> -&gt; <span class=\"type\">Bool</span></div><div class=\"line\">    <span class=\"keyword\">where</span> <span class=\"type\">C1</span>.<span class=\"type\">ItemType</span> == <span class=\"type\">C2</span>.<span class=\"type\">ItemType</span>, <span class=\"type\">C1</span>.<span class=\"type\">ItemType</span>: <span class=\"type\">Equatable</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检查两个容器含有相同数量的元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span> someContainer.<span class=\"built_in\">count</span> != anotherContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 检查每一对元素是否相等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;someContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> someContainer[i] != anotherContainer[i] &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 所有元素都匹配，返回 true</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"google\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"runoob\"</span>)</div><div class=\"line\">tos.push(<span class=\"string\">\"taobao\"</span>)</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">var</span> aos = [<span class=\"string\">\"google\"</span>, <span class=\"string\">\"runoob\"</span>, <span class=\"string\">\"taobao\"</span>]</div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">if</span> allItemsMatch(tos, aos) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"匹配所有元素\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"元素不匹配\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//匹配所有元素</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-枚举","date":"2017-06-06T00:30:35.000Z","_content":"\nSwift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为:\n- 它声明在类中，可以通过实例化类来访问它的值。\n- 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。\n- 可以遵守协议（protocols）来提供标准的功能。\n\n## 语法\n\n```swift\nenum enumname {\n   // 枚举定义放在这里\n}\n```\n\n<!-- more -->\n\n```swift\nimport Cocoa\n\n// 定义枚举\nenum DaysofaWeek {\n    case Sunday\n    case Monday\n    case TUESDAY\n    case WEDNESDAY\n    case THURSDAY\n    case FRIDAY\n    case Saturday\n}\n\nvar weekDay = DaysofaWeek.THURSDAY\nweekDay = .THURSDAY\nswitch weekDay\n{\ncase .Sunday:\n    print(\"星期天\")\ncase .Monday:\n    print(\"星期一\")\ncase .TUESDAY:\n    print(\"星期二\")\ncase .WEDNESDAY:\n    print(\"星期三\")\ncase .THURSDAY:\n    print(\"星期四\")\ncase .FRIDAY:\n    print(\"星期五\")\ncase .Saturday:\n    print(\"星期六\")\n}\n//星期四\n```\n\n## 相关值\n\n```swift\nimport Cocoa\n\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"学生的名字是: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"学生的成绩是: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n//学生的成绩是: 98,97,95。\n```\n\n## 原始值\n- 原始值可以是字符串，字符，或者任何整型值或浮点型值。\n- 每个原始值在它的枚举声明中必须是唯一的。\n\n- 当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。\n\n```swift\nimport Cocoa\n\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\nlet yearMonth = Month.May.rawValue\nprint(\"数字月份为: \\(yearMonth)。\")\n//数字月份为: 5。\n```","source":"_posts/Swift笔记-枚举.md","raw":"---\ntitle: Swift笔记-枚举\ndate: 2017-06-06 08:30:35\ntags: \n\t- Swift \ncategories: Swift \n---\n\nSwift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为:\n- 它声明在类中，可以通过实例化类来访问它的值。\n- 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。\n- 可以遵守协议（protocols）来提供标准的功能。\n\n## 语法\n\n```swift\nenum enumname {\n   // 枚举定义放在这里\n}\n```\n\n<!-- more -->\n\n```swift\nimport Cocoa\n\n// 定义枚举\nenum DaysofaWeek {\n    case Sunday\n    case Monday\n    case TUESDAY\n    case WEDNESDAY\n    case THURSDAY\n    case FRIDAY\n    case Saturday\n}\n\nvar weekDay = DaysofaWeek.THURSDAY\nweekDay = .THURSDAY\nswitch weekDay\n{\ncase .Sunday:\n    print(\"星期天\")\ncase .Monday:\n    print(\"星期一\")\ncase .TUESDAY:\n    print(\"星期二\")\ncase .WEDNESDAY:\n    print(\"星期三\")\ncase .THURSDAY:\n    print(\"星期四\")\ncase .FRIDAY:\n    print(\"星期五\")\ncase .Saturday:\n    print(\"星期六\")\n}\n//星期四\n```\n\n## 相关值\n\n```swift\nimport Cocoa\n\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"学生的名字是: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"学生的成绩是: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n//学生的成绩是: 98,97,95。\n```\n\n## 原始值\n- 原始值可以是字符串，字符，或者任何整型值或浮点型值。\n- 每个原始值在它的枚举声明中必须是唯一的。\n\n- 当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。\n\n```swift\nimport Cocoa\n\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\nlet yearMonth = Month.May.rawValue\nprint(\"数字月份为: \\(yearMonth)。\")\n//数字月份为: 5。\n```","slug":"Swift笔记-枚举","published":1,"updated":"2017-08-10T12:01:34.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfth0031wou5pw8f8vk8","content":"<p>Swift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为:</p>\n<ul>\n<li>它声明在类中，可以通过实例化类来访问它的值。</li>\n<li>枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。</li>\n<li>可以遵守协议（protocols）来提供标准的功能。</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">enumname</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 枚举定义放在这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义枚举</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DaysofaWeek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sunday</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Monday</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">TUESDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">WEDNESDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">THURSDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FRIDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Saturday</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> weekDay = <span class=\"type\">DaysofaWeek</span>.<span class=\"type\">THURSDAY</span></div><div class=\"line\">weekDay = .<span class=\"type\">THURSDAY</span></div><div class=\"line\"><span class=\"keyword\">switch</span> weekDay</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Sunday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期天\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Monday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期一\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">TUESDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期二\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">WEDNESDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期三\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">THURSDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期四\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">FRIDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期五\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Saturday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期六\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//星期四</span></div></pre></td></tr></table></figure>\n<h2 id=\"相关值\"><a href=\"#相关值\" class=\"headerlink\" title=\"相关值\"></a>相关值</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> studDetails = <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Runoob\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> studMarks = <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的名字是: \\(studName)。\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的成绩是: \\(Mark1),\\(Mark2),\\(Mark3)。\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//学生的成绩是: 98,97,95。</span></div></pre></td></tr></table></figure>\n<h2 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h2><ul>\n<li>原始值可以是字符串，字符，或者任何整型值或浮点型值。</li>\n<li><p>每个原始值在它的枚举声明中必须是唯一的。</p>\n</li>\n<li><p>当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Month</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> = <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> yearMonth = <span class=\"type\">Month</span>.<span class=\"type\">May</span>.rawValue</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"数字月份为: \\(yearMonth)。\"</span>)</div><div class=\"line\"><span class=\"comment\">//数字月份为: 5。</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Swift 的枚举类似于 Objective C 和 C 的结构，枚举的功能为:</p>\n<ul>\n<li>它声明在类中，可以通过实例化类来访问它的值。</li>\n<li>枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。</li>\n<li>可以遵守协议（protocols）来提供标准的功能。</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">enumname</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 枚举定义放在这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义枚举</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DaysofaWeek</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sunday</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Monday</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">TUESDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">WEDNESDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">THURSDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">FRIDAY</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Saturday</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> weekDay = <span class=\"type\">DaysofaWeek</span>.<span class=\"type\">THURSDAY</span></div><div class=\"line\">weekDay = .<span class=\"type\">THURSDAY</span></div><div class=\"line\"><span class=\"keyword\">switch</span> weekDay</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Sunday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期天\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Monday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期一\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">TUESDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期二\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">WEDNESDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期三\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">THURSDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期四\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">FRIDAY</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期五\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Saturday</span>:</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"星期六\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//星期四</span></div></pre></td></tr></table></figure>\n<h2 id=\"相关值\"><a href=\"#相关值\" class=\"headerlink\" title=\"相关值\"></a>相关值</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Student</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> studDetails = <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Runoob\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> studMarks = <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的名字是: \\(studName)。\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的成绩是: \\(Mark1),\\(Mark2),\\(Mark3)。\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//学生的成绩是: 98,97,95。</span></div></pre></td></tr></table></figure>\n<h2 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h2><ul>\n<li>原始值可以是字符串，字符，或者任何整型值或浮点型值。</li>\n<li><p>每个原始值在它的枚举声明中必须是唯一的。</p>\n</li>\n<li><p>当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Month</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> = <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> yearMonth = <span class=\"type\">Month</span>.<span class=\"type\">May</span>.rawValue</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"数字月份为: \\(yearMonth)。\"</span>)</div><div class=\"line\"><span class=\"comment\">//数字月份为: 5。</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-析构过程","date":"2017-06-06T06:39:31.000Z","_content":"\n在一个类的实例被释放之前，析构函数被立即调用。\n\n用关键字**deinit**来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。\n\n- Swift 会自动释放不再需要的实例以释放资源。\n- Swift 通过自动引用计数（ARC）处理实例的内存管理。\n- 通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。\n\n<!-- more -->\n\n## 实例\n\n```swift\nvar counter = 0;  // 引用计数器\nclass BaseClass {\n    init() {\n        counter += 1;\n    }\n    deinit {\n        counter -= 1;\n    }\n}\n\nvar show: BaseClass? = BaseClass()\nprint(counter)\nshow = nil\nprint(counter)\n\n//1\n//0\n```","source":"_posts/Swift笔记-析构过程.md","raw":"---\ntitle: Swift笔记-析构过程\ndate: 2017-06-06 14:39:31\ntags: \n\t- Swift \ncategories: Swift \n---\n\n在一个类的实例被释放之前，析构函数被立即调用。\n\n用关键字**deinit**来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。\n\n- Swift 会自动释放不再需要的实例以释放资源。\n- Swift 通过自动引用计数（ARC）处理实例的内存管理。\n- 通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。\n\n<!-- more -->\n\n## 实例\n\n```swift\nvar counter = 0;  // 引用计数器\nclass BaseClass {\n    init() {\n        counter += 1;\n    }\n    deinit {\n        counter -= 1;\n    }\n}\n\nvar show: BaseClass? = BaseClass()\nprint(counter)\nshow = nil\nprint(counter)\n\n//1\n//0\n```","slug":"Swift笔记-析构过程","published":1,"updated":"2017-08-10T12:01:34.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftj0033wou55ui6m8ts","content":"<p>在一个类的实例被释放之前，析构函数被立即调用。</p>\n<p>用关键字<strong>deinit</strong>来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。</p>\n<ul>\n<li>Swift 会自动释放不再需要的实例以释放资源。</li>\n<li>Swift 通过自动引用计数（ARC）处理实例的内存管理。</li>\n<li>通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;  <span class=\"comment\">// 引用计数器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        counter += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        counter -= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> show: <span class=\"type\">BaseClass</span>? = <span class=\"type\">BaseClass</span>()</div><div class=\"line\"><span class=\"built_in\">print</span>(counter)</div><div class=\"line\">show = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"built_in\">print</span>(counter)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//0</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在一个类的实例被释放之前，析构函数被立即调用。</p>\n<p>用关键字<strong>deinit</strong>来标示析构函数，类似于初始化函数用init来标示。析构函数只适用于类类型。</p>\n<ul>\n<li>Swift 会自动释放不再需要的实例以释放资源。</li>\n<li>Swift 通过自动引用计数（ARC）处理实例的内存管理。</li>\n<li>通常当你的实例被释放时不需要手动地去清理。但是，当使用自己的资源时，你可能需要进行一些额外的清理。</li>\n</ul>","more":"<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;  <span class=\"comment\">// 引用计数器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        counter += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        counter -= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> show: <span class=\"type\">BaseClass</span>? = <span class=\"type\">BaseClass</span>()</div><div class=\"line\"><span class=\"built_in\">print</span>(counter)</div><div class=\"line\">show = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"built_in\">print</span>(counter)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//0</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-类","date":"2017-06-06T01:05:10.000Z","_content":"\n## 语法\n\n\n### 类定义\n```swift\nclass student {\n    var studname: String\n    var mark: Int\n    var mark2: Int\n}\n```\n<!-- more -->\n\n### 实例化类\n\n```swift\nlet studrecord = student()\n```\n\n## 实例\n\n```swift\nimport Cocoa\n\nclass MarksStruct {\n    var mark: Int\n    init(mark: Int) {\n        self.mark = mark\n    }\n}\n\nclass studentMarks {\n    var mark = 300\n}\nlet marks = studentMarks()\nprint(\"成绩为 \\(marks.mark)\")\n//成绩为 300\n```\n\n## 作为引用类型访问类属性\n\n类的属性可以通过 . 来访问。格式为：实例化类名.属性名：\n\n```swift\nimport Cocoa\n\nclass MarksStruct {\n   var mark: Int\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\n\nclass studentMarks {\n   var mark1 = 300\n   var mark2 = 400\n   var mark3 = 900\n}\nlet marks = studentMarks()\nprint(\"Mark1 is \\(marks.mark1)\")\nprint(\"Mark2 is \\(marks.mark2)\")\nprint(\"Mark3 is \\(marks.mark3)\")\n//Mark1 is 300\n//Mark2 is 400\n//Mark3 is 900\n```\n\n## 恒等运算符\n\n| 恒等运算符|不恒等运算符|\n|:--------|:---------|\n|运算符为：===|\t运算符为：!==|\n|如果两个常量或者变量引用同一个类实例则返回 true|\t如果两个常量或者变量引用不同一个类实例则返回 true|  \n\n```swift\nimport Cocoa\n\nclass SampleClass: Equatable {\n    let myProperty: String\n    init(s: String) {\n        myProperty = s\n    }\n}\nfunc ==(lhs: SampleClass, rhs: SampleClass) -> Bool {\n    return lhs.myProperty == rhs.myProperty\n}\n\nlet spClass1 = SampleClass(s: \"Hello\")\nlet spClass2 = SampleClass(s: \"Hello\")\n\nif spClass1 === spClass2 {// false\n    print(\"引用相同的类实例 \\(spClass1)\")\n}\n\nif spClass1 !== spClass2 {// true\n    print(\"引用不相同的类实例 \\(spClass2)\")\n}\n//引用不相同的类实例 SampleClass\n```","source":"_posts/Swift笔记-类.md","raw":"---\ntitle: Swift笔记-类\ndate: 2017-06-06 09:05:10\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 语法\n\n\n### 类定义\n```swift\nclass student {\n    var studname: String\n    var mark: Int\n    var mark2: Int\n}\n```\n<!-- more -->\n\n### 实例化类\n\n```swift\nlet studrecord = student()\n```\n\n## 实例\n\n```swift\nimport Cocoa\n\nclass MarksStruct {\n    var mark: Int\n    init(mark: Int) {\n        self.mark = mark\n    }\n}\n\nclass studentMarks {\n    var mark = 300\n}\nlet marks = studentMarks()\nprint(\"成绩为 \\(marks.mark)\")\n//成绩为 300\n```\n\n## 作为引用类型访问类属性\n\n类的属性可以通过 . 来访问。格式为：实例化类名.属性名：\n\n```swift\nimport Cocoa\n\nclass MarksStruct {\n   var mark: Int\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\n\nclass studentMarks {\n   var mark1 = 300\n   var mark2 = 400\n   var mark3 = 900\n}\nlet marks = studentMarks()\nprint(\"Mark1 is \\(marks.mark1)\")\nprint(\"Mark2 is \\(marks.mark2)\")\nprint(\"Mark3 is \\(marks.mark3)\")\n//Mark1 is 300\n//Mark2 is 400\n//Mark3 is 900\n```\n\n## 恒等运算符\n\n| 恒等运算符|不恒等运算符|\n|:--------|:---------|\n|运算符为：===|\t运算符为：!==|\n|如果两个常量或者变量引用同一个类实例则返回 true|\t如果两个常量或者变量引用不同一个类实例则返回 true|  \n\n```swift\nimport Cocoa\n\nclass SampleClass: Equatable {\n    let myProperty: String\n    init(s: String) {\n        myProperty = s\n    }\n}\nfunc ==(lhs: SampleClass, rhs: SampleClass) -> Bool {\n    return lhs.myProperty == rhs.myProperty\n}\n\nlet spClass1 = SampleClass(s: \"Hello\")\nlet spClass2 = SampleClass(s: \"Hello\")\n\nif spClass1 === spClass2 {// false\n    print(\"引用相同的类实例 \\(spClass1)\")\n}\n\nif spClass1 !== spClass2 {// true\n    print(\"引用不相同的类实例 \\(spClass2)\")\n}\n//引用不相同的类实例 SampleClass\n```","slug":"Swift笔记-类","published":1,"updated":"2017-08-10T12:01:34.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftl0038wou5oxag92gm","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> studname: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"实例化类\"><a href=\"#实例化类\" class=\"headerlink\" title=\"实例化类\"></a>实例化类</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> studrecord = student()</div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark = <span class=\"number\">300</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"成绩为 \\(marks.mark)\"</span>)</div><div class=\"line\"><span class=\"comment\">//成绩为 300</span></div></pre></td></tr></table></figure>\n<h2 id=\"作为引用类型访问类属性\"><a href=\"#作为引用类型访问类属性\" class=\"headerlink\" title=\"作为引用类型访问类属性\"></a>作为引用类型访问类属性</h2><p>类的属性可以通过 . 来访问。格式为：实例化类名.属性名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1 = <span class=\"number\">300</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2 = <span class=\"number\">400</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3 = <span class=\"number\">900</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1 is \\(marks.mark1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark2 is \\(marks.mark2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark3 is \\(marks.mark3)\"</span>)</div><div class=\"line\"><span class=\"comment\">//Mark1 is 300</span></div><div class=\"line\"><span class=\"comment\">//Mark2 is 400</span></div><div class=\"line\"><span class=\"comment\">//Mark3 is 900</span></div></pre></td></tr></table></figure>\n<h2 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">恒等运算符</th>\n<th style=\"text-align:left\">不恒等运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运算符为：===</td>\n<td style=\"text-align:left\">运算符为：!==</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">如果两个常量或者变量引用同一个类实例则返回 true</td>\n<td style=\"text-align:left\">如果两个常量或者变量引用不同一个类实例则返回 true</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>: <span class=\"title\">Equatable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> myProperty: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(s: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        myProperty = s</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ==<span class=\"params\">(lhs: SampleClass, rhs: SampleClass)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> lhs.myProperty == rhs.myProperty</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> spClass1 = <span class=\"type\">SampleClass</span>(s: <span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> spClass2 = <span class=\"type\">SampleClass</span>(s: <span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> spClass1 === spClass2 &#123;<span class=\"comment\">// false</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"引用相同的类实例 \\(spClass1)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> spClass1 !== spClass2 &#123;<span class=\"comment\">// true</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"引用不相同的类实例 \\(spClass2)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//引用不相同的类实例 SampleClass</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> studname: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h3 id=\"实例化类\"><a href=\"#实例化类\" class=\"headerlink\" title=\"实例化类\"></a>实例化类</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> studrecord = student()</div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark = <span class=\"number\">300</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"成绩为 \\(marks.mark)\"</span>)</div><div class=\"line\"><span class=\"comment\">//成绩为 300</span></div></pre></td></tr></table></figure>\n<h2 id=\"作为引用类型访问类属性\"><a href=\"#作为引用类型访问类属性\" class=\"headerlink\" title=\"作为引用类型访问类属性\"></a>作为引用类型访问类属性</h2><p>类的属性可以通过 . 来访问。格式为：实例化类名.属性名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1 = <span class=\"number\">300</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2 = <span class=\"number\">400</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3 = <span class=\"number\">900</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1 is \\(marks.mark1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark2 is \\(marks.mark2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark3 is \\(marks.mark3)\"</span>)</div><div class=\"line\"><span class=\"comment\">//Mark1 is 300</span></div><div class=\"line\"><span class=\"comment\">//Mark2 is 400</span></div><div class=\"line\"><span class=\"comment\">//Mark3 is 900</span></div></pre></td></tr></table></figure>\n<h2 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">恒等运算符</th>\n<th style=\"text-align:left\">不恒等运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运算符为：===</td>\n<td style=\"text-align:left\">运算符为：!==</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">如果两个常量或者变量引用同一个类实例则返回 true</td>\n<td style=\"text-align:left\">如果两个常量或者变量引用不同一个类实例则返回 true</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>: <span class=\"title\">Equatable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> myProperty: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(s: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        myProperty = s</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ==<span class=\"params\">(lhs: SampleClass, rhs: SampleClass)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> lhs.myProperty == rhs.myProperty</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> spClass1 = <span class=\"type\">SampleClass</span>(s: <span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> spClass2 = <span class=\"type\">SampleClass</span>(s: <span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> spClass1 === spClass2 &#123;<span class=\"comment\">// false</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"引用相同的类实例 \\(spClass1)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> spClass1 !== spClass2 &#123;<span class=\"comment\">// true</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"引用不相同的类实例 \\(spClass2)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//引用不相同的类实例 SampleClass</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-结构体","date":"2017-06-06T00:53:00.000Z","_content":"\n## 语法\n\n\n```swift\nstruct nameStruct { \n   Definition 1\n   Definition 2\n   ……\n   Definition N\n}\n```\n\n<!-- more -->\n\n## 实例\n\n\n```swift\nstruct MarkStruct{\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n}\n```\n\n我们可以通过结构体名来访问结构体成员。\n结构体实例化使用 let 关键字：\n\n\n```swift\nimport Cocoa\n\nstruct studentMarks {\n   var mark1 = 100\n   var mark2 = 78\n   var mark3 = 98\n}\nlet marks = studentMarks()\nprint(\"Mark1 是 \\(marks.mark1)\")\nprint(\"Mark2 是 \\(marks.mark2)\")\nprint(\"Mark3 是 \\(marks.mark3)\")\n//Mark1 是 100\n//Mark2 是 78\n//Mark3 是 98\n```\n\n\n```swift\nimport Cocoa\n\nstruct MarksStruct {\n   var mark: Int\n\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\nvar aStruct = MarksStruct(mark: 98)\nvar bStruct = aStruct // aStruct 和 bStruct 是使用相同值的结构体！\nbStruct.mark = 97\nprint(aStruct.mark) // 98\nprint(bStruct.mark) // 97\n```\n\n## 结构体应用\n\n当符合一条或多条以下条件时，请考虑构建结构体：\n- 结构体的主要目的是用来封装少量相关简单数据值。\n- 有理由预计一个结构体实例在赋值或传递时，封装的数据将会被拷贝而不是被引用。\n- 任何在结构体中储存的值类型属性，也将会被拷贝，而不是被引用。\n- 结构体不需要去继承另一个已存在类型的属性或者行为。\n\n结构体实例是通过值传递而不是通过引用传递。\n\n```swift\nimport Cocoa\n\nstruct markStruct{\n    var mark1: Int\n    var mark2: Int\n    var mark3: Int\n    \n    init(mark1: Int, mark2: Int, mark3: Int){\n        self.mark1 = mark1\n        self.mark2 = mark2\n        self.mark3 = mark3\n    }\n}\n\nprint(\"优异成绩:\")\nvar marks = markStruct(mark1: 98, mark2: 96, mark3:100)\nprint(marks.mark1)\nprint(marks.mark2)\nprint(marks.mark3)\n\nprint(\"糟糕成绩:\")\nvar fail = markStruct(mark1: 34, mark2: 42, mark3: 13)\nprint(fail.mark1)\nprint(fail.mark2)\nprint(fail.mark3)\n//优异成绩:\n//98\n//96\n//100\n//糟糕成绩:\n//34\n//42\n//13\n```","source":"_posts/Swift笔记-结构体.md","raw":"---\ntitle: Swift笔记-结构体\ndate: 2017-06-06 08:53:00\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 语法\n\n\n```swift\nstruct nameStruct { \n   Definition 1\n   Definition 2\n   ……\n   Definition N\n}\n```\n\n<!-- more -->\n\n## 实例\n\n\n```swift\nstruct MarkStruct{\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n}\n```\n\n我们可以通过结构体名来访问结构体成员。\n结构体实例化使用 let 关键字：\n\n\n```swift\nimport Cocoa\n\nstruct studentMarks {\n   var mark1 = 100\n   var mark2 = 78\n   var mark3 = 98\n}\nlet marks = studentMarks()\nprint(\"Mark1 是 \\(marks.mark1)\")\nprint(\"Mark2 是 \\(marks.mark2)\")\nprint(\"Mark3 是 \\(marks.mark3)\")\n//Mark1 是 100\n//Mark2 是 78\n//Mark3 是 98\n```\n\n\n```swift\nimport Cocoa\n\nstruct MarksStruct {\n   var mark: Int\n\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\nvar aStruct = MarksStruct(mark: 98)\nvar bStruct = aStruct // aStruct 和 bStruct 是使用相同值的结构体！\nbStruct.mark = 97\nprint(aStruct.mark) // 98\nprint(bStruct.mark) // 97\n```\n\n## 结构体应用\n\n当符合一条或多条以下条件时，请考虑构建结构体：\n- 结构体的主要目的是用来封装少量相关简单数据值。\n- 有理由预计一个结构体实例在赋值或传递时，封装的数据将会被拷贝而不是被引用。\n- 任何在结构体中储存的值类型属性，也将会被拷贝，而不是被引用。\n- 结构体不需要去继承另一个已存在类型的属性或者行为。\n\n结构体实例是通过值传递而不是通过引用传递。\n\n```swift\nimport Cocoa\n\nstruct markStruct{\n    var mark1: Int\n    var mark2: Int\n    var mark3: Int\n    \n    init(mark1: Int, mark2: Int, mark3: Int){\n        self.mark1 = mark1\n        self.mark2 = mark2\n        self.mark3 = mark3\n    }\n}\n\nprint(\"优异成绩:\")\nvar marks = markStruct(mark1: 98, mark2: 96, mark3:100)\nprint(marks.mark1)\nprint(marks.mark2)\nprint(marks.mark3)\n\nprint(\"糟糕成绩:\")\nvar fail = markStruct(mark1: 34, mark2: 42, mark3: 13)\nprint(fail.mark1)\nprint(fail.mark2)\nprint(fail.mark3)\n//优异成绩:\n//98\n//96\n//100\n//糟糕成绩:\n//34\n//42\n//13\n```","slug":"Swift笔记-结构体","published":1,"updated":"2017-08-10T12:01:34.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftm003awou5yzg807au","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nameStruct</span> </span>&#123; </div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"number\">1</span></div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"number\">2</span></div><div class=\"line\">   ……</div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"type\">N</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MarkStruct</span></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以通过结构体名来访问结构体成员。<br>结构体实例化使用 let 关键字：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1 = <span class=\"number\">100</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2 = <span class=\"number\">78</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3 = <span class=\"number\">98</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1 是 \\(marks.mark1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark2 是 \\(marks.mark2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark3 是 \\(marks.mark3)\"</span>)</div><div class=\"line\"><span class=\"comment\">//Mark1 是 100</span></div><div class=\"line\"><span class=\"comment\">//Mark2 是 78</span></div><div class=\"line\"><span class=\"comment\">//Mark3 是 98</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> aStruct = <span class=\"type\">MarksStruct</span>(mark: <span class=\"number\">98</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> bStruct = aStruct <span class=\"comment\">// aStruct 和 bStruct 是使用相同值的结构体！</span></div><div class=\"line\">bStruct.mark = <span class=\"number\">97</span></div><div class=\"line\"><span class=\"built_in\">print</span>(aStruct.mark) <span class=\"comment\">// 98</span></div><div class=\"line\"><span class=\"built_in\">print</span>(bStruct.mark) <span class=\"comment\">// 97</span></div></pre></td></tr></table></figure>\n<h2 id=\"结构体应用\"><a href=\"#结构体应用\" class=\"headerlink\" title=\"结构体应用\"></a>结构体应用</h2><p>当符合一条或多条以下条件时，请考虑构建结构体：</p>\n<ul>\n<li>结构体的主要目的是用来封装少量相关简单数据值。</li>\n<li>有理由预计一个结构体实例在赋值或传递时，封装的数据将会被拷贝而不是被引用。</li>\n<li>任何在结构体中储存的值类型属性，也将会被拷贝，而不是被引用。</li>\n<li>结构体不需要去继承另一个已存在类型的属性或者行为。</li>\n</ul>\n<p>结构体实例是通过值传递而不是通过引用传递。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">markStruct</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(mark1: <span class=\"type\">Int</span>, mark2: <span class=\"type\">Int</span>, mark3: <span class=\"type\">Int</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark1 = mark1</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark2 = mark2</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark3 = mark3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"优异成绩:\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> marks = markStruct(mark1: <span class=\"number\">98</span>, mark2: <span class=\"number\">96</span>, mark3:<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"糟糕成绩:\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> fail = markStruct(mark1: <span class=\"number\">34</span>, mark2: <span class=\"number\">42</span>, mark3: <span class=\"number\">13</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark3)</div><div class=\"line\"><span class=\"comment\">//优异成绩:</span></div><div class=\"line\"><span class=\"comment\">//98</span></div><div class=\"line\"><span class=\"comment\">//96</span></div><div class=\"line\"><span class=\"comment\">//100</span></div><div class=\"line\"><span class=\"comment\">//糟糕成绩:</span></div><div class=\"line\"><span class=\"comment\">//34</span></div><div class=\"line\"><span class=\"comment\">//42</span></div><div class=\"line\"><span class=\"comment\">//13</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nameStruct</span> </span>&#123; </div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"number\">1</span></div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"number\">2</span></div><div class=\"line\">   ……</div><div class=\"line\">   <span class=\"type\">Definition</span> <span class=\"type\">N</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MarkStruct</span></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以通过结构体名来访问结构体成员。<br>结构体实例化使用 let 关键字：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">studentMarks</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark1 = <span class=\"number\">100</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark2 = <span class=\"number\">78</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mark3 = <span class=\"number\">98</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> marks = studentMarks()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1 是 \\(marks.mark1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark2 是 \\(marks.mark2)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Mark3 是 \\(marks.mark3)\"</span>)</div><div class=\"line\"><span class=\"comment\">//Mark1 是 100</span></div><div class=\"line\"><span class=\"comment\">//Mark2 是 78</span></div><div class=\"line\"><span class=\"comment\">//Mark3 是 98</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MarksStruct</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> mark: <span class=\"type\">Int</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">init</span>(mark: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.mark = mark</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> aStruct = <span class=\"type\">MarksStruct</span>(mark: <span class=\"number\">98</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> bStruct = aStruct <span class=\"comment\">// aStruct 和 bStruct 是使用相同值的结构体！</span></div><div class=\"line\">bStruct.mark = <span class=\"number\">97</span></div><div class=\"line\"><span class=\"built_in\">print</span>(aStruct.mark) <span class=\"comment\">// 98</span></div><div class=\"line\"><span class=\"built_in\">print</span>(bStruct.mark) <span class=\"comment\">// 97</span></div></pre></td></tr></table></figure>\n<h2 id=\"结构体应用\"><a href=\"#结构体应用\" class=\"headerlink\" title=\"结构体应用\"></a>结构体应用</h2><p>当符合一条或多条以下条件时，请考虑构建结构体：</p>\n<ul>\n<li>结构体的主要目的是用来封装少量相关简单数据值。</li>\n<li>有理由预计一个结构体实例在赋值或传递时，封装的数据将会被拷贝而不是被引用。</li>\n<li>任何在结构体中储存的值类型属性，也将会被拷贝，而不是被引用。</li>\n<li>结构体不需要去继承另一个已存在类型的属性或者行为。</li>\n</ul>\n<p>结构体实例是通过值传递而不是通过引用传递。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">markStruct</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(mark1: <span class=\"type\">Int</span>, mark2: <span class=\"type\">Int</span>, mark3: <span class=\"type\">Int</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark1 = mark1</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark2 = mark2</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark3 = mark3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"优异成绩:\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> marks = markStruct(mark1: <span class=\"number\">98</span>, mark2: <span class=\"number\">96</span>, mark3:<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(marks.mark3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"糟糕成绩:\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> fail = markStruct(mark1: <span class=\"number\">34</span>, mark2: <span class=\"number\">42</span>, mark3: <span class=\"number\">13</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(fail.mark3)</div><div class=\"line\"><span class=\"comment\">//优异成绩:</span></div><div class=\"line\"><span class=\"comment\">//98</span></div><div class=\"line\"><span class=\"comment\">//96</span></div><div class=\"line\"><span class=\"comment\">//100</span></div><div class=\"line\"><span class=\"comment\">//糟糕成绩:</span></div><div class=\"line\"><span class=\"comment\">//34</span></div><div class=\"line\"><span class=\"comment\">//42</span></div><div class=\"line\"><span class=\"comment\">//13</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-自动引用计数","date":"2017-06-06T06:45:39.000Z","_content":"\nSwift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存\n通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。\n但在有些时候我们还是需要在代码中实现内存管理。\n\n## ARC 功能\n- 当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。\n- 内存中会包含实例的类型信息，以及这个实例所有相关属性的值。\n- 当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。\n- 为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。\n- 实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。\n\n<!-- more -->\n\n## 类实例之间的循环强引用\n\n这种情况发生在两个类实例互相保持对方的强引用，并让对方不被销毁。这就是所谓的循环强引用。\n\n```swift\nclass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { print(\"\\(name) 被析构\") }\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    var tenant: Person?\n    deinit { print(\"Apartment #\\(number) 被析构\") }\n}\n\n// 两个变量都被初始化为nil\nvar runoob: Person?\nvar number73: Apartment?\n\n// 赋值\nrunoob = Person(name: \"Runoob\")\nnumber73 = Apartment(number: 73)\n\n// 意感叹号是用来展开和访问可选变量 runoob 和 number73 中的实例\n// 循环强引用被创建\nrunoob!.apartment = number73\nnumber73!.tenant = runoob\n\n// 断开 runoob 和 number73 变量所持有的强引用时，引用计数并不会降为 0，实例也不会被 ARC 销毁\n// 注意，当你把这两个变量设为nil时，没有任何一个析构函数被调用。\n// 强引用循环阻止了Person和Apartment类实例的销毁，并在你的应用程序中造成了内存泄漏\nrunoob = nil\nnumber73 = nil\n```\n\n\n### 解决实例之间的循环强引用\n\nSwift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：\n- 弱引用\n- 无主引用\n\n\n#### 弱引用实例\n\n```swift\nclass Module {\n    let name: String\n    init(name: String) { self.name = name }\n    var sub: SubModule?\n    deinit { print(\"\\(name) 主模块\") }\n}\n\nclass SubModule {\n    let number: Int\n    \n    init(number: Int) { self.number = number }\n    \n    //weak修饰变量\n    weak var topic: Module?\n    \n    deinit { print(\"子模块 topic 数为 \\(number)\") }\n}\n\nvar toc: Module?\nvar list: SubModule?\ntoc = Module(name: \"ARC\")\nlist = SubModule(number: 4)\ntoc!.sub = list\nlist!.topic = toc\n\ntoc = nil\nlist = nil\n```\n\n#### 无主引用实例\n\n```swift\nclass Student {\n    let name: String\n    var section: Marks?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit { print(\"\\(name)\") }\n}\nclass Marks {\n    let marks: Int\n    //unowned修饰变量\n    unowned let stname: Student\n    \n    init(marks: Int, stname: Student) {\n        self.marks = marks\n        self.stname = stname\n    }\n    \n    deinit { print(\"学生的分数为 \\(marks)\") }\n}\n\nvar module: Student?\nmodule = Student(name: \"ARC\")\nmodule!.section = Marks(marks: 98, stname: module!)\nmodule = nil\n```\n\n### 闭包引起的循环强引用\n\n```swift\nclass HTMLElement {\n    \n    let name: String\n    let text: String?\n    \n    lazy var asHTML: () -> String = {\n        if let text = self.text {\n            //闭包强引用了self。\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n    \n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n    \n}\n\n// 创建实例并打印信息\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprint(paragraph!.asHTML())\n```\n\n解决方法：\n\n```swift\nclass HTMLElement {\n    \n    let name: String\n    let text: String?\n    \n    lazy var asHTML: () -> String = {\n        //这里\n        [unowned self] in\n        if let text = self.text {\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n    \n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n    \n    deinit {\n        print(\"\\(name) 被析构\")\n    }\n    \n}\n\n//创建并打印HTMLElement实例\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprint(paragraph!.asHTML())\n\n// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息\nparagraph = nil\n\n//<p>hello, world</p>\n//p 被析构\n```\n","source":"_posts/Swift笔记-自动引用计数.md","raw":"---\ntitle: Swift笔记-自动引用计数\ndate: 2017-06-06 14:45:39\ntags: \n\t- Swift \ncategories: Swift \n---\n\nSwift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存\n通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。\n但在有些时候我们还是需要在代码中实现内存管理。\n\n## ARC 功能\n- 当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。\n- 内存中会包含实例的类型信息，以及这个实例所有相关属性的值。\n- 当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。\n- 为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。\n- 实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。\n\n<!-- more -->\n\n## 类实例之间的循环强引用\n\n这种情况发生在两个类实例互相保持对方的强引用，并让对方不被销毁。这就是所谓的循环强引用。\n\n```swift\nclass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { print(\"\\(name) 被析构\") }\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    var tenant: Person?\n    deinit { print(\"Apartment #\\(number) 被析构\") }\n}\n\n// 两个变量都被初始化为nil\nvar runoob: Person?\nvar number73: Apartment?\n\n// 赋值\nrunoob = Person(name: \"Runoob\")\nnumber73 = Apartment(number: 73)\n\n// 意感叹号是用来展开和访问可选变量 runoob 和 number73 中的实例\n// 循环强引用被创建\nrunoob!.apartment = number73\nnumber73!.tenant = runoob\n\n// 断开 runoob 和 number73 变量所持有的强引用时，引用计数并不会降为 0，实例也不会被 ARC 销毁\n// 注意，当你把这两个变量设为nil时，没有任何一个析构函数被调用。\n// 强引用循环阻止了Person和Apartment类实例的销毁，并在你的应用程序中造成了内存泄漏\nrunoob = nil\nnumber73 = nil\n```\n\n\n### 解决实例之间的循环强引用\n\nSwift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：\n- 弱引用\n- 无主引用\n\n\n#### 弱引用实例\n\n```swift\nclass Module {\n    let name: String\n    init(name: String) { self.name = name }\n    var sub: SubModule?\n    deinit { print(\"\\(name) 主模块\") }\n}\n\nclass SubModule {\n    let number: Int\n    \n    init(number: Int) { self.number = number }\n    \n    //weak修饰变量\n    weak var topic: Module?\n    \n    deinit { print(\"子模块 topic 数为 \\(number)\") }\n}\n\nvar toc: Module?\nvar list: SubModule?\ntoc = Module(name: \"ARC\")\nlist = SubModule(number: 4)\ntoc!.sub = list\nlist!.topic = toc\n\ntoc = nil\nlist = nil\n```\n\n#### 无主引用实例\n\n```swift\nclass Student {\n    let name: String\n    var section: Marks?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit { print(\"\\(name)\") }\n}\nclass Marks {\n    let marks: Int\n    //unowned修饰变量\n    unowned let stname: Student\n    \n    init(marks: Int, stname: Student) {\n        self.marks = marks\n        self.stname = stname\n    }\n    \n    deinit { print(\"学生的分数为 \\(marks)\") }\n}\n\nvar module: Student?\nmodule = Student(name: \"ARC\")\nmodule!.section = Marks(marks: 98, stname: module!)\nmodule = nil\n```\n\n### 闭包引起的循环强引用\n\n```swift\nclass HTMLElement {\n    \n    let name: String\n    let text: String?\n    \n    lazy var asHTML: () -> String = {\n        if let text = self.text {\n            //闭包强引用了self。\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n    \n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n    \n}\n\n// 创建实例并打印信息\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprint(paragraph!.asHTML())\n```\n\n解决方法：\n\n```swift\nclass HTMLElement {\n    \n    let name: String\n    let text: String?\n    \n    lazy var asHTML: () -> String = {\n        //这里\n        [unowned self] in\n        if let text = self.text {\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n    \n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n    \n    deinit {\n        print(\"\\(name) 被析构\")\n    }\n    \n}\n\n//创建并打印HTMLElement实例\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprint(paragraph!.asHTML())\n\n// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息\nparagraph = nil\n\n//<p>hello, world</p>\n//p 被析构\n```\n","slug":"Swift笔记-自动引用计数","published":1,"updated":"2017-08-10T12:01:34.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfto003fwou51k2hy6v1","content":"<p>Swift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存<br>通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。<br>但在有些时候我们还是需要在代码中实现内存管理。</p>\n<h2 id=\"ARC-功能\"><a href=\"#ARC-功能\" class=\"headerlink\" title=\"ARC 功能\"></a>ARC 功能</h2><ul>\n<li>当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。</li>\n<li>内存中会包含实例的类型信息，以及这个实例所有相关属性的值。</li>\n<li>当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。</li>\n<li>为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。</li>\n<li>实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"类实例之间的循环强引用\"><a href=\"#类实例之间的循环强引用\" class=\"headerlink\" title=\"类实例之间的循环强引用\"></a>类实例之间的循环强引用</h2><p>这种情况发生在两个类实例互相保持对方的强引用，并让对方不被销毁。这就是所谓的循环强引用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 被析构\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Apartment #\\(number) 被析构\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 两个变量都被初始化为nil</span></div><div class=\"line\"><span class=\"keyword\">var</span> runoob: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 赋值</span></div><div class=\"line\">runoob = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Runoob\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 意感叹号是用来展开和访问可选变量 runoob 和 number73 中的实例</span></div><div class=\"line\"><span class=\"comment\">// 循环强引用被创建</span></div><div class=\"line\">runoob!.apartment = number73</div><div class=\"line\">number73!.tenant = runoob</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断开 runoob 和 number73 变量所持有的强引用时，引用计数并不会降为 0，实例也不会被 ARC 销毁</span></div><div class=\"line\"><span class=\"comment\">// 注意，当你把这两个变量设为nil时，没有任何一个析构函数被调用。</span></div><div class=\"line\"><span class=\"comment\">// 强引用循环阻止了Person和Apartment类实例的销毁，并在你的应用程序中造成了内存泄漏</span></div><div class=\"line\">runoob = <span class=\"literal\">nil</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决实例之间的循环强引用\"><a href=\"#解决实例之间的循环强引用\" class=\"headerlink\" title=\"解决实例之间的循环强引用\"></a>解决实例之间的循环强引用</h3><p>Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：</p>\n<ul>\n<li>弱引用</li>\n<li>无主引用</li>\n</ul>\n<h4 id=\"弱引用实例\"><a href=\"#弱引用实例\" class=\"headerlink\" title=\"弱引用实例\"></a>弱引用实例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Module</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> sub: <span class=\"type\">SubModule</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 主模块\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//weak修饰变量</span></div><div class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> topic: <span class=\"type\">Module</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"子模块 topic 数为 \\(number)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toc: <span class=\"type\">Module</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> list: <span class=\"type\">SubModule</span>?</div><div class=\"line\">toc = <span class=\"type\">Module</span>(name: <span class=\"string\">\"ARC\"</span>)</div><div class=\"line\">list = <span class=\"type\">SubModule</span>(number: <span class=\"number\">4</span>)</div><div class=\"line\">toc!.sub = list</div><div class=\"line\">list!.topic = toc</div><div class=\"line\"></div><div class=\"line\">toc = <span class=\"literal\">nil</span></div><div class=\"line\">list = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h4 id=\"无主引用实例\"><a href=\"#无主引用实例\" class=\"headerlink\" title=\"无主引用实例\"></a>无主引用实例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> section: <span class=\"type\">Marks</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Marks</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> marks: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"comment\">//unowned修饰变量</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> stname: <span class=\"type\">Student</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(marks: <span class=\"type\">Int</span>, stname: <span class=\"type\">Student</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.marks = marks</div><div class=\"line\">        <span class=\"keyword\">self</span>.stname = stname</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的分数为 \\(marks)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> module: <span class=\"type\">Student</span>?</div><div class=\"line\">module = <span class=\"type\">Student</span>(name: <span class=\"string\">\"ARC\"</span>)</div><div class=\"line\">module!.section = <span class=\"type\">Marks</span>(marks: <span class=\"number\">98</span>, stname: module!)</div><div class=\"line\">module = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"闭包引起的循环强引用\"><a href=\"#闭包引起的循环强引用\" class=\"headerlink\" title=\"闭包引起的循环强引用\"></a>闭包引起的循环强引用</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"comment\">//闭包强引用了self。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建实例并打印信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(paragraph!.asHTML())</div></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        <span class=\"comment\">//这里</span></div><div class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 被析构\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建并打印HTMLElement实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(paragraph!.asHTML())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息</span></div><div class=\"line\">paragraph = <span class=\"literal\">nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//&lt;p&gt;hello, world&lt;/p&gt;</span></div><div class=\"line\"><span class=\"comment\">//p 被析构</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Swift 使用自动引用计数（ARC）这一机制来跟踪和管理应用程序的内存<br>通常情况下我们不需要去手动释放内存，因为 ARC 会在类的实例不再被使用时，自动释放其占用的内存。<br>但在有些时候我们还是需要在代码中实现内存管理。</p>\n<h2 id=\"ARC-功能\"><a href=\"#ARC-功能\" class=\"headerlink\" title=\"ARC 功能\"></a>ARC 功能</h2><ul>\n<li>当每次使用 init() 方法创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。</li>\n<li>内存中会包含实例的类型信息，以及这个实例所有相关属性的值。</li>\n<li>当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。</li>\n<li>为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。</li>\n<li>实例赋值给属性、常量或变量，它们都会创建此实例的强引用，只要强引用还在，实例是不允许被销毁的。</li>\n</ul>","more":"<h2 id=\"类实例之间的循环强引用\"><a href=\"#类实例之间的循环强引用\" class=\"headerlink\" title=\"类实例之间的循环强引用\"></a>类实例之间的循环强引用</h2><p>这种情况发生在两个类实例互相保持对方的强引用，并让对方不被销毁。这就是所谓的循环强引用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 被析构\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Apartment #\\(number) 被析构\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 两个变量都被初始化为nil</span></div><div class=\"line\"><span class=\"keyword\">var</span> runoob: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 赋值</span></div><div class=\"line\">runoob = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Runoob\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 意感叹号是用来展开和访问可选变量 runoob 和 number73 中的实例</span></div><div class=\"line\"><span class=\"comment\">// 循环强引用被创建</span></div><div class=\"line\">runoob!.apartment = number73</div><div class=\"line\">number73!.tenant = runoob</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断开 runoob 和 number73 变量所持有的强引用时，引用计数并不会降为 0，实例也不会被 ARC 销毁</span></div><div class=\"line\"><span class=\"comment\">// 注意，当你把这两个变量设为nil时，没有任何一个析构函数被调用。</span></div><div class=\"line\"><span class=\"comment\">// 强引用循环阻止了Person和Apartment类实例的销毁，并在你的应用程序中造成了内存泄漏</span></div><div class=\"line\">runoob = <span class=\"literal\">nil</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决实例之间的循环强引用\"><a href=\"#解决实例之间的循环强引用\" class=\"headerlink\" title=\"解决实例之间的循环强引用\"></a>解决实例之间的循环强引用</h3><p>Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：</p>\n<ul>\n<li>弱引用</li>\n<li>无主引用</li>\n</ul>\n<h4 id=\"弱引用实例\"><a href=\"#弱引用实例\" class=\"headerlink\" title=\"弱引用实例\"></a>弱引用实例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Module</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> sub: <span class=\"type\">SubModule</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 主模块\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//weak修饰变量</span></div><div class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> topic: <span class=\"type\">Module</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"子模块 topic 数为 \\(number)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toc: <span class=\"type\">Module</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> list: <span class=\"type\">SubModule</span>?</div><div class=\"line\">toc = <span class=\"type\">Module</span>(name: <span class=\"string\">\"ARC\"</span>)</div><div class=\"line\">list = <span class=\"type\">SubModule</span>(number: <span class=\"number\">4</span>)</div><div class=\"line\">toc!.sub = list</div><div class=\"line\">list!.topic = toc</div><div class=\"line\"></div><div class=\"line\">toc = <span class=\"literal\">nil</span></div><div class=\"line\">list = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h4 id=\"无主引用实例\"><a href=\"#无主引用实例\" class=\"headerlink\" title=\"无主引用实例\"></a>无主引用实例</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> section: <span class=\"type\">Marks</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Marks</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> marks: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"comment\">//unowned修饰变量</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> stname: <span class=\"type\">Student</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(marks: <span class=\"type\">Int</span>, stname: <span class=\"type\">Student</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.marks = marks</div><div class=\"line\">        <span class=\"keyword\">self</span>.stname = stname</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"学生的分数为 \\(marks)\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> module: <span class=\"type\">Student</span>?</div><div class=\"line\">module = <span class=\"type\">Student</span>(name: <span class=\"string\">\"ARC\"</span>)</div><div class=\"line\">module!.section = <span class=\"type\">Marks</span>(marks: <span class=\"number\">98</span>, stname: module!)</div><div class=\"line\">module = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"闭包引起的循环强引用\"><a href=\"#闭包引起的循环强引用\" class=\"headerlink\" title=\"闭包引起的循环强引用\"></a>闭包引起的循环强引用</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"comment\">//闭包强引用了self。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建实例并打印信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(paragraph!.asHTML())</div></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        <span class=\"comment\">//这里</span></div><div class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(name) 被析构\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建并打印HTMLElement实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(paragraph!.asHTML())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息</span></div><div class=\"line\">paragraph = <span class=\"literal\">nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//&lt;p&gt;hello, world&lt;/p&gt;</span></div><div class=\"line\"><span class=\"comment\">//p 被析构</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-访问控制","date":"2017-06-07T04:29:46.000Z","_content":"\n访问控制可以限定其他源文件或模块中代码对你代码的访问级别。\n\nSwift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。\n\n<!-- more -->\n\n| 访问级别 | 定义 |\n|:------|:-------|\n|public\t|可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。|\n|internal|\t可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。|\n|fileprivate|\t文件内私有，只能在当前源文件中使用。|\n|private|\t只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。|\n\n\n## 语法\n\n\n```swift\npublic class SomePublicClass {}\ninternal class SomeInternalClass {}\nfileprivate class SomeFilePrivateClass {}\nprivate class SomePrivateClass {}\n  \npublic var somePublicVariable = 0\ninternal let someInternalConstant = 0\nfileprivate func someFilePrivateFunction() {}\nprivate func somePrivateFunction() {}\n```\n\n除非有特殊的说明，否则实体都使用默认的访问级别 internal。\n\n## 函数类型访问权限\n\n```swift\nfunc someFunction() -> (SomeInternalClass, SomePrivateClass) {\n    // 函数实现\n}\n```\n\n## 枚举类型访问权限\n枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。\n  \n枚举 Student 被明确的申明为 public 级别，那么它的成员 Name，Mark 的访问级别同样也是 public：\n\n```swift\npublic enum Student {\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\n \nvar studDetails = Student.Name(\"Swift\")\nvar studMarks = Student.Mark(98,97,95)\n \nswitch studMarks {\ncase .Name(let studName):\n    print(\"学生名: \\(studName).\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"学生成绩: \\(Mark1),\\(Mark2),\\(Mark3)\")\n}\n```\n\n## 子类访问权限\n\n子类的访问级别不得高于父类的访问级别。\n\n```swift\npublic class SuperClass {\n    fileprivate func show() {\n        print(\"超类\")\n    }\n}\n \n// 访问级别不能低于超类 internal > public\ninternal class SubClass: SuperClass  {\n    override internal func show() {\n        print(\"子类\")\n    }\n}\n \nlet sup = SuperClass()\nsup.show()\n \nlet sub = SubClass()\nsub.show()\n```\n\n## 常量、变量、属性、下标访问权限\n\n**==常量、变量、属性不能拥有比它们的类型更高的访问级别==**。\n\n如果常量、变量、属性、下标索引的定义类型是private级别的，那么它们必须要明确的申明访问级别为private:\n\n```swift\nprivate var privateInstance = SomePrivateClass()\n```\n\n## Getter 和 Setter访问权限\n\n常量、变量、属性、下标索引的Getters和Setters的访问级别继承自它们所属成员的访问级别。\n\nSetter的访问级别可以低于对应的Getter的访问级别，这样就可以控制变量、属性或下标索引的读写权限。\n\n```swift\nclass Samplepgm {\n    fileprivate var counter: Int = 0{\n        willSet(newTotal){\n            print(\"计数器: \\(newTotal)\")\n        }\n        didSet{\n            if counter > oldValue {\n                print(\"新增加数量 \\(counter - oldValue)\")\n            }\n        }\n    }\n}\n \nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n```\n\n## 构造器和默认构造器访问权限\n\n我们可以给**自定义的**初始化方法申明访问级别，但是要不高于它所属类的访问级别。\n\n如同函数或方法参数，初始化方法参数的访问级别也不能低于初始化方法的访问级别。\n\n默认初始化方法的访问级别与所属类型的访问级别相同。\n\n\n## 协议访问权限\n\n如果你定义了一个public访问级别的协议，那么实现该协议提供的必要函数也会是public的访问级别。\n\n```swift\npublic protocol TcpProtocol {\n    init(no1: Int)\n}\n \npublic class MainClass {\n    var no1: Int // local storage\n    init(no1: Int) {\n        self.no1 = no1 // initialization\n    }\n}\n \nclass SubClass: MainClass, TcpProtocol {\n    var no2: Int\n    init(no1: Int, no2 : Int) {\n        self.no2 = no2\n        super.init(no1:no1)\n    }\n    \n    // Requires only one parameter for convenient method\n    required override convenience init(no1: Int)  {\n        self.init(no1:no1, no2:0)\n    }\n}\n \nlet res = MainClass(no1: 20)\nlet show = SubClass(no1: 30, no2: 50)\n \nprint(\"res is: \\(res.no1)\")\nprint(\"res is: \\(show.no1)\")\nprint(\"res is: \\(show.no2)\")\n```\n\n## 扩展访问权限\n\n你可以在条件允许的情况下对类、结构体、枚举进行扩展。\n\n\n## 泛型访问权限\n\n泛型类型或泛型函数的访问级别取泛型类型、函数本身、泛型类型参数三者中的最低访问级别。\n\n```swift\npublic struct TOS<T> {\n    var items = [T]()\n    private mutating func push(item: T) {\n        items.append(item)\n    }\n    \n    mutating func pop() -> T {\n        return items.removeLast()\n    }\n}\n \nvar tos = TOS<String>()\ntos.push(\"Swift\")\nprint(tos.items)\n \ntos.push(\"泛型\")\nprint(tos.items)\n \ntos.push(\"类型参数\")\nprint(tos.items)\n \ntos.push(\"类型参数名\")\nprint(tos.items)\nlet deletetos = tos.pop()\n```\n\n## 类型别名\n\n任何你定义的类型别名都会被当作不同的类型，以便于进行访问控制。一个类型别名的访问级别不可高于原类型的访问级别。\n\n","source":"_posts/Swift笔记-访问控制.md","raw":"---\ntitle: Swift笔记-访问控制\ndate: 2017-06-07 12:29:46\ntags: \n\t- Swift \ncategories: Swift \n---\n\n访问控制可以限定其他源文件或模块中代码对你代码的访问级别。\n\nSwift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。\n\n<!-- more -->\n\n| 访问级别 | 定义 |\n|:------|:-------|\n|public\t|可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。|\n|internal|\t可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。|\n|fileprivate|\t文件内私有，只能在当前源文件中使用。|\n|private|\t只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。|\n\n\n## 语法\n\n\n```swift\npublic class SomePublicClass {}\ninternal class SomeInternalClass {}\nfileprivate class SomeFilePrivateClass {}\nprivate class SomePrivateClass {}\n  \npublic var somePublicVariable = 0\ninternal let someInternalConstant = 0\nfileprivate func someFilePrivateFunction() {}\nprivate func somePrivateFunction() {}\n```\n\n除非有特殊的说明，否则实体都使用默认的访问级别 internal。\n\n## 函数类型访问权限\n\n```swift\nfunc someFunction() -> (SomeInternalClass, SomePrivateClass) {\n    // 函数实现\n}\n```\n\n## 枚举类型访问权限\n枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。\n  \n枚举 Student 被明确的申明为 public 级别，那么它的成员 Name，Mark 的访问级别同样也是 public：\n\n```swift\npublic enum Student {\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\n \nvar studDetails = Student.Name(\"Swift\")\nvar studMarks = Student.Mark(98,97,95)\n \nswitch studMarks {\ncase .Name(let studName):\n    print(\"学生名: \\(studName).\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"学生成绩: \\(Mark1),\\(Mark2),\\(Mark3)\")\n}\n```\n\n## 子类访问权限\n\n子类的访问级别不得高于父类的访问级别。\n\n```swift\npublic class SuperClass {\n    fileprivate func show() {\n        print(\"超类\")\n    }\n}\n \n// 访问级别不能低于超类 internal > public\ninternal class SubClass: SuperClass  {\n    override internal func show() {\n        print(\"子类\")\n    }\n}\n \nlet sup = SuperClass()\nsup.show()\n \nlet sub = SubClass()\nsub.show()\n```\n\n## 常量、变量、属性、下标访问权限\n\n**==常量、变量、属性不能拥有比它们的类型更高的访问级别==**。\n\n如果常量、变量、属性、下标索引的定义类型是private级别的，那么它们必须要明确的申明访问级别为private:\n\n```swift\nprivate var privateInstance = SomePrivateClass()\n```\n\n## Getter 和 Setter访问权限\n\n常量、变量、属性、下标索引的Getters和Setters的访问级别继承自它们所属成员的访问级别。\n\nSetter的访问级别可以低于对应的Getter的访问级别，这样就可以控制变量、属性或下标索引的读写权限。\n\n```swift\nclass Samplepgm {\n    fileprivate var counter: Int = 0{\n        willSet(newTotal){\n            print(\"计数器: \\(newTotal)\")\n        }\n        didSet{\n            if counter > oldValue {\n                print(\"新增加数量 \\(counter - oldValue)\")\n            }\n        }\n    }\n}\n \nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n```\n\n## 构造器和默认构造器访问权限\n\n我们可以给**自定义的**初始化方法申明访问级别，但是要不高于它所属类的访问级别。\n\n如同函数或方法参数，初始化方法参数的访问级别也不能低于初始化方法的访问级别。\n\n默认初始化方法的访问级别与所属类型的访问级别相同。\n\n\n## 协议访问权限\n\n如果你定义了一个public访问级别的协议，那么实现该协议提供的必要函数也会是public的访问级别。\n\n```swift\npublic protocol TcpProtocol {\n    init(no1: Int)\n}\n \npublic class MainClass {\n    var no1: Int // local storage\n    init(no1: Int) {\n        self.no1 = no1 // initialization\n    }\n}\n \nclass SubClass: MainClass, TcpProtocol {\n    var no2: Int\n    init(no1: Int, no2 : Int) {\n        self.no2 = no2\n        super.init(no1:no1)\n    }\n    \n    // Requires only one parameter for convenient method\n    required override convenience init(no1: Int)  {\n        self.init(no1:no1, no2:0)\n    }\n}\n \nlet res = MainClass(no1: 20)\nlet show = SubClass(no1: 30, no2: 50)\n \nprint(\"res is: \\(res.no1)\")\nprint(\"res is: \\(show.no1)\")\nprint(\"res is: \\(show.no2)\")\n```\n\n## 扩展访问权限\n\n你可以在条件允许的情况下对类、结构体、枚举进行扩展。\n\n\n## 泛型访问权限\n\n泛型类型或泛型函数的访问级别取泛型类型、函数本身、泛型类型参数三者中的最低访问级别。\n\n```swift\npublic struct TOS<T> {\n    var items = [T]()\n    private mutating func push(item: T) {\n        items.append(item)\n    }\n    \n    mutating func pop() -> T {\n        return items.removeLast()\n    }\n}\n \nvar tos = TOS<String>()\ntos.push(\"Swift\")\nprint(tos.items)\n \ntos.push(\"泛型\")\nprint(tos.items)\n \ntos.push(\"类型参数\")\nprint(tos.items)\n \ntos.push(\"类型参数名\")\nprint(tos.items)\nlet deletetos = tos.pop()\n```\n\n## 类型别名\n\n任何你定义的类型别名都会被当作不同的类型，以便于进行访问控制。一个类型别名的访问级别不可高于原类型的访问级别。\n\n","slug":"Swift笔记-访问控制","published":1,"updated":"2017-08-10T12:01:34.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftp003hwou5uuerbv8y","content":"<p>访问控制可以限定其他源文件或模块中代码对你代码的访问级别。</p>\n<p>Swift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">访问级别</th>\n<th style=\"text-align:left\">定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td style=\"text-align:left\">可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internal</td>\n<td style=\"text-align:left\">可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fileprivate</td>\n<td style=\"text-align:left\">文件内私有，只能在当前源文件中使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">private</td>\n<td style=\"text-align:left\">只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomePublicClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeInternalClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeFilePrivateClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomePrivateClass</span> </span>&#123;&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> somePublicVariable = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> someInternalConstant = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFilePrivateFunction</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">somePrivateFunction</span><span class=\"params\">()</span></span> &#123;&#125;</div></pre></td></tr></table></figure>\n<p>除非有特殊的说明，否则实体都使用默认的访问级别 internal。</p>\n<h2 id=\"函数类型访问权限\"><a href=\"#函数类型访问权限\" class=\"headerlink\" title=\"函数类型访问权限\"></a>函数类型访问权限</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">SomeInternalClass</span>, <span class=\"type\">SomePrivateClass</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 函数实现</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"枚举类型访问权限\"><a href=\"#枚举类型访问权限\" class=\"headerlink\" title=\"枚举类型访问权限\"></a>枚举类型访问权限</h2><p>枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。</p>\n<p>枚举 Student 被明确的申明为 public 级别，那么它的成员 Name，Mark 的访问级别同样也是 public：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> studDetails = <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> studMarks = <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生名: \\(studName).\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生成绩: \\(Mark1),\\(Mark2),\\(Mark3)\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"子类访问权限\"><a href=\"#子类访问权限\" class=\"headerlink\" title=\"子类访问权限\"></a>子类访问权限</h2><p>子类的访问级别不得高于父类的访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"超类\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 访问级别不能低于超类 internal &gt; public</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">SuperClass</span>  </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"子类\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> sup = <span class=\"type\">SuperClass</span>()</div><div class=\"line\">sup.show()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> sub = <span class=\"type\">SubClass</span>()</div><div class=\"line\">sub.show()</div></pre></td></tr></table></figure>\n<h2 id=\"常量、变量、属性、下标访问权限\"><a href=\"#常量、变量、属性、下标访问权限\" class=\"headerlink\" title=\"常量、变量、属性、下标访问权限\"></a>常量、变量、属性、下标访问权限</h2><p><strong>==常量、变量、属性不能拥有比它们的类型更高的访问级别==</strong>。</p>\n<p>如果常量、变量、属性、下标索引的定义类型是private级别的，那么它们必须要明确的申明访问级别为private:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> privateInstance = <span class=\"type\">SomePrivateClass</span>()</div></pre></td></tr></table></figure>\n<h2 id=\"Getter-和-Setter访问权限\"><a href=\"#Getter-和-Setter访问权限\" class=\"headerlink\" title=\"Getter 和 Setter访问权限\"></a>Getter 和 Setter访问权限</h2><p>常量、变量、属性、下标索引的Getters和Setters的访问级别继承自它们所属成员的访问级别。</p>\n<p>Setter的访问级别可以低于对应的Getter的访问级别，这样就可以控制变量、属性或下标索引的读写权限。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Samplepgm</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>(newTotal)&#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"计数器: \\(newTotal)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> counter &gt; oldValue &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"新增加数量 \\(counter - oldValue)\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">NewCounter</span> = <span class=\"type\">Samplepgm</span>()</div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">800</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造器和默认构造器访问权限\"><a href=\"#构造器和默认构造器访问权限\" class=\"headerlink\" title=\"构造器和默认构造器访问权限\"></a>构造器和默认构造器访问权限</h2><p>我们可以给<strong>自定义的</strong>初始化方法申明访问级别，但是要不高于它所属类的访问级别。</p>\n<p>如同函数或方法参数，初始化方法参数的访问级别也不能低于初始化方法的访问级别。</p>\n<p>默认初始化方法的访问级别与所属类型的访问级别相同。</p>\n<h2 id=\"协议访问权限\"><a href=\"#协议访问权限\" class=\"headerlink\" title=\"协议访问权限\"></a>协议访问权限</h2><p>如果你定义了一个public访问级别的协议，那么实现该协议提供的必要函数也会是public的访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">TcpProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1: <span class=\"type\">Int</span> <span class=\"comment\">// local storage</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no1 = no1 <span class=\"comment\">// initialization</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">MainClass</span>, <span class=\"title\">TcpProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>, no2 : <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no2 = no2</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(no1:no1)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Requires only one parameter for convenient method</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)  &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(no1:no1, no2:<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"type\">MainClass</span>(no1: <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> show = <span class=\"type\">SubClass</span>(no1: <span class=\"number\">30</span>, no2: <span class=\"number\">50</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(res.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"扩展访问权限\"><a href=\"#扩展访问权限\" class=\"headerlink\" title=\"扩展访问权限\"></a>扩展访问权限</h2><p>你可以在条件允许的情况下对类、结构体、枚举进行扩展。</p>\n<h2 id=\"泛型访问权限\"><a href=\"#泛型访问权限\" class=\"headerlink\" title=\"泛型访问权限\"></a>泛型访问权限</h2><p>泛型类型或泛型函数的访问级别取泛型类型、函数本身、泛型类型参数三者中的最低访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TOS</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">TOS</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"泛型\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"类型参数\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"类型参数名\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"><span class=\"keyword\">let</span> deletetos = tos.pop()</div></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>任何你定义的类型别名都会被当作不同的类型，以便于进行访问控制。一个类型别名的访问级别不可高于原类型的访问级别。</p>\n","site":{"data":{}},"excerpt":"<p>访问控制可以限定其他源文件或模块中代码对你代码的访问级别。</p>\n<p>Swift 为代码中的实体提供了四种不同的访问级别:public、internal、fileprivate、private。</p>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">访问级别</th>\n<th style=\"text-align:left\">定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td style=\"text-align:left\">可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internal</td>\n<td style=\"text-align:left\">可以访问自己模块中源文件里的任何实体，但是别人不能访问该模块中源文件里的实体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fileprivate</td>\n<td style=\"text-align:left\">文件内私有，只能在当前源文件中使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">private</td>\n<td style=\"text-align:left\">只能在类中访问，离开了这个类或者结构体的作用域外面就无法访问。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomePublicClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeInternalClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeFilePrivateClass</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomePrivateClass</span> </span>&#123;&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> somePublicVariable = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> someInternalConstant = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFilePrivateFunction</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">somePrivateFunction</span><span class=\"params\">()</span></span> &#123;&#125;</div></pre></td></tr></table></figure>\n<p>除非有特殊的说明，否则实体都使用默认的访问级别 internal。</p>\n<h2 id=\"函数类型访问权限\"><a href=\"#函数类型访问权限\" class=\"headerlink\" title=\"函数类型访问权限\"></a>函数类型访问权限</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">SomeInternalClass</span>, <span class=\"type\">SomePrivateClass</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 函数实现</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"枚举类型访问权限\"><a href=\"#枚举类型访问权限\" class=\"headerlink\" title=\"枚举类型访问权限\"></a>枚举类型访问权限</h2><p>枚举中成员的访问级别继承自该枚举，你不能为枚举中的成员单独申明不同的访问级别。</p>\n<p>枚举 Student 被明确的申明为 public 级别，那么它的成员 Name，Mark 的访问级别同样也是 public：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> studDetails = <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> studMarks = <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生名: \\(studName).\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"学生成绩: \\(Mark1),\\(Mark2),\\(Mark3)\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"子类访问权限\"><a href=\"#子类访问权限\" class=\"headerlink\" title=\"子类访问权限\"></a>子类访问权限</h2><p>子类的访问级别不得高于父类的访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"超类\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 访问级别不能低于超类 internal &gt; public</span></div><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">SuperClass</span>  </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"子类\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> sup = <span class=\"type\">SuperClass</span>()</div><div class=\"line\">sup.show()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> sub = <span class=\"type\">SubClass</span>()</div><div class=\"line\">sub.show()</div></pre></td></tr></table></figure>\n<h2 id=\"常量、变量、属性、下标访问权限\"><a href=\"#常量、变量、属性、下标访问权限\" class=\"headerlink\" title=\"常量、变量、属性、下标访问权限\"></a>常量、变量、属性、下标访问权限</h2><p><strong>==常量、变量、属性不能拥有比它们的类型更高的访问级别==</strong>。</p>\n<p>如果常量、变量、属性、下标索引的定义类型是private级别的，那么它们必须要明确的申明访问级别为private:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> privateInstance = <span class=\"type\">SomePrivateClass</span>()</div></pre></td></tr></table></figure>\n<h2 id=\"Getter-和-Setter访问权限\"><a href=\"#Getter-和-Setter访问权限\" class=\"headerlink\" title=\"Getter 和 Setter访问权限\"></a>Getter 和 Setter访问权限</h2><p>常量、变量、属性、下标索引的Getters和Setters的访问级别继承自它们所属成员的访问级别。</p>\n<p>Setter的访问级别可以低于对应的Getter的访问级别，这样就可以控制变量、属性或下标索引的读写权限。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Samplepgm</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>(newTotal)&#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"计数器: \\(newTotal)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">didSet</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> counter &gt; oldValue &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"新增加数量 \\(counter - oldValue)\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">NewCounter</span> = <span class=\"type\">Samplepgm</span>()</div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"type\">NewCounter</span>.counter = <span class=\"number\">800</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造器和默认构造器访问权限\"><a href=\"#构造器和默认构造器访问权限\" class=\"headerlink\" title=\"构造器和默认构造器访问权限\"></a>构造器和默认构造器访问权限</h2><p>我们可以给<strong>自定义的</strong>初始化方法申明访问级别，但是要不高于它所属类的访问级别。</p>\n<p>如同函数或方法参数，初始化方法参数的访问级别也不能低于初始化方法的访问级别。</p>\n<p>默认初始化方法的访问级别与所属类型的访问级别相同。</p>\n<h2 id=\"协议访问权限\"><a href=\"#协议访问权限\" class=\"headerlink\" title=\"协议访问权限\"></a>协议访问权限</h2><p>如果你定义了一个public访问级别的协议，那么实现该协议提供的必要函数也会是public的访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">TcpProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no1: <span class=\"type\">Int</span> <span class=\"comment\">// local storage</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no1 = no1 <span class=\"comment\">// initialization</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">MainClass</span>, <span class=\"title\">TcpProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> no2: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>, no2 : <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.no2 = no2</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(no1:no1)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Requires only one parameter for convenient method</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(no1: <span class=\"type\">Int</span>)  &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(no1:no1, no2:<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"type\">MainClass</span>(no1: <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> show = <span class=\"type\">SubClass</span>(no1: <span class=\"number\">30</span>, no2: <span class=\"number\">50</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(res.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no1)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"res is: \\(show.no2)\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"扩展访问权限\"><a href=\"#扩展访问权限\" class=\"headerlink\" title=\"扩展访问权限\"></a>扩展访问权限</h2><p>你可以在条件允许的情况下对类、结构体、枚举进行扩展。</p>\n<h2 id=\"泛型访问权限\"><a href=\"#泛型访问权限\" class=\"headerlink\" title=\"泛型访问权限\"></a>泛型访问权限</h2><p>泛型类型或泛型函数的访问级别取泛型类型、函数本身、泛型类型参数三者中的最低访问级别。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TOS</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> tos = <span class=\"type\">TOS</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">tos.push(<span class=\"string\">\"Swift\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"泛型\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"类型参数\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"> </div><div class=\"line\">tos.push(<span class=\"string\">\"类型参数名\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tos.items)</div><div class=\"line\"><span class=\"keyword\">let</span> deletetos = tos.pop()</div></pre></td></tr></table></figure>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>任何你定义的类型别名都会被当作不同的类型，以便于进行访问控制。一个类型别名的访问级别不可高于原类型的访问级别。</p>"},{"title":"Swift笔记-类型转换","date":"2017-06-06T08:53:10.000Z","_content":"\nSwift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。\n\n## 检查类型\n\n类型检查使用 is 关键字。\n\n操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。\n\n<!-- more -->\n\n## 向下转型\n\n向下转型，用类型转换操作符(as? 或 as!)\n\n- 当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。条件形式的类型转换总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是 nil。\n\n- 只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\nlet sa = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n```\n\n## Any和AnyObject的类型转换\n\nSwift为不确定类型提供了两种特殊类型别名：\n- AnyObject可以代表任何class类型的实例。\n- Any可以表示任何类型，包括方法类型（function types）。\n \n\n### Any 实例\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\nlet sa = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n\n// 可以存储Any类型的数组 exampleany\nvar exampleany = [Any]()\n\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(\"Any 实例\")\nexampleany.append(Chemistry(physics: \"固体物理\", equations: \"兆赫\"))\n\nfor item2 in exampleany {\n    switch item2 {\n    case let someInt as Int:\n        print(\"整型值为 \\(someInt)\")\n    case let someDouble as Double where someDouble > 0:\n        print(\"Pi 值为 \\(someDouble)\")\n    case let someString as String:\n        print(\"\\(someString)\")\n    case let phy as Chemistry:\n        print(\"主题 '\\(phy.physics)', \\(phy.equations)\")\n    default:\n        print(\"None\")\n    }\n}\n```\n\n### AnyObject 实例\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\n// [AnyObject] 类型的数组\nlet saprint: [AnyObject] = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in saprint {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n\nvar exampleany = [Any]()\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(\"Any 实例\")\nexampleany.append(Chemistry(physics: \"固体物理\", equations: \"兆赫\"))\n\nfor item2 in exampleany {\n    switch item2 {\n    case let someInt as Int:\n        print(\"整型值为 \\(someInt)\")\n    case let someDouble as Double where someDouble > 0:\n        print(\"Pi 值为 \\(someDouble)\")\n    case let someString as String:\n        print(\"\\(someString)\")\n    case let phy as Chemistry:\n        print(\"主题 '\\(phy.physics)', \\(phy.equations)\")\n    default:\n        print(\"None\")\n    }\n}\n```\n在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。","source":"_posts/Swift笔记-类型转换.md","raw":"---\ntitle: Swift笔记-类型转换\ndate: 2017-06-06 16:53:10\ntags: \n\t- Swift \ncategories: Swift \n---\n\nSwift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。\n\n## 检查类型\n\n类型检查使用 is 关键字。\n\n操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。\n\n<!-- more -->\n\n## 向下转型\n\n向下转型，用类型转换操作符(as? 或 as!)\n\n- 当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。条件形式的类型转换总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是 nil。\n\n- 只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\nlet sa = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n```\n\n## Any和AnyObject的类型转换\n\nSwift为不确定类型提供了两种特殊类型别名：\n- AnyObject可以代表任何class类型的实例。\n- Any可以表示任何类型，包括方法类型（function types）。\n \n\n### Any 实例\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\nlet sa = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n\n// 可以存储Any类型的数组 exampleany\nvar exampleany = [Any]()\n\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(\"Any 实例\")\nexampleany.append(Chemistry(physics: \"固体物理\", equations: \"兆赫\"))\n\nfor item2 in exampleany {\n    switch item2 {\n    case let someInt as Int:\n        print(\"整型值为 \\(someInt)\")\n    case let someDouble as Double where someDouble > 0:\n        print(\"Pi 值为 \\(someDouble)\")\n    case let someString as String:\n        print(\"\\(someString)\")\n    case let phy as Chemistry:\n        print(\"主题 '\\(phy.physics)', \\(phy.equations)\")\n    default:\n        print(\"None\")\n    }\n}\n```\n\n### AnyObject 实例\n\n```swift\nclass Subjects {\n    var physics: String\n    init(physics: String) {\n        self.physics = physics\n    }\n}\n\nclass Chemistry: Subjects {\n    var equations: String\n    init(physics: String, equations: String) {\n        self.equations = equations\n        super.init(physics: physics)\n    }\n}\n\nclass Maths: Subjects {\n    var formulae: String\n    init(physics: String, formulae: String) {\n        self.formulae = formulae\n        super.init(physics: physics)\n    }\n}\n\n// [AnyObject] 类型的数组\nlet saprint: [AnyObject] = [\n    Chemistry(physics: \"固体物理\", equations: \"赫兹\"),\n    Maths(physics: \"流体动力学\", formulae: \"千兆赫\"),\n    Chemistry(physics: \"热物理学\", equations: \"分贝\"),\n    Maths(physics: \"天体物理学\", formulae: \"兆赫\"),\n    Maths(physics: \"微分方程\", formulae: \"余弦级数\")]\n\n\nlet samplechem = Chemistry(physics: \"固体物理\", equations: \"赫兹\")\nprint(\"实例物理学是: \\(samplechem.physics)\")\nprint(\"实例方程式: \\(samplechem.equations)\")\n\n\nlet samplemaths = Maths(physics: \"流体动力学\", formulae: \"千兆赫\")\nprint(\"实例物理学是: \\(samplemaths.physics)\")\nprint(\"实例公式是: \\(samplemaths.formulae)\")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in saprint {\n    // 类型转换的条件形式\n    if let show = item as? Chemistry {\n        print(\"化学主题是: '\\(show.physics)', \\(show.equations)\")\n        // 强制形式\n    } else if let example = item as? Maths {\n        print(\"数学主题是: '\\(example.physics)',  \\(example.formulae)\")\n    }\n}\n\nvar exampleany = [Any]()\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(\"Any 实例\")\nexampleany.append(Chemistry(physics: \"固体物理\", equations: \"兆赫\"))\n\nfor item2 in exampleany {\n    switch item2 {\n    case let someInt as Int:\n        print(\"整型值为 \\(someInt)\")\n    case let someDouble as Double where someDouble > 0:\n        print(\"Pi 值为 \\(someDouble)\")\n    case let someString as String:\n        print(\"\\(someString)\")\n    case let phy as Chemistry:\n        print(\"主题 '\\(phy.physics)', \\(phy.equations)\")\n    default:\n        print(\"None\")\n    }\n}\n```\n在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。","slug":"Swift笔记-类型转换","published":1,"updated":"2017-08-10T12:01:34.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftq003kwou5izv2212k","content":"<p>Swift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。</p>\n<h2 id=\"检查类型\"><a href=\"#检查类型\" class=\"headerlink\" title=\"检查类型\"></a>检查类型</h2><p>类型检查使用 is 关键字。</p>\n<p>操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。</p>\n<a id=\"more\"></a>\n<h2 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h2><p>向下转型，用类型转换操作符(as? 或 as!)</p>\n<ul>\n<li><p>当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。条件形式的类型转换总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是 nil。</p>\n</li>\n<li><p>只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sa = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sa &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Any和AnyObject的类型转换\"><a href=\"#Any和AnyObject的类型转换\" class=\"headerlink\" title=\"Any和AnyObject的类型转换\"></a>Any和AnyObject的类型转换</h2><p>Swift为不确定类型提供了两种特殊类型别名：</p>\n<ul>\n<li>AnyObject可以代表任何class类型的实例。</li>\n<li>Any可以表示任何类型，包括方法类型（function types）。</li>\n</ul>\n<h3 id=\"Any-实例\"><a href=\"#Any-实例\" class=\"headerlink\" title=\"Any 实例\"></a>Any 实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sa = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sa &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以存储Any类型的数组 exampleany</span></div><div class=\"line\"><span class=\"keyword\">var</span> exampleany = [<span class=\"type\">Any</span>]()</div><div class=\"line\"></div><div class=\"line\">exampleany.append(<span class=\"number\">12</span>)</div><div class=\"line\">exampleany.append(<span class=\"number\">3.14159</span>)</div><div class=\"line\">exampleany.append(<span class=\"string\">\"Any 实例\"</span>)</div><div class=\"line\">exampleany.append(<span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"兆赫\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> exampleany &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> item2 &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someInt <span class=\"keyword\">as</span> <span class=\"type\">Int</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"整型值为 \\(someInt)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someDouble <span class=\"keyword\">as</span> <span class=\"type\">Double</span> <span class=\"keyword\">where</span> someDouble &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Pi 值为 \\(someDouble)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someString <span class=\"keyword\">as</span> <span class=\"type\">String</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someString)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> phy <span class=\"keyword\">as</span> <span class=\"type\">Chemistry</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"主题 '\\(phy.physics)', \\(phy.equations)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"None\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AnyObject-实例\"><a href=\"#AnyObject-实例\" class=\"headerlink\" title=\"AnyObject 实例\"></a>AnyObject 实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// [AnyObject] 类型的数组</span></div><div class=\"line\"><span class=\"keyword\">let</span> saprint: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> saprint &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> exampleany = [<span class=\"type\">Any</span>]()</div><div class=\"line\">exampleany.append(<span class=\"number\">12</span>)</div><div class=\"line\">exampleany.append(<span class=\"number\">3.14159</span>)</div><div class=\"line\">exampleany.append(<span class=\"string\">\"Any 实例\"</span>)</div><div class=\"line\">exampleany.append(<span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"兆赫\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> exampleany &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> item2 &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someInt <span class=\"keyword\">as</span> <span class=\"type\">Int</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"整型值为 \\(someInt)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someDouble <span class=\"keyword\">as</span> <span class=\"type\">Double</span> <span class=\"keyword\">where</span> someDouble &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Pi 值为 \\(someDouble)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someString <span class=\"keyword\">as</span> <span class=\"type\">String</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someString)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> phy <span class=\"keyword\">as</span> <span class=\"type\">Chemistry</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"主题 '\\(phy.physics)', \\(phy.equations)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"None\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。</p>\n","site":{"data":{}},"excerpt":"<p>Swift 中类型转换使用 is 和 as 操作符实现，is 用于检测值的类型，as 用于转换类型。</p>\n<h2 id=\"检查类型\"><a href=\"#检查类型\" class=\"headerlink\" title=\"检查类型\"></a>检查类型</h2><p>类型检查使用 is 关键字。</p>\n<p>操作符 is 来检查一个实例是否属于特定子类型。若实例属于那个子类型，类型检查操作符返回 true，否则返回 false。</p>","more":"<h2 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h2><p>向下转型，用类型转换操作符(as? 或 as!)</p>\n<ul>\n<li><p>当你不确定向下转型可以成功时，用类型转换的条件形式(as?)。条件形式的类型转换总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是 nil。</p>\n</li>\n<li><p>只有你可以确定向下转型一定会成功时，才使用强制形式(as!)。当你试图向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sa = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sa &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Any和AnyObject的类型转换\"><a href=\"#Any和AnyObject的类型转换\" class=\"headerlink\" title=\"Any和AnyObject的类型转换\"></a>Any和AnyObject的类型转换</h2><p>Swift为不确定类型提供了两种特殊类型别名：</p>\n<ul>\n<li>AnyObject可以代表任何class类型的实例。</li>\n<li>Any可以表示任何类型，包括方法类型（function types）。</li>\n</ul>\n<h3 id=\"Any-实例\"><a href=\"#Any-实例\" class=\"headerlink\" title=\"Any 实例\"></a>Any 实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sa = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sa &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以存储Any类型的数组 exampleany</span></div><div class=\"line\"><span class=\"keyword\">var</span> exampleany = [<span class=\"type\">Any</span>]()</div><div class=\"line\"></div><div class=\"line\">exampleany.append(<span class=\"number\">12</span>)</div><div class=\"line\">exampleany.append(<span class=\"number\">3.14159</span>)</div><div class=\"line\">exampleany.append(<span class=\"string\">\"Any 实例\"</span>)</div><div class=\"line\">exampleany.append(<span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"兆赫\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> exampleany &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> item2 &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someInt <span class=\"keyword\">as</span> <span class=\"type\">Int</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"整型值为 \\(someInt)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someDouble <span class=\"keyword\">as</span> <span class=\"type\">Double</span> <span class=\"keyword\">where</span> someDouble &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Pi 值为 \\(someDouble)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someString <span class=\"keyword\">as</span> <span class=\"type\">String</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someString)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> phy <span class=\"keyword\">as</span> <span class=\"type\">Chemistry</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"主题 '\\(phy.physics)', \\(phy.equations)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"None\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AnyObject-实例\"><a href=\"#AnyObject-实例\" class=\"headerlink\" title=\"AnyObject 实例\"></a>AnyObject 实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> physics: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.physics = physics</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chemistry</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> equations: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, equations: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.equations = equations</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Maths</span>: <span class=\"title\">Subjects</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formulae: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(physics: <span class=\"type\">String</span>, formulae: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.formulae = formulae</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(physics: physics)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// [AnyObject] 类型的数组</span></div><div class=\"line\"><span class=\"keyword\">let</span> saprint: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"热物理学\"</span>, equations: <span class=\"string\">\"分贝\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"天体物理学\"</span>, formulae: <span class=\"string\">\"兆赫\"</span>),</div><div class=\"line\">    <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"微分方程\"</span>, formulae: <span class=\"string\">\"余弦级数\"</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplechem = <span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"赫兹\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplechem.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例方程式: \\(samplechem.equations)\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> samplemaths = <span class=\"type\">Maths</span>(physics: <span class=\"string\">\"流体动力学\"</span>, formulae: <span class=\"string\">\"千兆赫\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例物理学是: \\(samplemaths.physics)\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"实例公式是: \\(samplemaths.formulae)\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chemCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> mathsCount = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> saprint &#123;</div><div class=\"line\">    <span class=\"comment\">// 类型转换的条件形式</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> show = item <span class=\"keyword\">as</span>? <span class=\"type\">Chemistry</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"化学主题是: '\\(show.physics)', \\(show.equations)\"</span>)</div><div class=\"line\">        <span class=\"comment\">// 强制形式</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> example = item <span class=\"keyword\">as</span>? <span class=\"type\">Maths</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"数学主题是: '\\(example.physics)',  \\(example.formulae)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> exampleany = [<span class=\"type\">Any</span>]()</div><div class=\"line\">exampleany.append(<span class=\"number\">12</span>)</div><div class=\"line\">exampleany.append(<span class=\"number\">3.14159</span>)</div><div class=\"line\">exampleany.append(<span class=\"string\">\"Any 实例\"</span>)</div><div class=\"line\">exampleany.append(<span class=\"type\">Chemistry</span>(physics: <span class=\"string\">\"固体物理\"</span>, equations: <span class=\"string\">\"兆赫\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> exampleany &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> item2 &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someInt <span class=\"keyword\">as</span> <span class=\"type\">Int</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"整型值为 \\(someInt)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someDouble <span class=\"keyword\">as</span> <span class=\"type\">Double</span> <span class=\"keyword\">where</span> someDouble &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Pi 值为 \\(someDouble)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> someString <span class=\"keyword\">as</span> <span class=\"type\">String</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(someString)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> phy <span class=\"keyword\">as</span> <span class=\"type\">Chemistry</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"主题 '\\(phy.physics)', \\(phy.equations)\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"None\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。</p>"},{"title":"Swift笔记-继承","date":"2017-06-06T05:41:14.000Z","_content":"\n在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。\n\n## 基类\n\n没有继承其它类的类，称之为基类（Base Class）。\n\n\n```swift\nclass StudDetails {\n    var stname: String!\n    var mark1: Int!\n    var mark2: Int!\n    var mark3: Int!\n    init(stname: String, mark1: Int, mark2: Int, mark3: Int) {\n        self.stname = stname\n        self.mark1 = mark1\n        self.mark2 = mark2\n        self.mark3 = mark3\n    }\n}\nlet stname = \"swift\"\nlet mark1 = 98\nlet mark2 = 89\nlet mark3 = 76\n  \nlet sds = StudDetails(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3);\n  \nprint(sds.stname)\nprint(sds.mark1)\nprint(sds.mark2)\nprint(sds.mark3)\n//swift\n//98\n//89\n//76\n```\n\n<!-- more -->\n\n## 子类\n子类指的是在一个已有类的基础上创建一个新的类。\n\n```swift\nclass SomeClass: SomeSuperclass {\n    // 类的定义\n}\n```\n\n### 实例\n\n```swift\nclass StudDetails\n{\n    var mark1: Int;\n    var mark2: Int;\n  \n    init(stm1:Int, results stm2:Int)\n    {\n        mark1 = stm1;\n        mark2 = stm2;\n    }\n  \n    func show()\n    {\n        print(\"Mark1:\\(self.mark1), Mark2:\\(self.mark2)\")\n    }\n}\n\nclass Tom : StudDetails\n{\n    init()\n    {\n        super.init(stm1: 93, results: 89)\n    }\n}\n  \nlet tom = Tom()\ntom.show()\n  \n//Mark1:93, Mark2:89\n```\n\n## 重写\n\n子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。\n\n\n|重写|\t访问方法，属性，下标脚本|\n|:---|:---|\n|方法|\tsuper.somemethod()|\n|属性|\tsuper.someProperty()|\n|下标脚本|\tsuper[someIndex]|\n\n### 重写方法和属性\n\n#### 重写方法\n\n```swift\nclass SuperClass {\n    func show() {\n        print(\"这是超类 SuperClass\")\n    }\n}\n  \nclass SubClass: SuperClass  {\n    override func show() {\n        print(\"这是子类 SubClass\")\n    }\n}\n  \nlet superClass = SuperClass()\nsuperClass.show()\n  \nlet subClass = SubClass()\nsubClass.show()\n  \n//这是超类 SuperClass\n//这是子类 SubClass\n```\n\n#### 重写属性\n\n注意点：\n- 如果你在重写属性中提供了 setter，那么你也一定要提供 getter。\n- 如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过super.someProperty来返回继承来的值，其中someProperty是你要重写的属性的名字。\n\n```swift\nclass Circle {\n    var radius = 12.5\n    var area: String {\n        return \"矩形半径 \\(radius) \"\n    }\n}\n  \n// 继承超类 Circle\nclass Rectangle: Circle {\n    var print = 7\n    override var area: String {\n        return super.area + \" ，但现在被重写为 \\(print)\"\n    }\n}\n  \nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(\"Radius \\(rect.area)\")\n  \n//Radius 矩形半径 25.0  ，但现在被重写为 3\n```\n\n### 写属性观察器\n\n```swift\nclass Circle {\n    var radius = 12.5\n    var area: String {\n        return \"矩形半径为 \\(radius) \"\n    }\n}\n  \nclass Rectangle: Circle {\n    var print = 7\n    override var area: String {\n        return super.area + \" ，但现在被重写为 \\(print)\"\n    }\n}\n  \n  \nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(\"半径: \\(rect.area)\")\n  \nclass Square: Rectangle {\n    override var radius: Double {\n        //重写didSet\n        didSet {\n            print = Int(radius/5.0)+1\n        }\n    }\n}\n  \n  \nlet sq = Square()\nsq.radius = 100.0\n  \nprint(\"半径: \\(sq.area)\")\n```\n\n### 防止重写\n\n我们可以使用 final 关键字防止它们被重写\n\n```swift\nfinal class Circle {\n    final var radius = 12.5\n    var area: String {\n        return \"矩形半径为 \\(radius) \"\n    }\n}\n```","source":"_posts/Swift笔记-继承.md","raw":"---\ntitle: Swift笔记-继承\ndate: 2017-06-06 13:41:14\ntags: \n\t- Swift \ncategories: Swift \n---\n\n在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。\n\n## 基类\n\n没有继承其它类的类，称之为基类（Base Class）。\n\n\n```swift\nclass StudDetails {\n    var stname: String!\n    var mark1: Int!\n    var mark2: Int!\n    var mark3: Int!\n    init(stname: String, mark1: Int, mark2: Int, mark3: Int) {\n        self.stname = stname\n        self.mark1 = mark1\n        self.mark2 = mark2\n        self.mark3 = mark3\n    }\n}\nlet stname = \"swift\"\nlet mark1 = 98\nlet mark2 = 89\nlet mark3 = 76\n  \nlet sds = StudDetails(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3);\n  \nprint(sds.stname)\nprint(sds.mark1)\nprint(sds.mark2)\nprint(sds.mark3)\n//swift\n//98\n//89\n//76\n```\n\n<!-- more -->\n\n## 子类\n子类指的是在一个已有类的基础上创建一个新的类。\n\n```swift\nclass SomeClass: SomeSuperclass {\n    // 类的定义\n}\n```\n\n### 实例\n\n```swift\nclass StudDetails\n{\n    var mark1: Int;\n    var mark2: Int;\n  \n    init(stm1:Int, results stm2:Int)\n    {\n        mark1 = stm1;\n        mark2 = stm2;\n    }\n  \n    func show()\n    {\n        print(\"Mark1:\\(self.mark1), Mark2:\\(self.mark2)\")\n    }\n}\n\nclass Tom : StudDetails\n{\n    init()\n    {\n        super.init(stm1: 93, results: 89)\n    }\n}\n  \nlet tom = Tom()\ntom.show()\n  \n//Mark1:93, Mark2:89\n```\n\n## 重写\n\n子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。\n\n\n|重写|\t访问方法，属性，下标脚本|\n|:---|:---|\n|方法|\tsuper.somemethod()|\n|属性|\tsuper.someProperty()|\n|下标脚本|\tsuper[someIndex]|\n\n### 重写方法和属性\n\n#### 重写方法\n\n```swift\nclass SuperClass {\n    func show() {\n        print(\"这是超类 SuperClass\")\n    }\n}\n  \nclass SubClass: SuperClass  {\n    override func show() {\n        print(\"这是子类 SubClass\")\n    }\n}\n  \nlet superClass = SuperClass()\nsuperClass.show()\n  \nlet subClass = SubClass()\nsubClass.show()\n  \n//这是超类 SuperClass\n//这是子类 SubClass\n```\n\n#### 重写属性\n\n注意点：\n- 如果你在重写属性中提供了 setter，那么你也一定要提供 getter。\n- 如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过super.someProperty来返回继承来的值，其中someProperty是你要重写的属性的名字。\n\n```swift\nclass Circle {\n    var radius = 12.5\n    var area: String {\n        return \"矩形半径 \\(radius) \"\n    }\n}\n  \n// 继承超类 Circle\nclass Rectangle: Circle {\n    var print = 7\n    override var area: String {\n        return super.area + \" ，但现在被重写为 \\(print)\"\n    }\n}\n  \nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(\"Radius \\(rect.area)\")\n  \n//Radius 矩形半径 25.0  ，但现在被重写为 3\n```\n\n### 写属性观察器\n\n```swift\nclass Circle {\n    var radius = 12.5\n    var area: String {\n        return \"矩形半径为 \\(radius) \"\n    }\n}\n  \nclass Rectangle: Circle {\n    var print = 7\n    override var area: String {\n        return super.area + \" ，但现在被重写为 \\(print)\"\n    }\n}\n  \n  \nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(\"半径: \\(rect.area)\")\n  \nclass Square: Rectangle {\n    override var radius: Double {\n        //重写didSet\n        didSet {\n            print = Int(radius/5.0)+1\n        }\n    }\n}\n  \n  \nlet sq = Square()\nsq.radius = 100.0\n  \nprint(\"半径: \\(sq.area)\")\n```\n\n### 防止重写\n\n我们可以使用 final 关键字防止它们被重写\n\n```swift\nfinal class Circle {\n    final var radius = 12.5\n    var area: String {\n        return \"矩形半径为 \\(radius) \"\n    }\n}\n```","slug":"Swift笔记-继承","published":1,"updated":"2017-08-10T12:01:34.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfts003nwou5sbm95mho","content":"<p>在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>没有继承其它类的类，称之为基类（Base Class）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudDetails</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> stname: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>(stname: <span class=\"type\">String</span>, mark1: <span class=\"type\">Int</span>, mark2: <span class=\"type\">Int</span>, mark3: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.stname = stname</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark1 = mark1</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark2 = mark2</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark3 = mark3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> stname = <span class=\"string\">\"swift\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"number\">98</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"number\">89</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"number\">76</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> sds = <span class=\"type\">StudDetails</span>(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(sds.stname)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark3)</div><div class=\"line\"><span class=\"comment\">//swift</span></div><div class=\"line\"><span class=\"comment\">//98</span></div><div class=\"line\"><span class=\"comment\">//89</span></div><div class=\"line\"><span class=\"comment\">//76</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"子类\"><a href=\"#子类\" class=\"headerlink\" title=\"子类\"></a>子类</h2><p>子类指的是在一个已有类的基础上创建一个新的类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperclass</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudDetails</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">init</span>(stm1:<span class=\"type\">Int</span>, results stm2:<span class=\"type\">Int</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        mark1 = stm1;</div><div class=\"line\">        mark2 = stm2;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1:\\(self.mark1), Mark2:\\(self.mark2)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span> : <span class=\"title\">StudDetails</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(stm1: <span class=\"number\">93</span>, results: <span class=\"number\">89</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"type\">Tom</span>()</div><div class=\"line\">tom.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Mark1:93, Mark2:89</span></div></pre></td></tr></table></figure>\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">重写</th>\n<th style=\"text-align:left\">访问方法，属性，下标脚本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">super.somemethod()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">属性</td>\n<td style=\"text-align:left\">super.someProperty()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下标脚本</td>\n<td style=\"text-align:left\">super[someIndex]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重写方法和属性\"><a href=\"#重写方法和属性\" class=\"headerlink\" title=\"重写方法和属性\"></a>重写方法和属性</h3><h4 id=\"重写方法\"><a href=\"#重写方法\" class=\"headerlink\" title=\"重写方法\"></a>重写方法</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"这是超类 SuperClass\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">SuperClass</span>  </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"这是子类 SubClass\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> superClass = <span class=\"type\">SuperClass</span>()</div><div class=\"line\">superClass.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> subClass = <span class=\"type\">SubClass</span>()</div><div class=\"line\">subClass.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//这是超类 SuperClass</span></div><div class=\"line\"><span class=\"comment\">//这是子类 SubClass</span></div></pre></td></tr></table></figure>\n<h4 id=\"重写属性\"><a href=\"#重写属性\" class=\"headerlink\" title=\"重写属性\"></a>重写属性</h4><p>注意点：</p>\n<ul>\n<li>如果你在重写属性中提供了 setter，那么你也一定要提供 getter。</li>\n<li>如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过super.someProperty来返回继承来的值，其中someProperty是你要重写的属性的名字。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 继承超类 Circle</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span> = <span class=\"number\">7</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.area + <span class=\"string\">\" ，但现在被重写为 \\(print)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> rect = <span class=\"type\">Rectangle</span>()</div><div class=\"line\">rect.radius = <span class=\"number\">25.0</span></div><div class=\"line\">rect.<span class=\"built_in\">print</span> = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Radius \\(rect.area)\"</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Radius 矩形半径 25.0  ，但现在被重写为 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"写属性观察器\"><a href=\"#写属性观察器\" class=\"headerlink\" title=\"写属性观察器\"></a>写属性观察器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径为 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span> = <span class=\"number\">7</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.area + <span class=\"string\">\" ，但现在被重写为 \\(print)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> rect = <span class=\"type\">Rectangle</span>()</div><div class=\"line\">rect.radius = <span class=\"number\">25.0</span></div><div class=\"line\">rect.<span class=\"built_in\">print</span> = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半径: \\(rect.area)\"</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//重写didSet</span></div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span> = <span class=\"type\">Int</span>(radius/<span class=\"number\">5.0</span>)+<span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"type\">Square</span>()</div><div class=\"line\">sq.radius = <span class=\"number\">100.0</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半径: \\(sq.area)\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"防止重写\"><a href=\"#防止重写\" class=\"headerlink\" title=\"防止重写\"></a>防止重写</h3><p>我们可以使用 final 关键字防止它们被重写</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径为 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在 Swift 中，类可以调用和访问超类的方法，属性和下标脚本，并且可以重写它们。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>没有继承其它类的类，称之为基类（Base Class）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudDetails</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> stname: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">var</span> mark3: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>(stname: <span class=\"type\">String</span>, mark1: <span class=\"type\">Int</span>, mark2: <span class=\"type\">Int</span>, mark3: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.stname = stname</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark1 = mark1</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark2 = mark2</div><div class=\"line\">        <span class=\"keyword\">self</span>.mark3 = mark3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> stname = <span class=\"string\">\"swift\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"number\">98</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"number\">89</span></div><div class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"number\">76</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> sds = <span class=\"type\">StudDetails</span>(stname:stname, mark1:mark1, mark2:mark2, mark3:mark3);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(sds.stname)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark1)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark2)</div><div class=\"line\"><span class=\"built_in\">print</span>(sds.mark3)</div><div class=\"line\"><span class=\"comment\">//swift</span></div><div class=\"line\"><span class=\"comment\">//98</span></div><div class=\"line\"><span class=\"comment\">//89</span></div><div class=\"line\"><span class=\"comment\">//76</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"子类\"><a href=\"#子类\" class=\"headerlink\" title=\"子类\"></a>子类</h2><p>子类指的是在一个已有类的基础上创建一个新的类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperclass</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudDetails</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark1: <span class=\"type\">Int</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mark2: <span class=\"type\">Int</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">init</span>(stm1:<span class=\"type\">Int</span>, results stm2:<span class=\"type\">Int</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        mark1 = stm1;</div><div class=\"line\">        mark2 = stm2;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Mark1:\\(self.mark1), Mark2:\\(self.mark2)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tom</span> : <span class=\"title\">StudDetails</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(stm1: <span class=\"number\">93</span>, results: <span class=\"number\">89</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"type\">Tom</span>()</div><div class=\"line\">tom.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Mark1:93, Mark2:89</span></div></pre></td></tr></table></figure>\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>子类可以通过继承来的实例方法，类方法，实例属性，或下标脚本来实现自己的定制功能，我们把这种行为叫重写（overriding）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">重写</th>\n<th style=\"text-align:left\">访问方法，属性，下标脚本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">super.somemethod()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">属性</td>\n<td style=\"text-align:left\">super.someProperty()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下标脚本</td>\n<td style=\"text-align:left\">super[someIndex]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重写方法和属性\"><a href=\"#重写方法和属性\" class=\"headerlink\" title=\"重写方法和属性\"></a>重写方法和属性</h3><h4 id=\"重写方法\"><a href=\"#重写方法\" class=\"headerlink\" title=\"重写方法\"></a>重写方法</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"这是超类 SuperClass\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span>: <span class=\"title\">SuperClass</span>  </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"这是子类 SubClass\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> superClass = <span class=\"type\">SuperClass</span>()</div><div class=\"line\">superClass.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> subClass = <span class=\"type\">SubClass</span>()</div><div class=\"line\">subClass.show()</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//这是超类 SuperClass</span></div><div class=\"line\"><span class=\"comment\">//这是子类 SubClass</span></div></pre></td></tr></table></figure>\n<h4 id=\"重写属性\"><a href=\"#重写属性\" class=\"headerlink\" title=\"重写属性\"></a>重写属性</h4><p>注意点：</p>\n<ul>\n<li>如果你在重写属性中提供了 setter，那么你也一定要提供 getter。</li>\n<li>如果你不想在重写版本中的 getter 里修改继承来的属性值，你可以直接通过super.someProperty来返回继承来的值，其中someProperty是你要重写的属性的名字。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 继承超类 Circle</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span> = <span class=\"number\">7</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.area + <span class=\"string\">\" ，但现在被重写为 \\(print)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> rect = <span class=\"type\">Rectangle</span>()</div><div class=\"line\">rect.radius = <span class=\"number\">25.0</span></div><div class=\"line\">rect.<span class=\"built_in\">print</span> = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Radius \\(rect.area)\"</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//Radius 矩形半径 25.0  ，但现在被重写为 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"写属性观察器\"><a href=\"#写属性观察器\" class=\"headerlink\" title=\"写属性观察器\"></a>写属性观察器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径为 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span>: <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">print</span> = <span class=\"number\">7</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.area + <span class=\"string\">\" ，但现在被重写为 \\(print)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> rect = <span class=\"type\">Rectangle</span>()</div><div class=\"line\">rect.radius = <span class=\"number\">25.0</span></div><div class=\"line\">rect.<span class=\"built_in\">print</span> = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半径: \\(rect.area)\"</span>)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//重写didSet</span></div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span> = <span class=\"type\">Int</span>(radius/<span class=\"number\">5.0</span>)+<span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> sq = <span class=\"type\">Square</span>()</div><div class=\"line\">sq.radius = <span class=\"number\">100.0</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"半径: \\(sq.area)\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"防止重写\"><a href=\"#防止重写\" class=\"headerlink\" title=\"防止重写\"></a>防止重写</h3><p>我们可以使用 final 关键字防止它们被重写</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> radius = <span class=\"number\">12.5</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"矩形半径为 \\(radius) \"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Swift笔记-运算符","date":"2017-06-05T01:06:54.000Z","_content":"\n## 赋值运算符 (=)\n\n```swift\nlet b = 10\nvar a = 5\na = b\n// a 现在等于 10\n```\n\n\n## 算术运算符 \n\n* 加法（+）\n* 减法（-）\n* 乘法（*）\n* 除法（/）\n\n```swift\n1 + 2       // 等于 3\n5 - 3       // 等于 2\n2 * 3       // 等于 6\n10.0 / 2.5  // 等于 4.0\n```\n\n加法运算符也可用于String的拼接：\n\n```swift\n\"hello, \" + \"world\"  // 等于 \"hello, world\"\n```\n\n<!-- more -->\n\n## 求余运算符 (%)\n\n```swift\n9 % 4    // 等于 1\n```\n\n```swift\n8 % 2.5   // 等于 0.5\n```\n\n## 自增和自减 (++) (--)\n\n\n* 当++前置的时候，先自増再返回。\n* 当++后置的时候，先返回再自增。\n\n```swift\nvar a = 0\nlet b = ++a // a 和 b 现在都是 1\nlet c = a++ // a 现在 2, 但 c 是 a 自增前的值 1\n```\n\n## 一元负号运算符\n\n```swift\nlet three = 3\nlet minusThree = -three       // minusThree 等于 -3\nlet plusThree = -minusThree   // plusThree 等于 3, 或 \"负负3\"\n```\n\n## 一元正号运算符\n\n一元正号（+）不做任何改变地返回操作数的值：\n```swift\nlet minusSix = -6\nlet alsoMinusSix = +minusSix  // alsoMinusSix 等于 -6\n```\n\n## 组合赋值运算符\n\n表达式a += 2是a = a + 2的简写\n\n```swift\nvar a = 1\na += 2 // a 现在是 3\n```\n\n## 比较运算符\n\n* 等于（a == b）\n* 不等于（a != b）\n* 大于（a > b）\n* 小于（a < b）\n* 大于等于（a >= b）\n* 小于等于（a <= b）\n\n```swift\n1 == 1   // true, 因为 1 等于 1\n2 != 1   // true, 因为 2 不等于 1\n2 > 1    // true, 因为 2 大于 1\n1 < 2    // true, 因为 1 小于2\n1 >= 1   // true, 因为 1 大于等于 1\n2 <= 1   // false, 因为 2 并不小于等于 1\n```\n\n## 三目运算符 (a?b:c)\n\n问题 ? 答案1 : 答案2\n\n如果问题成立，返回答案1的结果; 如果不成立，返回答案2的结果。\n\n## 空合运算符 (a ?? b)\n\n空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件:\n\n* 表达式a必须是Optional可选类型\n* 默认值b的类型必须要和a存储值的类型保持一致\n\n```swift\nlet defaultColorName = \"red\"\nvar userDefinedColorName: String?   //默认值为 nil\n\nvar colorNameToUse = userDefinedColorName ?? defaultColorName\n// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 \"red\"\n\n```\n\n```swift\nuserDefinedColorName = \"green\"\ncolorNameToUse = userDefinedColorName ?? defaultColorName\n// userDefinedColorName 非空，因此 colorNameToUse 的值为 \"green\"\n```\n\n## 区间运算符\n\n### 闭区间运算符 （a...b）\n\n```swift\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n// 1 * 5 = 5\n// 2 * 5 = 10\n// 3 * 5 = 15\n// 4 * 5 = 20\n// 5 * 5 = 25\n```\n\n### 半开区间运算符 (a..<b)\n\n```swift\nlet names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]\nlet count = names.count\nfor i in 0..<count {\n    print(\"第 \\(i + 1) 个人叫 \\(names[i])\")\n}\n// 第 1 个人叫 Anna\n// 第 2 个人叫 Alex\n// 第 3 个人叫 Brian\n// 第 4 个人叫 Jack\n```\n\n## 逻辑运算\n\n### 逻辑非 (!a)\n```swift\nlet allowedEntry = false\nif !allowedEntry {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"ACCESS DENIED\"\n```\n\n### 逻辑与 (a && b)\n```swift\nlet enteredDoorCode = true\nlet passedRetinaScan = false\nif enteredDoorCode && passedRetinaScan {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"ACCESS DENIED\"\n```\n\n### 逻辑或 (a || b)\n```swift\nlet hasDoorKey = false\nlet knowsOverridePassword = true\nif hasDoorKey || knowsOverridePassword {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"Welcome!\"\n```\n\n### 使用括号来明确优先级\n\n```swift\nif (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"Welcome!\"\n```","source":"_posts/Swift笔记-运算符.md","raw":"---\ntitle: Swift笔记-运算符\ndate: 2017-06-05 09:06:54\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## 赋值运算符 (=)\n\n```swift\nlet b = 10\nvar a = 5\na = b\n// a 现在等于 10\n```\n\n\n## 算术运算符 \n\n* 加法（+）\n* 减法（-）\n* 乘法（*）\n* 除法（/）\n\n```swift\n1 + 2       // 等于 3\n5 - 3       // 等于 2\n2 * 3       // 等于 6\n10.0 / 2.5  // 等于 4.0\n```\n\n加法运算符也可用于String的拼接：\n\n```swift\n\"hello, \" + \"world\"  // 等于 \"hello, world\"\n```\n\n<!-- more -->\n\n## 求余运算符 (%)\n\n```swift\n9 % 4    // 等于 1\n```\n\n```swift\n8 % 2.5   // 等于 0.5\n```\n\n## 自增和自减 (++) (--)\n\n\n* 当++前置的时候，先自増再返回。\n* 当++后置的时候，先返回再自增。\n\n```swift\nvar a = 0\nlet b = ++a // a 和 b 现在都是 1\nlet c = a++ // a 现在 2, 但 c 是 a 自增前的值 1\n```\n\n## 一元负号运算符\n\n```swift\nlet three = 3\nlet minusThree = -three       // minusThree 等于 -3\nlet plusThree = -minusThree   // plusThree 等于 3, 或 \"负负3\"\n```\n\n## 一元正号运算符\n\n一元正号（+）不做任何改变地返回操作数的值：\n```swift\nlet minusSix = -6\nlet alsoMinusSix = +minusSix  // alsoMinusSix 等于 -6\n```\n\n## 组合赋值运算符\n\n表达式a += 2是a = a + 2的简写\n\n```swift\nvar a = 1\na += 2 // a 现在是 3\n```\n\n## 比较运算符\n\n* 等于（a == b）\n* 不等于（a != b）\n* 大于（a > b）\n* 小于（a < b）\n* 大于等于（a >= b）\n* 小于等于（a <= b）\n\n```swift\n1 == 1   // true, 因为 1 等于 1\n2 != 1   // true, 因为 2 不等于 1\n2 > 1    // true, 因为 2 大于 1\n1 < 2    // true, 因为 1 小于2\n1 >= 1   // true, 因为 1 大于等于 1\n2 <= 1   // false, 因为 2 并不小于等于 1\n```\n\n## 三目运算符 (a?b:c)\n\n问题 ? 答案1 : 答案2\n\n如果问题成立，返回答案1的结果; 如果不成立，返回答案2的结果。\n\n## 空合运算符 (a ?? b)\n\n空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件:\n\n* 表达式a必须是Optional可选类型\n* 默认值b的类型必须要和a存储值的类型保持一致\n\n```swift\nlet defaultColorName = \"red\"\nvar userDefinedColorName: String?   //默认值为 nil\n\nvar colorNameToUse = userDefinedColorName ?? defaultColorName\n// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 \"red\"\n\n```\n\n```swift\nuserDefinedColorName = \"green\"\ncolorNameToUse = userDefinedColorName ?? defaultColorName\n// userDefinedColorName 非空，因此 colorNameToUse 的值为 \"green\"\n```\n\n## 区间运算符\n\n### 闭区间运算符 （a...b）\n\n```swift\nfor index in 1...5 {\n    print(\"\\(index) * 5 = \\(index * 5)\")\n}\n// 1 * 5 = 5\n// 2 * 5 = 10\n// 3 * 5 = 15\n// 4 * 5 = 20\n// 5 * 5 = 25\n```\n\n### 半开区间运算符 (a..<b)\n\n```swift\nlet names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]\nlet count = names.count\nfor i in 0..<count {\n    print(\"第 \\(i + 1) 个人叫 \\(names[i])\")\n}\n// 第 1 个人叫 Anna\n// 第 2 个人叫 Alex\n// 第 3 个人叫 Brian\n// 第 4 个人叫 Jack\n```\n\n## 逻辑运算\n\n### 逻辑非 (!a)\n```swift\nlet allowedEntry = false\nif !allowedEntry {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"ACCESS DENIED\"\n```\n\n### 逻辑与 (a && b)\n```swift\nlet enteredDoorCode = true\nlet passedRetinaScan = false\nif enteredDoorCode && passedRetinaScan {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"ACCESS DENIED\"\n```\n\n### 逻辑或 (a || b)\n```swift\nlet hasDoorKey = false\nlet knowsOverridePassword = true\nif hasDoorKey || knowsOverridePassword {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"Welcome!\"\n```\n\n### 使用括号来明确优先级\n\n```swift\nif (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {\n    print(\"Welcome!\")\n} else {\n    print(\"ACCESS DENIED\")\n}\n// 输出 \"Welcome!\"\n```","slug":"Swift笔记-运算符","published":1,"updated":"2017-08-10T12:01:34.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftu003qwou5hjbj472u","content":"<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符 (=)\"></a>赋值运算符 (=)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span></div><div class=\"line\">a = b</div><div class=\"line\"><span class=\"comment\">// a 现在等于 10</span></div></pre></td></tr></table></figure>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><ul>\n<li>加法（+）</li>\n<li>减法（-）</li>\n<li>乘法（*）</li>\n<li>除法（/）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>       <span class=\"comment\">// 等于 3</span></div><div class=\"line\"><span class=\"number\">5</span> - <span class=\"number\">3</span>       <span class=\"comment\">// 等于 2</span></div><div class=\"line\"><span class=\"number\">2</span> * <span class=\"number\">3</span>       <span class=\"comment\">// 等于 6</span></div><div class=\"line\"><span class=\"number\">10.0</span> / <span class=\"number\">2.5</span>  <span class=\"comment\">// 等于 4.0</span></div></pre></td></tr></table></figure>\n<p>加法运算符也可用于String的拼接：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"hello, \"</span> + <span class=\"string\">\"world\"</span>  <span class=\"comment\">// 等于 \"hello, world\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"求余运算符\"><a href=\"#求余运算符\" class=\"headerlink\" title=\"求余运算符 (%)\"></a>求余运算符 (%)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">9</span> % <span class=\"number\">4</span>    <span class=\"comment\">// 等于 1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">8</span> % <span class=\"number\">2.5</span>   <span class=\"comment\">// 等于 0.5</span></div></pre></td></tr></table></figure>\n<h2 id=\"自增和自减-–\"><a href=\"#自增和自减-–\" class=\"headerlink\" title=\"自增和自减 (++) (–)\"></a>自增和自减 (++) (–)</h2><ul>\n<li>当++前置的时候，先自増再返回。</li>\n<li>当++后置的时候，先返回再自增。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = ++a <span class=\"comment\">// a 和 b 现在都是 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = a++ <span class=\"comment\">// a 现在 2, 但 c 是 a 自增前的值 1</span></div></pre></td></tr></table></figure>\n<h2 id=\"一元负号运算符\"><a href=\"#一元负号运算符\" class=\"headerlink\" title=\"一元负号运算符\"></a>一元负号运算符</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> three = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> minusThree = -three       <span class=\"comment\">// minusThree 等于 -3</span></div><div class=\"line\"><span class=\"keyword\">let</span> plusThree = -minusThree   <span class=\"comment\">// plusThree 等于 3, 或 \"负负3\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"一元正号运算符\"><a href=\"#一元正号运算符\" class=\"headerlink\" title=\"一元正号运算符\"></a>一元正号运算符</h2><p>一元正号（+）不做任何改变地返回操作数的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> minusSix = -<span class=\"number\">6</span></div><div class=\"line\"><span class=\"keyword\">let</span> alsoMinusSix = +minusSix  <span class=\"comment\">// alsoMinusSix 等于 -6</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"组合赋值运算符\"><a href=\"#组合赋值运算符\" class=\"headerlink\" title=\"组合赋值运算符\"></a>组合赋值运算符</h2><p>表达式a += 2是a = a + 2的简写</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\">a += <span class=\"number\">2</span> <span class=\"comment\">// a 现在是 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><ul>\n<li>等于（a == b）</li>\n<li>不等于（a != b）</li>\n<li>大于（a &gt; b）</li>\n<li>小于（a &lt; b）</li>\n<li>大于等于（a &gt;= b）</li>\n<li>小于等于（a &lt;= b）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 1 等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> != <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 2 不等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> &gt; <span class=\"number\">1</span>    <span class=\"comment\">// true, 因为 2 大于 1</span></div><div class=\"line\"><span class=\"number\">1</span> &lt; <span class=\"number\">2</span>    <span class=\"comment\">// true, 因为 1 小于2</span></div><div class=\"line\"><span class=\"number\">1</span> &gt;= <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 1 大于等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> &lt;= <span class=\"number\">1</span>   <span class=\"comment\">// false, 因为 2 并不小于等于 1</span></div></pre></td></tr></table></figure>\n<h2 id=\"三目运算符-a-b-c\"><a href=\"#三目运算符-a-b-c\" class=\"headerlink\" title=\"三目运算符 (a?b:c)\"></a>三目运算符 (a?b:c)</h2><p>问题 ? 答案1 : 答案2</p>\n<p>如果问题成立，返回答案1的结果; 如果不成立，返回答案2的结果。</p>\n<h2 id=\"空合运算符-a-b\"><a href=\"#空合运算符-a-b\" class=\"headerlink\" title=\"空合运算符 (a ?? b)\"></a>空合运算符 (a ?? b)</h2><p>空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件:</p>\n<ul>\n<li>表达式a必须是Optional可选类型</li>\n<li>默认值b的类型必须要和a存储值的类型保持一致</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> defaultColorName = <span class=\"string\">\"red\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> userDefinedColorName: <span class=\"type\">String</span>?   <span class=\"comment\">//默认值为 nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> colorNameToUse = userDefinedColorName ?? defaultColorName</div><div class=\"line\"><span class=\"comment\">// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 \"red\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">userDefinedColorName = <span class=\"string\">\"green\"</span></div><div class=\"line\">colorNameToUse = userDefinedColorName ?? defaultColorName</div><div class=\"line\"><span class=\"comment\">// userDefinedColorName 非空，因此 colorNameToUse 的值为 \"green\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"区间运算符\"><a href=\"#区间运算符\" class=\"headerlink\" title=\"区间运算符\"></a>区间运算符</h2><h3 id=\"闭区间运算符-（a…b）\"><a href=\"#闭区间运算符-（a…b）\" class=\"headerlink\" title=\"闭区间运算符 （a…b）\"></a>闭区间运算符 （a…b）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 * 5 = 5</span></div><div class=\"line\"><span class=\"comment\">// 2 * 5 = 10</span></div><div class=\"line\"><span class=\"comment\">// 3 * 5 = 15</span></div><div class=\"line\"><span class=\"comment\">// 4 * 5 = 20</span></div><div class=\"line\"><span class=\"comment\">// 5 * 5 = 25</span></div></pre></td></tr></table></figure>\n<h3 id=\"半开区间运算符-a-lt-b\"><a href=\"#半开区间运算符-a-lt-b\" class=\"headerlink\" title=\"半开区间运算符 (a..&lt;b)\"></a>半开区间运算符 (a..&lt;b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"Anna\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Brian\"</span>, <span class=\"string\">\"Jack\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = names.<span class=\"built_in\">count</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第 \\(i + 1) 个人叫 \\(names[i])\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 第 1 个人叫 Anna</span></div><div class=\"line\"><span class=\"comment\">// 第 2 个人叫 Alex</span></div><div class=\"line\"><span class=\"comment\">// 第 3 个人叫 Brian</span></div><div class=\"line\"><span class=\"comment\">// 第 4 个人叫 Jack</span></div></pre></td></tr></table></figure>\n<h2 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h2><h3 id=\"逻辑非-a\"><a href=\"#逻辑非-a\" class=\"headerlink\" title=\"逻辑非 (!a)\"></a>逻辑非 (!a)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> allowedEntry = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">if</span> !allowedEntry &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"ACCESS DENIED\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"逻辑与-a-amp-amp-b\"><a href=\"#逻辑与-a-amp-amp-b\" class=\"headerlink\" title=\"逻辑与 (a &amp;&amp; b)\"></a>逻辑与 (a &amp;&amp; b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> enteredDoorCode = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">let</span> passedRetinaScan = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">if</span> enteredDoorCode &amp;&amp; passedRetinaScan &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"ACCESS DENIED\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"逻辑或-a-b\"><a href=\"#逻辑或-a-b\" class=\"headerlink\" title=\"逻辑或 (a || b)\"></a>逻辑或 (a || b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> hasDoorKey = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">let</span> knowsOverridePassword = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">if</span> hasDoorKey || knowsOverridePassword &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Welcome!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用括号来明确优先级\"><a href=\"#使用括号来明确优先级\" class=\"headerlink\" title=\"使用括号来明确优先级\"></a>使用括号来明确优先级</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Welcome!\"</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符 (=)\"></a>赋值运算符 (=)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span></div><div class=\"line\">a = b</div><div class=\"line\"><span class=\"comment\">// a 现在等于 10</span></div></pre></td></tr></table></figure>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><ul>\n<li>加法（+）</li>\n<li>减法（-）</li>\n<li>乘法（*）</li>\n<li>除法（/）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>       <span class=\"comment\">// 等于 3</span></div><div class=\"line\"><span class=\"number\">5</span> - <span class=\"number\">3</span>       <span class=\"comment\">// 等于 2</span></div><div class=\"line\"><span class=\"number\">2</span> * <span class=\"number\">3</span>       <span class=\"comment\">// 等于 6</span></div><div class=\"line\"><span class=\"number\">10.0</span> / <span class=\"number\">2.5</span>  <span class=\"comment\">// 等于 4.0</span></div></pre></td></tr></table></figure>\n<p>加法运算符也可用于String的拼接：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"hello, \"</span> + <span class=\"string\">\"world\"</span>  <span class=\"comment\">// 等于 \"hello, world\"</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"求余运算符\"><a href=\"#求余运算符\" class=\"headerlink\" title=\"求余运算符 (%)\"></a>求余运算符 (%)</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">9</span> % <span class=\"number\">4</span>    <span class=\"comment\">// 等于 1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">8</span> % <span class=\"number\">2.5</span>   <span class=\"comment\">// 等于 0.5</span></div></pre></td></tr></table></figure>\n<h2 id=\"自增和自减-–\"><a href=\"#自增和自减-–\" class=\"headerlink\" title=\"自增和自减 (++) (–)\"></a>自增和自减 (++) (–)</h2><ul>\n<li>当++前置的时候，先自増再返回。</li>\n<li>当++后置的时候，先返回再自增。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">let</span> b = ++a <span class=\"comment\">// a 和 b 现在都是 1</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = a++ <span class=\"comment\">// a 现在 2, 但 c 是 a 自增前的值 1</span></div></pre></td></tr></table></figure>\n<h2 id=\"一元负号运算符\"><a href=\"#一元负号运算符\" class=\"headerlink\" title=\"一元负号运算符\"></a>一元负号运算符</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> three = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> minusThree = -three       <span class=\"comment\">// minusThree 等于 -3</span></div><div class=\"line\"><span class=\"keyword\">let</span> plusThree = -minusThree   <span class=\"comment\">// plusThree 等于 3, 或 \"负负3\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"一元正号运算符\"><a href=\"#一元正号运算符\" class=\"headerlink\" title=\"一元正号运算符\"></a>一元正号运算符</h2><p>一元正号（+）不做任何改变地返回操作数的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> minusSix = -<span class=\"number\">6</span></div><div class=\"line\"><span class=\"keyword\">let</span> alsoMinusSix = +minusSix  <span class=\"comment\">// alsoMinusSix 等于 -6</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"组合赋值运算符\"><a href=\"#组合赋值运算符\" class=\"headerlink\" title=\"组合赋值运算符\"></a>组合赋值运算符</h2><p>表达式a += 2是a = a + 2的简写</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\">a += <span class=\"number\">2</span> <span class=\"comment\">// a 现在是 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><ul>\n<li>等于（a == b）</li>\n<li>不等于（a != b）</li>\n<li>大于（a &gt; b）</li>\n<li>小于（a &lt; b）</li>\n<li>大于等于（a &gt;= b）</li>\n<li>小于等于（a &lt;= b）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 1 等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> != <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 2 不等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> &gt; <span class=\"number\">1</span>    <span class=\"comment\">// true, 因为 2 大于 1</span></div><div class=\"line\"><span class=\"number\">1</span> &lt; <span class=\"number\">2</span>    <span class=\"comment\">// true, 因为 1 小于2</span></div><div class=\"line\"><span class=\"number\">1</span> &gt;= <span class=\"number\">1</span>   <span class=\"comment\">// true, 因为 1 大于等于 1</span></div><div class=\"line\"><span class=\"number\">2</span> &lt;= <span class=\"number\">1</span>   <span class=\"comment\">// false, 因为 2 并不小于等于 1</span></div></pre></td></tr></table></figure>\n<h2 id=\"三目运算符-a-b-c\"><a href=\"#三目运算符-a-b-c\" class=\"headerlink\" title=\"三目运算符 (a?b:c)\"></a>三目运算符 (a?b:c)</h2><p>问题 ? 答案1 : 答案2</p>\n<p>如果问题成立，返回答案1的结果; 如果不成立，返回答案2的结果。</p>\n<h2 id=\"空合运算符-a-b\"><a href=\"#空合运算符-a-b\" class=\"headerlink\" title=\"空合运算符 (a ?? b)\"></a>空合运算符 (a ?? b)</h2><p>空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件:</p>\n<ul>\n<li>表达式a必须是Optional可选类型</li>\n<li>默认值b的类型必须要和a存储值的类型保持一致</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> defaultColorName = <span class=\"string\">\"red\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> userDefinedColorName: <span class=\"type\">String</span>?   <span class=\"comment\">//默认值为 nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> colorNameToUse = userDefinedColorName ?? defaultColorName</div><div class=\"line\"><span class=\"comment\">// userDefinedColorName 的值为空，所以 colorNameToUse 的值为 \"red\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">userDefinedColorName = <span class=\"string\">\"green\"</span></div><div class=\"line\">colorNameToUse = userDefinedColorName ?? defaultColorName</div><div class=\"line\"><span class=\"comment\">// userDefinedColorName 非空，因此 colorNameToUse 的值为 \"green\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"区间运算符\"><a href=\"#区间运算符\" class=\"headerlink\" title=\"区间运算符\"></a>区间运算符</h2><h3 id=\"闭区间运算符-（a…b）\"><a href=\"#闭区间运算符-（a…b）\" class=\"headerlink\" title=\"闭区间运算符 （a…b）\"></a>闭区间运算符 （a…b）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(index) * 5 = \\(index * 5)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 * 5 = 5</span></div><div class=\"line\"><span class=\"comment\">// 2 * 5 = 10</span></div><div class=\"line\"><span class=\"comment\">// 3 * 5 = 15</span></div><div class=\"line\"><span class=\"comment\">// 4 * 5 = 20</span></div><div class=\"line\"><span class=\"comment\">// 5 * 5 = 25</span></div></pre></td></tr></table></figure>\n<h3 id=\"半开区间运算符-a-lt-b\"><a href=\"#半开区间运算符-a-lt-b\" class=\"headerlink\" title=\"半开区间运算符 (a..&lt;b)\"></a>半开区间运算符 (a..&lt;b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"Anna\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Brian\"</span>, <span class=\"string\">\"Jack\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = names.<span class=\"built_in\">count</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第 \\(i + 1) 个人叫 \\(names[i])\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 第 1 个人叫 Anna</span></div><div class=\"line\"><span class=\"comment\">// 第 2 个人叫 Alex</span></div><div class=\"line\"><span class=\"comment\">// 第 3 个人叫 Brian</span></div><div class=\"line\"><span class=\"comment\">// 第 4 个人叫 Jack</span></div></pre></td></tr></table></figure>\n<h2 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h2><h3 id=\"逻辑非-a\"><a href=\"#逻辑非-a\" class=\"headerlink\" title=\"逻辑非 (!a)\"></a>逻辑非 (!a)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> allowedEntry = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">if</span> !allowedEntry &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"ACCESS DENIED\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"逻辑与-a-amp-amp-b\"><a href=\"#逻辑与-a-amp-amp-b\" class=\"headerlink\" title=\"逻辑与 (a &amp;&amp; b)\"></a>逻辑与 (a &amp;&amp; b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> enteredDoorCode = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">let</span> passedRetinaScan = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">if</span> enteredDoorCode &amp;&amp; passedRetinaScan &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"ACCESS DENIED\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"逻辑或-a-b\"><a href=\"#逻辑或-a-b\" class=\"headerlink\" title=\"逻辑或 (a || b)\"></a>逻辑或 (a || b)</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> hasDoorKey = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">let</span> knowsOverridePassword = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">if</span> hasDoorKey || knowsOverridePassword &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Welcome!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用括号来明确优先级\"><a href=\"#使用括号来明确优先级\" class=\"headerlink\" title=\"使用括号来明确优先级\"></a>使用括号来明确优先级</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Welcome!\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"ACCESS DENIED\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Welcome!\"</span></div></pre></td></tr></table></figure>"},{"title":"Swift笔记-闭包","date":"2017-06-05T09:27:37.000Z","_content":"\n## sorted 方法\n\n排序闭包函数类型需为(String, String) -> Bool。\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \n// 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -> Bool。\nfunc backwards(s1: String, s2: String) -> Bool {\n    return s1 > s2\n}\nvar reversed = names.sorted(by: backwards)\n  \nprint(reversed)\n```\n\n<!-- more -->\n\n## 闭包表达式语法\n```swift\n{ (parameters) -> returnType in\n    statements\n}\n```\n下面的例子展示了之前backwards(_:_:)函数对应的闭包表达式版本的代码：\n```swift\nvar reverses = names.sorted(by: { (s1 , s2) -> Bool in\n    return s1 > s2\n})\n```\n\n### 根据上下文推断类型\n```swift\nreversed = names.sorted(by: { s1, s2 in return s1 > s2 } )\n```\n\n### 单表达式闭包隐式返回\n```swift\nreversed = names.sorted(by: { s1, s2 in s1 > s2 } )\n```\n在这个例子中，sort(_:)方法的第二个参数函数类型明确了闭包必须返回一个Bool类型值。因为闭包函数体只包含了一个单一表达式（s1 > s2），该表达式返回Bool类型值，因此这里没有歧义，return关键字可以省略。\n\n### 参数名称缩写\n\nSwift 自动为内联闭包提供了参数名称缩写功能，您可以直接通过$0，$1，$2来顺序调用闭包的参数，以此类推。\n\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \nvar reversed = names.sorted( by: { $0 > $1 } )\nprint(reversed)\n```\n在这个例子中，$0和$1表示闭包中第一个和第二个String类型的参数。\n\n\n### 运算符函数\n\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \nvar reversed = names.sorted(by: >)\nprint(reversed)\n```\n \n## 尾随闭包\n尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用。\n```swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n  \n// 以下是不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure({\n    // 闭包主体部分\n})\n  \n// 以下是使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉：\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \n//尾随闭包\nvar reversed = names.sorted() { $0 > $1 }\nprint(reversed)\n```\n**注意**： 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。\n```swift\nreversed = names.sorted { $0 > $1 }\n```","source":"_posts/Swift笔记-闭包.md","raw":"---\ntitle: Swift笔记-闭包\ndate: 2017-06-05 17:27:37\ntags: \n\t- Swift \ncategories: Swift \n---\n\n## sorted 方法\n\n排序闭包函数类型需为(String, String) -> Bool。\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \n// 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -> Bool。\nfunc backwards(s1: String, s2: String) -> Bool {\n    return s1 > s2\n}\nvar reversed = names.sorted(by: backwards)\n  \nprint(reversed)\n```\n\n<!-- more -->\n\n## 闭包表达式语法\n```swift\n{ (parameters) -> returnType in\n    statements\n}\n```\n下面的例子展示了之前backwards(_:_:)函数对应的闭包表达式版本的代码：\n```swift\nvar reverses = names.sorted(by: { (s1 , s2) -> Bool in\n    return s1 > s2\n})\n```\n\n### 根据上下文推断类型\n```swift\nreversed = names.sorted(by: { s1, s2 in return s1 > s2 } )\n```\n\n### 单表达式闭包隐式返回\n```swift\nreversed = names.sorted(by: { s1, s2 in s1 > s2 } )\n```\n在这个例子中，sort(_:)方法的第二个参数函数类型明确了闭包必须返回一个Bool类型值。因为闭包函数体只包含了一个单一表达式（s1 > s2），该表达式返回Bool类型值，因此这里没有歧义，return关键字可以省略。\n\n### 参数名称缩写\n\nSwift 自动为内联闭包提供了参数名称缩写功能，您可以直接通过$0，$1，$2来顺序调用闭包的参数，以此类推。\n\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \nvar reversed = names.sorted( by: { $0 > $1 } )\nprint(reversed)\n```\n在这个例子中，$0和$1表示闭包中第一个和第二个String类型的参数。\n\n\n### 运算符函数\n\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \nvar reversed = names.sorted(by: >)\nprint(reversed)\n```\n \n## 尾随闭包\n尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用。\n```swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n  \n// 以下是不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure({\n    // 闭包主体部分\n})\n  \n// 以下是使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉：\n```swift\nimport Cocoa\n  \nlet names = [\"AT\", \"AE\", \"D\", \"S\", \"BE\"]\n  \n//尾随闭包\nvar reversed = names.sorted() { $0 > $1 }\nprint(reversed)\n```\n**注意**： 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。\n```swift\nreversed = names.sorted { $0 > $1 }\n```","slug":"Swift笔记-闭包","published":1,"updated":"2017-08-10T12:01:34.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftv003twou5dwnd8slj","content":"<h2 id=\"sorted-方法\"><a href=\"#sorted-方法\" class=\"headerlink\" title=\"sorted 方法\"></a>sorted 方法</h2><p>排序闭包函数类型需为(String, String) -&gt; Bool。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -&gt; Bool。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backwards</span><span class=\"params\">(s1: String, s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted(by: backwards)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"闭包表达式语法\"><a href=\"#闭包表达式语法\" class=\"headerlink\" title=\"闭包表达式语法\"></a>闭包表达式语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; (parameters) -&gt; returnType <span class=\"keyword\">in</span></div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的例子展示了之前backwards(<em>:</em>:)函数对应的闭包表达式版本的代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reverses = names.sorted(by: &#123; (s1 , s2) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"根据上下文推断类型\"><a href=\"#根据上下文推断类型\" class=\"headerlink\" title=\"根据上下文推断类型\"></a>根据上下文推断类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>\n<h3 id=\"单表达式闭包隐式返回\"><a href=\"#单表达式闭包隐式返回\" class=\"headerlink\" title=\"单表达式闭包隐式返回\"></a>单表达式闭包隐式返回</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>\n<p>在这个例子中，sort(_:)方法的第二个参数函数类型明确了闭包必须返回一个Bool类型值。因为闭包函数体只包含了一个单一表达式（s1 &gt; s2），该表达式返回Bool类型值，因此这里没有歧义，return关键字可以省略。</p>\n<h3 id=\"参数名称缩写\"><a href=\"#参数名称缩写\" class=\"headerlink\" title=\"参数名称缩写\"></a>参数名称缩写</h3><p>Swift 自动为内联闭包提供了参数名称缩写功能，您可以直接通过$0，$1，$2来顺序调用闭包的参数，以此类推。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted( by: &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125; )</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure>\n<p>在这个例子中，$0和$1表示闭包中第一个和第二个String类型的参数。</p>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted(by: &gt;)</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure>\n<h2 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h2><p>尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionThatTakesAClosure</span><span class=\"params\">(closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 函数体部分</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 以下是不使用尾随闭包进行函数调用</span></div><div class=\"line\">someFunctionThatTakesAClosure(&#123;</div><div class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></div><div class=\"line\">&#125;)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 以下是使用尾随闭包进行函数调用</span></div><div class=\"line\">someFunctionThatTakesAClosure() &#123;</div><div class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//尾随闭包</span></div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted() &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>： 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"sorted-方法\"><a href=\"#sorted-方法\" class=\"headerlink\" title=\"sorted 方法\"></a>sorted 方法</h2><p>排序闭包函数类型需为(String, String) -&gt; Bool。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -&gt; Bool。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backwards</span><span class=\"params\">(s1: String, s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted(by: backwards)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"闭包表达式语法\"><a href=\"#闭包表达式语法\" class=\"headerlink\" title=\"闭包表达式语法\"></a>闭包表达式语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; (parameters) -&gt; returnType <span class=\"keyword\">in</span></div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的例子展示了之前backwards(<em>:</em>:)函数对应的闭包表达式版本的代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reverses = names.sorted(by: &#123; (s1 , s2) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"根据上下文推断类型\"><a href=\"#根据上下文推断类型\" class=\"headerlink\" title=\"根据上下文推断类型\"></a>根据上下文推断类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>\n<h3 id=\"单表达式闭包隐式返回\"><a href=\"#单表达式闭包隐式返回\" class=\"headerlink\" title=\"单表达式闭包隐式返回\"></a>单表达式闭包隐式返回</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>\n<p>在这个例子中，sort(_:)方法的第二个参数函数类型明确了闭包必须返回一个Bool类型值。因为闭包函数体只包含了一个单一表达式（s1 &gt; s2），该表达式返回Bool类型值，因此这里没有歧义，return关键字可以省略。</p>\n<h3 id=\"参数名称缩写\"><a href=\"#参数名称缩写\" class=\"headerlink\" title=\"参数名称缩写\"></a>参数名称缩写</h3><p>Swift 自动为内联闭包提供了参数名称缩写功能，您可以直接通过$0，$1，$2来顺序调用闭包的参数，以此类推。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted( by: &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125; )</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure>\n<p>在这个例子中，$0和$1表示闭包中第一个和第二个String类型的参数。</p>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted(by: &gt;)</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure>\n<h2 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h2><p>尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionThatTakesAClosure</span><span class=\"params\">(closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 函数体部分</span></div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 以下是不使用尾随闭包进行函数调用</span></div><div class=\"line\">someFunctionThatTakesAClosure(&#123;</div><div class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></div><div class=\"line\">&#125;)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 以下是使用尾随闭包进行函数调用</span></div><div class=\"line\">someFunctionThatTakesAClosure() &#123;</div><div class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Cocoa</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"AT\"</span>, <span class=\"string\">\"AE\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"S\"</span>, <span class=\"string\">\"BE\"</span>]</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//尾随闭包</span></div><div class=\"line\"><span class=\"keyword\">var</span> reversed = names.sorted() &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(reversed)</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>： 如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = names.sorted &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div></pre></td></tr></table></figure></p>"},{"title":"使用hexo搭建github静态博客","date":"2017-06-01T08:19:18.000Z","_content":"\n网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。\n总结如下。\n\n以Windows 7系统为例：\n\n### 登陆Github，创建Reposity\n\n1. 用户名.github.io, 例如我的是zhouzhuo810.github.io\n2. 点击Setting->Choose Theme->随便选一个Theme->Select->默认Readme\n3. 访问username.github.io可以看到readme的内容即可。\n\n### 安装Node.js\nhttps://nodejs.org/en/\n选择第二个下载安装。\n\n<!-- more -->  \n\n### 安装git\n\n### 安装hexo\n使用cmd命令行工具，\n\n```\nF:\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server \n```\n### 配置config\n\n \n```\ntitle: 标题\nsubtitle: 副标题\ndescription: 描述\nauthor: 作者\nlanguage: zh-CN \ntimezone: Asia/Shanghai\n```\n\n \n```  \ndeploy:\n    type: git \n    repo: 复制github的ssh格式的路径(不要用https格式的)\n    branch: master\n```\n\n\n### 配置ssh key。\n\n1. 打开git bash\n```\n$ git config --global user.name \"你的github用户名\"\n$ git config --global user.email \"你的github验证邮箱\"\n$ ssh-keygen -t rsa -C \"你的github验证邮箱\"\n```\n\n一路回车即可。\n\n默认在**C:\\Users\\xxx\\.ssh**下\n\n找到**id_rsa.pub**文件。\n\n2. \n记事本打开，复制所有内容。\n\n到\nhttps://github.com/settings/keys\n配置即可\n\n标题随意。\n\n3. \n最后别忘了最关键的一步：\n\n验证SSH key配置是否成功：\n\n```\n$ ssh -T git@github.com\n```\n\n如果弹出\nAre you sure you want to continue connecting (yes/no)? \n输入yes，回车\n\n等待结果：\n如果返回以下内容，说明成功了。\n```\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n### 发布\n\n \n```\nhexo g\n\nhexo d\n```\n\n### 查看\n\n不出意外的话，通过username.github.io可以访问到发布的内容了。\n\n\n### 切换主题\n\nhttps://github.com/stkevintan/hexo-theme-material-flow\n\n1.安装插件和下载主题\n\n```\n# change to work dir\ncd /your_blog_dir/\n# install dependencies\nnpm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content\n# download source\ngit clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow\n```\n\n注意事项：多个插件同时安装报错时，拆分成单个插件安装即可。\n\n如：\n\n```\nnpm i -S hexo-generator-search\n\nnpm i -S hexo-generator-feed\n\n...\n\n...\n\n```\n\n2.修改配置文件_config.yml\n\n```\navatar: /images/avatar.jpg\nfavicon: /images/favicon.ico\n\ntheme: material-flow\nsearch:\n  path: search.xml\n  field: post\n\nautoprefixer:\n  exclude:\n    - '*.min.css'\n  # remove: false # prevent autoprefixer remove page-break-inside\n  # browsers:\n  #   - 'last 2 versions'\n  #   - '> 5%'\n\n# Generator json content\njsonContent:\n  meta: false\n  keywords: false\n  pages:\n    title: true\n    slug: false\n    date: false\n    updated: false\n    comments: false\n    path: false\n    link: false\n    permalink: true\n    excerpt: false\n    keywords: false\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: false\n    date: false\n    updated: false\n    comments: false\n    path: false\n    link: false\n    permalink: true\n    excerpt: false\n    keywords: false\n    text: true\n    raw: false\n    content: false\n    categories: false\n    tags: false\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n\n```\n\n\n3.头像和网站图标配置\n\n在sources文件夹下新建images文件夹即可。\n","source":"_posts/使用hexo搭建github静态博客.md","raw":"---\ntitle: 使用hexo搭建github静态博客\ndate: 2017-06-01 16:19:18\ntags: \n\t- hexo\ncategories: hexo\n---\n\n网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。\n总结如下。\n\n以Windows 7系统为例：\n\n### 登陆Github，创建Reposity\n\n1. 用户名.github.io, 例如我的是zhouzhuo810.github.io\n2. 点击Setting->Choose Theme->随便选一个Theme->Select->默认Readme\n3. 访问username.github.io可以看到readme的内容即可。\n\n### 安装Node.js\nhttps://nodejs.org/en/\n选择第二个下载安装。\n\n<!-- more -->  \n\n### 安装git\n\n### 安装hexo\n使用cmd命令行工具，\n\n```\nF:\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server \n```\n### 配置config\n\n \n```\ntitle: 标题\nsubtitle: 副标题\ndescription: 描述\nauthor: 作者\nlanguage: zh-CN \ntimezone: Asia/Shanghai\n```\n\n \n```  \ndeploy:\n    type: git \n    repo: 复制github的ssh格式的路径(不要用https格式的)\n    branch: master\n```\n\n\n### 配置ssh key。\n\n1. 打开git bash\n```\n$ git config --global user.name \"你的github用户名\"\n$ git config --global user.email \"你的github验证邮箱\"\n$ ssh-keygen -t rsa -C \"你的github验证邮箱\"\n```\n\n一路回车即可。\n\n默认在**C:\\Users\\xxx\\.ssh**下\n\n找到**id_rsa.pub**文件。\n\n2. \n记事本打开，复制所有内容。\n\n到\nhttps://github.com/settings/keys\n配置即可\n\n标题随意。\n\n3. \n最后别忘了最关键的一步：\n\n验证SSH key配置是否成功：\n\n```\n$ ssh -T git@github.com\n```\n\n如果弹出\nAre you sure you want to continue connecting (yes/no)? \n输入yes，回车\n\n等待结果：\n如果返回以下内容，说明成功了。\n```\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n### 发布\n\n \n```\nhexo g\n\nhexo d\n```\n\n### 查看\n\n不出意外的话，通过username.github.io可以访问到发布的内容了。\n\n\n### 切换主题\n\nhttps://github.com/stkevintan/hexo-theme-material-flow\n\n1.安装插件和下载主题\n\n```\n# change to work dir\ncd /your_blog_dir/\n# install dependencies\nnpm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content\n# download source\ngit clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow\n```\n\n注意事项：多个插件同时安装报错时，拆分成单个插件安装即可。\n\n如：\n\n```\nnpm i -S hexo-generator-search\n\nnpm i -S hexo-generator-feed\n\n...\n\n...\n\n```\n\n2.修改配置文件_config.yml\n\n```\navatar: /images/avatar.jpg\nfavicon: /images/favicon.ico\n\ntheme: material-flow\nsearch:\n  path: search.xml\n  field: post\n\nautoprefixer:\n  exclude:\n    - '*.min.css'\n  # remove: false # prevent autoprefixer remove page-break-inside\n  # browsers:\n  #   - 'last 2 versions'\n  #   - '> 5%'\n\n# Generator json content\njsonContent:\n  meta: false\n  keywords: false\n  pages:\n    title: true\n    slug: false\n    date: false\n    updated: false\n    comments: false\n    path: false\n    link: false\n    permalink: true\n    excerpt: false\n    keywords: false\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: false\n    date: false\n    updated: false\n    comments: false\n    path: false\n    link: false\n    permalink: true\n    excerpt: false\n    keywords: false\n    text: true\n    raw: false\n    content: false\n    categories: false\n    tags: false\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n\n```\n\n\n3.头像和网站图标配置\n\n在sources文件夹下新建images文件夹即可。\n","slug":"使用hexo搭建github静态博客","published":1,"updated":"2017-08-10T12:01:34.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edftw003vwou5p4tb8onx","content":"<p>网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。<br>总结如下。</p>\n<p>以Windows 7系统为例：</p>\n<h3 id=\"登陆Github，创建Reposity\"><a href=\"#登陆Github，创建Reposity\" class=\"headerlink\" title=\"登陆Github，创建Reposity\"></a>登陆Github，创建Reposity</h3><ol>\n<li>用户名.github.io, 例如我的是zhouzhuo810.github.io</li>\n<li>点击Setting-&gt;Choose Theme-&gt;随便选一个Theme-&gt;Select-&gt;默认Readme</li>\n<li>访问username.github.io可以看到readme的内容即可。</li>\n</ol>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/</a><br>选择第二个下载安装。</p>\n<a id=\"more\"></a>  \n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>使用cmd命令行工具，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:</div><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\">hexo init blog</div><div class=\"line\">cd blog</div><div class=\"line\">npm install</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"配置config\"><a href=\"#配置config\" class=\"headerlink\" title=\"配置config\"></a>配置config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 描述</div><div class=\"line\">author: 作者</div><div class=\"line\">language: zh-CN </div><div class=\"line\">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git </div><div class=\"line\">    repo: 复制github的ssh格式的路径(不要用https格式的)</div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"配置ssh-key。\"><a href=\"#配置ssh-key。\" class=\"headerlink\" title=\"配置ssh key。\"></a>配置ssh key。</h3><ol>\n<li>打开git bash<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;你的github用户名&quot;</div><div class=\"line\">$ git config --global user.email &quot;你的github验证邮箱&quot;</div><div class=\"line\">$ ssh-keygen -t rsa -C &quot;你的github验证邮箱&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一路回车即可。</p>\n<p>默认在<strong>C:\\Users\\xxx.ssh</strong>下</p>\n<p>找到<strong>id_rsa.pub</strong>文件。</p>\n<ol>\n<li>记事本打开，复制所有内容。</li>\n</ol>\n<p>到<br><a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">https://github.com/settings/keys</a><br>配置即可</p>\n<p>标题随意。</p>\n<ol>\n<li>最后别忘了最关键的一步：</li>\n</ol>\n<p>验证SSH key配置是否成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>如果弹出<br>Are you sure you want to continue connecting (yes/no)?<br>输入yes，回车</p>\n<p>等待结果：<br>如果返回以下内容，说明成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\"></div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>不出意外的话，通过username.github.io可以访问到发布的内容了。</p>\n<h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p><a href=\"https://github.com/stkevintan/hexo-theme-material-flow\" target=\"_blank\" rel=\"external\">https://github.com/stkevintan/hexo-theme-material-flow</a></p>\n<p>1.安装插件和下载主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># change to work dir</div><div class=\"line\">cd /your_blog_dir/</div><div class=\"line\"># install dependencies</div><div class=\"line\">npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content</div><div class=\"line\"># download source</div><div class=\"line\">git clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow</div></pre></td></tr></table></figure>\n<p>注意事项：多个插件同时安装报错时，拆分成单个插件安装即可。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S hexo-generator-search</div><div class=\"line\"></div><div class=\"line\">npm i -S hexo-generator-feed</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>2.修改配置文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">avatar: /images/avatar.jpg</div><div class=\"line\">favicon: /images/favicon.ico</div><div class=\"line\"></div><div class=\"line\">theme: material-flow</div><div class=\"line\">search:</div><div class=\"line\">  path: search.xml</div><div class=\"line\">  field: post</div><div class=\"line\"></div><div class=\"line\">autoprefixer:</div><div class=\"line\">  exclude:</div><div class=\"line\">    - &apos;*.min.css&apos;</div><div class=\"line\">  # remove: false # prevent autoprefixer remove page-break-inside</div><div class=\"line\">  # browsers:</div><div class=\"line\">  #   - &apos;last 2 versions&apos;</div><div class=\"line\">  #   - &apos;&gt; 5%&apos;</div><div class=\"line\"></div><div class=\"line\"># Generator json content</div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  keywords: false</div><div class=\"line\">  pages:</div><div class=\"line\">    title: true</div><div class=\"line\">    slug: false</div><div class=\"line\">    date: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    path: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: true</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    keywords: false</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    slug: false</div><div class=\"line\">    date: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    path: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: true</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    keywords: false</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: false</div><div class=\"line\"></div><div class=\"line\">feed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20</div><div class=\"line\">  hub:</div><div class=\"line\">  content:</div></pre></td></tr></table></figure>\n<p>3.头像和网站图标配置</p>\n<p>在sources文件夹下新建images文件夹即可。</p>\n","site":{"data":{}},"excerpt":"<p>网上虽然不乏此类教程，但是实际操作起来还是遇到了一些问题。<br>总结如下。</p>\n<p>以Windows 7系统为例：</p>\n<h3 id=\"登陆Github，创建Reposity\"><a href=\"#登陆Github，创建Reposity\" class=\"headerlink\" title=\"登陆Github，创建Reposity\"></a>登陆Github，创建Reposity</h3><ol>\n<li>用户名.github.io, 例如我的是zhouzhuo810.github.io</li>\n<li>点击Setting-&gt;Choose Theme-&gt;随便选一个Theme-&gt;Select-&gt;默认Readme</li>\n<li>访问username.github.io可以看到readme的内容即可。</li>\n</ol>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">https://nodejs.org/en/</a><br>选择第二个下载安装。</p>","more":"<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>使用cmd命令行工具，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:</div><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\">hexo init blog</div><div class=\"line\">cd blog</div><div class=\"line\">npm install</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"配置config\"><a href=\"#配置config\" class=\"headerlink\" title=\"配置config\"></a>配置config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 描述</div><div class=\"line\">author: 作者</div><div class=\"line\">language: zh-CN </div><div class=\"line\">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git </div><div class=\"line\">    repo: 复制github的ssh格式的路径(不要用https格式的)</div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"配置ssh-key。\"><a href=\"#配置ssh-key。\" class=\"headerlink\" title=\"配置ssh key。\"></a>配置ssh key。</h3><ol>\n<li>打开git bash<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;你的github用户名&quot;</div><div class=\"line\">$ git config --global user.email &quot;你的github验证邮箱&quot;</div><div class=\"line\">$ ssh-keygen -t rsa -C &quot;你的github验证邮箱&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一路回车即可。</p>\n<p>默认在<strong>C:\\Users\\xxx.ssh</strong>下</p>\n<p>找到<strong>id_rsa.pub</strong>文件。</p>\n<ol>\n<li>记事本打开，复制所有内容。</li>\n</ol>\n<p>到<br><a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">https://github.com/settings/keys</a><br>配置即可</p>\n<p>标题随意。</p>\n<ol>\n<li>最后别忘了最关键的一步：</li>\n</ol>\n<p>验证SSH key配置是否成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>如果弹出<br>Are you sure you want to continue connecting (yes/no)?<br>输入yes，回车</p>\n<p>等待结果：<br>如果返回以下内容，说明成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\"></div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>不出意外的话，通过username.github.io可以访问到发布的内容了。</p>\n<h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p><a href=\"https://github.com/stkevintan/hexo-theme-material-flow\" target=\"_blank\" rel=\"external\">https://github.com/stkevintan/hexo-theme-material-flow</a></p>\n<p>1.安装插件和下载主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># change to work dir</div><div class=\"line\">cd /your_blog_dir/</div><div class=\"line\"># install dependencies</div><div class=\"line\">npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content</div><div class=\"line\"># download source</div><div class=\"line\">git clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow</div></pre></td></tr></table></figure>\n<p>注意事项：多个插件同时安装报错时，拆分成单个插件安装即可。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -S hexo-generator-search</div><div class=\"line\"></div><div class=\"line\">npm i -S hexo-generator-feed</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>2.修改配置文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">avatar: /images/avatar.jpg</div><div class=\"line\">favicon: /images/favicon.ico</div><div class=\"line\"></div><div class=\"line\">theme: material-flow</div><div class=\"line\">search:</div><div class=\"line\">  path: search.xml</div><div class=\"line\">  field: post</div><div class=\"line\"></div><div class=\"line\">autoprefixer:</div><div class=\"line\">  exclude:</div><div class=\"line\">    - &apos;*.min.css&apos;</div><div class=\"line\">  # remove: false # prevent autoprefixer remove page-break-inside</div><div class=\"line\">  # browsers:</div><div class=\"line\">  #   - &apos;last 2 versions&apos;</div><div class=\"line\">  #   - &apos;&gt; 5%&apos;</div><div class=\"line\"></div><div class=\"line\"># Generator json content</div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  keywords: false</div><div class=\"line\">  pages:</div><div class=\"line\">    title: true</div><div class=\"line\">    slug: false</div><div class=\"line\">    date: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    path: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: true</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    keywords: false</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    slug: false</div><div class=\"line\">    date: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    path: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: true</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    keywords: false</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: false</div><div class=\"line\"></div><div class=\"line\">feed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20</div><div class=\"line\">  hub:</div><div class=\"line\">  content:</div></pre></td></tr></table></figure>\n<p>3.头像和网站图标配置</p>\n<p>在sources文件夹下新建images文件夹即可。</p>"},{"title":"Swift笔记-集合类型","date":"2017-06-05T03:01:53.000Z","_content":"\nSwift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。\n\n## 数组\n\n### 创建一个空数组\n\n```swift\nvar someInts = [Int]()\nprint(\"someInts is of type [Int] with \\(someInts.count) items.\")\n// 打印 \"someInts is of type [Int] with 0 items.\"\n```\n### 创建一个带有默认值的数组\n\n```swift\nvar threeDoubles = [Double](count: 3, repeatedValue:0.0)\n// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]\n```\n\n<!-- more -->\n\n\n### 通过两个数组相加创建一个数组\n\n```swift\nvar anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)\n// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]\n\nvar sixDoubles = threeDoubles + anotherThreeDoubles\n// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]\n```\n\n### 用字面量构造数组\n\n```swift\nvar shoppingList: [String] = [\"Eggs\", \"Milk\"]\n// shoppingList 已经被构造并且拥有两个初始项。\n```\n或\n```swift\nvar shoppingList = [\"Eggs\", \"Milk\"]\n```\n因为所有字面量中的值都是相同的类型，Swift 可以推断出[String]是shoppinglist中变量的正确类型。\n\n### 访问和修改数组\n\n可以使用数组的只读属性count来获取数组中的数据项数量：\n```swift\nprint(\"The shopping list contains \\(shoppingList.count) items.\")\n// 输出 \"The shopping list contains 2 items.\"（这个数组有2个项）\n```\n使用布尔值属性isEmpty作为检查count属性的值是否为 0 的捷径：\n```swift\nif shoppingList.isEmpty {\n    print(\"The shopping list is empty.\")\n} else {\n    print(\"The shopping list is not empty.\")\n}\n// 打印 \"The shopping list is not empty.\"（shoppinglist 不是空的）\n```\n也可以使用append(_:)方法在数组后面添加新的数据项：\n```swift\nshoppingList.append(\"Flour\")\n// shoppingList 现在有3个数据项，有人在摊煎饼\n```\n使用加法赋值运算符（+=）也可以直接在数组后面添加一个或多个拥有相同类型的数据项：\n```swift\nshoppingList += [\"Baking Powder\"]\n// shoppingList 现在有四项了\nshoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]\n// shoppingList 现在有七项了\n```\n\n可以直接使用下标语法来获取数组中的数据项\n\n```swift\nvar firstItem = shoppingList[0]\n// 第一项是 \"Eggs\"\n```\n\n还可以利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把\"Chocolate Spread\"，\"Cheese\"，和\"Butter\"替换为\"Bananas\"和 \"Apples\"：\n```swift\nshoppingList[4...6] = [\"Bananas\", \"Apples\"]\n// shoppingList 现在有6项\n```\n\n调用数组的insert(_:atIndex:)方法来在某个具体索引值之前添加数据项：\n```swift\nshoppingList.insert(\"Maple Syrup\", atIndex: 0)\n// shoppingList 现在有7项\n// \"Maple Syrup\" 现在是这个列表中的第一项\n```\n类似的我们可以使用removeAtIndex(_:)方法来移除数组中的某一项。\n```swift\nlet mapleSyrup = shoppingList.removeAtIndex(0)\n// 索引值为0的数据项被移除\n// shoppingList 现在只有6项，而且不包括 Maple Syrup\n// mapleSyrup 常量的值等于被移除数据项的值 \"Maple Syrup\"\n```\n如果我们只想把数组中的最后一项移除，可以使用removeLast()方法\n```swift\nlet apples = shoppingList.removeLast()\n// 数组的最后一项被移除了\n// shoppingList 现在只有5项，不包括 cheese\n// apples 常量的值现在等于 \"Apples\" 字符串\n```\n### 数组的遍历\n我们可以使用for-in循环来遍历所有数组中的数据项：\n```swift\nfor item in shoppingList {\n    print(item)\n}\n// Six eggs\n// Milk\n// Flour\n// Baking Powder\n// Bananas\n```\n如果我们同时需要每个数据项的值和索引值，可以使用enumerate()方法来进行数组遍历。\n```swift\nfor (index, value) in shoppingList.enumerate() {\n    print(\"Item \\(String(index + 1)): \\(value)\")\n}\n// Item 1: Six eggs\n// Item 2: Milk\n// Item 3: Flour\n// Item 4: Baking Powder\n// Item 5: Bananas\n```\n\n\n## 集合\n\n### 创建和构造一个空的集合\n\n```swift\nvar letters = Set<Character>()\nprint(\"letters is of type Set<Character> with \\(letters.count) items.\")\n// 打印 \"letters is of type Set<Character> with 0 items.\"\n```\n\n### 用数组字面量创建集合\n\n```swift\nvar favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]\n// favoriteGenres 被构造成含有三个初始值的集合\n```\n### 访问和修改一个集合\n\n为了找出一个Set中元素的数量，可以使用其只读属性count：\n```swift\nprint(\"I have \\(favoriteGenres.count) favorite music genres.\")\n// 打印 \"I have 3 favorite music genres.\"\n```\n使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0：\n```swift\nif favoriteGenres.isEmpty {\n    print(\"As far as music goes, I'm not picky.\")\n} else {\n    print(\"I have particular music preferences.\")\n}\n// 打印 \"I have particular music preferences.\"\n```\n你可以通过调用Set的insert(_:)方法来添加一个新元素：\n```swift\nfavoriteGenres.insert(\"Jazz\")\n// favoriteGenres 现在包含4个元素\n```\n你可以通过调用Set的remove(_:)方法去删除一个元素，如果该值是该Set的一个元素则删除该元素并且返回被删除的元素值，否则如果该Set不包含该值，则返回nil\n```swift\nif let removedGenre = favoriteGenres.remove(\"Rock\") {\n    print(\"\\(removedGenre)? I'm over it.\")\n} else {\n    print(\"I never much cared for that.\")\n}\n// 打印 \"Rock? I'm over it.\"\n```\n使用contains(_:)方法去检查Set中是否包含一个特定的值：\n```swift\nif favoriteGenres.contains(\"Funk\") {\n    print(\"I get up on the good foot.\")\n} else {\n    print(\"It's too funky in here.\")\n}\n// 打印 \"It's too funky in here.\"\n```\n### 遍历一个集合\n\n```swift\nfor genre in favoriteGenres {\n    print(\"\\(genre)\")\n}\n// Classical\n// Jazz\n// Hip hop\n```\n\n```swift\nfor genre in favoriteGenres.sort() {\n    print(\"\\(genre)\")\n}\n// prints \"Classical\"\n// prints \"Hip hop\"\n// prints \"Jazz\n```\n\n### 基本集合操作\n\n![](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setVennDiagram_2x.png)\n\n```swift\nlet oddDigits: Set = [1, 3, 5, 7, 9]\nlet evenDigits: Set = [0, 2, 4, 6, 8]\nlet singleDigitPrimeNumbers: Set = [2, 3, 5, 7]\n\noddDigits.union(evenDigits).sort()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\noddDigits.intersect(evenDigits).sort()\n// []\noddDigits.subtract(singleDigitPrimeNumbers).sort()\n// [1, 9]\noddDigits.exclusiveOr(singleDigitPrimeNumbers).sort()\n// [1, 2, 9]\n```\n## 字典\n\n### 创建一个空字典\n```swift\nvar namesOfIntegers = [Int: String]()\n// namesOfIntegers 是一个空的 [Int: String] 字典\n```\n\n### 用字典字面量创建字典\n```\nvar airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]\n```\n\n### 访问和修改字典\n我们可以通过字典的只读属性count来获取某个字典的数据项数量：\n```swift\nprint(\"The dictionary of airports contains \\(airports.count) items.\")\n// 打印 \"The dictionary of airports contains 2 items.\"（这个字典有两个数据项）\n```\n使用布尔属性isEmpty来快捷地检查字典的count属性是否等于0：\n```swift\nif airports.isEmpty {\n    print(\"The airports dictionary is empty.\")\n} else {\n    print(\"The airports dictionary is not empty.\")\n}\n// 打印 \"The airports dictionary is not empty.\"\n```\n\n我们还可以使用下标语法来通过给某个键的对应值赋值为nil来从字典里移除一个键值对：\n```swift\nairports[\"APL\"] = \"Apple Internation\"\n// \"Apple Internation\" 不是真的 APL 机场, 删除它\nairports[\"APL\"] = nil\n// APL 现在被移除了\n```\nupdateValue(_:forKey:)方法会返回对应值的类型的可选值。\n```swift\nif let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {\n    print(\"The old value for DUB was \\(oldValue).\")\n}\n// 输出 \"The old value for DUB was Dublin.\"\n```\nremoveValueForKey(_:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil：\n```swift\nif let removedValue = airports.removeValueForKey(\"DUB\") {\n    print(\"The removed airport's name is \\(removedValue).\")\n} else {\n    print(\"The airports dictionary does not contain a value for DUB.\")\n}\n// prints \"The removed airport's name is Dublin Airport.\"\n```\n\n### 字典遍历\n\n```swift\nfor (airportCode, airportName) in airports {\n    print(\"\\(airportCode): \\(airportName)\")\n}\n// YYZ: Toronto Pearson\n// LHR: London Heathrow\n```\n\n```swift\nfor airportCode in airports.keys {\n    print(\"Airport code: \\(airportCode)\")\n}\n// Airport code: YYZ\n// Airport code: LHR\n\nfor airportName in airports.values {\n    print(\"Airport name: \\(airportName)\")\n}\n// Airport name: Toronto Pearson\n// Airport name: London Heathrow\n```\n\n如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组：\n```swift\nlet airportCodes = [String](airports.keys)\n// airportCodes 是 [\"YYZ\", \"LHR\"]\n\nlet airportNames = [String](airports.values)\n// airportNames 是 [\"Toronto Pearson\", \"London Heathrow\"]\n```","source":"_posts/Swift笔记-集合类型.md","raw":"---\ntitle: Swift笔记-集合类型\ndate: 2017-06-05 11:01:53\ntags: \n\t- Swift \ncategories: Swift \n---\n\nSwift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。\n\n## 数组\n\n### 创建一个空数组\n\n```swift\nvar someInts = [Int]()\nprint(\"someInts is of type [Int] with \\(someInts.count) items.\")\n// 打印 \"someInts is of type [Int] with 0 items.\"\n```\n### 创建一个带有默认值的数组\n\n```swift\nvar threeDoubles = [Double](count: 3, repeatedValue:0.0)\n// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]\n```\n\n<!-- more -->\n\n\n### 通过两个数组相加创建一个数组\n\n```swift\nvar anotherThreeDoubles = Array(count: 3, repeatedValue: 2.5)\n// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]\n\nvar sixDoubles = threeDoubles + anotherThreeDoubles\n// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]\n```\n\n### 用字面量构造数组\n\n```swift\nvar shoppingList: [String] = [\"Eggs\", \"Milk\"]\n// shoppingList 已经被构造并且拥有两个初始项。\n```\n或\n```swift\nvar shoppingList = [\"Eggs\", \"Milk\"]\n```\n因为所有字面量中的值都是相同的类型，Swift 可以推断出[String]是shoppinglist中变量的正确类型。\n\n### 访问和修改数组\n\n可以使用数组的只读属性count来获取数组中的数据项数量：\n```swift\nprint(\"The shopping list contains \\(shoppingList.count) items.\")\n// 输出 \"The shopping list contains 2 items.\"（这个数组有2个项）\n```\n使用布尔值属性isEmpty作为检查count属性的值是否为 0 的捷径：\n```swift\nif shoppingList.isEmpty {\n    print(\"The shopping list is empty.\")\n} else {\n    print(\"The shopping list is not empty.\")\n}\n// 打印 \"The shopping list is not empty.\"（shoppinglist 不是空的）\n```\n也可以使用append(_:)方法在数组后面添加新的数据项：\n```swift\nshoppingList.append(\"Flour\")\n// shoppingList 现在有3个数据项，有人在摊煎饼\n```\n使用加法赋值运算符（+=）也可以直接在数组后面添加一个或多个拥有相同类型的数据项：\n```swift\nshoppingList += [\"Baking Powder\"]\n// shoppingList 现在有四项了\nshoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]\n// shoppingList 现在有七项了\n```\n\n可以直接使用下标语法来获取数组中的数据项\n\n```swift\nvar firstItem = shoppingList[0]\n// 第一项是 \"Eggs\"\n```\n\n还可以利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把\"Chocolate Spread\"，\"Cheese\"，和\"Butter\"替换为\"Bananas\"和 \"Apples\"：\n```swift\nshoppingList[4...6] = [\"Bananas\", \"Apples\"]\n// shoppingList 现在有6项\n```\n\n调用数组的insert(_:atIndex:)方法来在某个具体索引值之前添加数据项：\n```swift\nshoppingList.insert(\"Maple Syrup\", atIndex: 0)\n// shoppingList 现在有7项\n// \"Maple Syrup\" 现在是这个列表中的第一项\n```\n类似的我们可以使用removeAtIndex(_:)方法来移除数组中的某一项。\n```swift\nlet mapleSyrup = shoppingList.removeAtIndex(0)\n// 索引值为0的数据项被移除\n// shoppingList 现在只有6项，而且不包括 Maple Syrup\n// mapleSyrup 常量的值等于被移除数据项的值 \"Maple Syrup\"\n```\n如果我们只想把数组中的最后一项移除，可以使用removeLast()方法\n```swift\nlet apples = shoppingList.removeLast()\n// 数组的最后一项被移除了\n// shoppingList 现在只有5项，不包括 cheese\n// apples 常量的值现在等于 \"Apples\" 字符串\n```\n### 数组的遍历\n我们可以使用for-in循环来遍历所有数组中的数据项：\n```swift\nfor item in shoppingList {\n    print(item)\n}\n// Six eggs\n// Milk\n// Flour\n// Baking Powder\n// Bananas\n```\n如果我们同时需要每个数据项的值和索引值，可以使用enumerate()方法来进行数组遍历。\n```swift\nfor (index, value) in shoppingList.enumerate() {\n    print(\"Item \\(String(index + 1)): \\(value)\")\n}\n// Item 1: Six eggs\n// Item 2: Milk\n// Item 3: Flour\n// Item 4: Baking Powder\n// Item 5: Bananas\n```\n\n\n## 集合\n\n### 创建和构造一个空的集合\n\n```swift\nvar letters = Set<Character>()\nprint(\"letters is of type Set<Character> with \\(letters.count) items.\")\n// 打印 \"letters is of type Set<Character> with 0 items.\"\n```\n\n### 用数组字面量创建集合\n\n```swift\nvar favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]\n// favoriteGenres 被构造成含有三个初始值的集合\n```\n### 访问和修改一个集合\n\n为了找出一个Set中元素的数量，可以使用其只读属性count：\n```swift\nprint(\"I have \\(favoriteGenres.count) favorite music genres.\")\n// 打印 \"I have 3 favorite music genres.\"\n```\n使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0：\n```swift\nif favoriteGenres.isEmpty {\n    print(\"As far as music goes, I'm not picky.\")\n} else {\n    print(\"I have particular music preferences.\")\n}\n// 打印 \"I have particular music preferences.\"\n```\n你可以通过调用Set的insert(_:)方法来添加一个新元素：\n```swift\nfavoriteGenres.insert(\"Jazz\")\n// favoriteGenres 现在包含4个元素\n```\n你可以通过调用Set的remove(_:)方法去删除一个元素，如果该值是该Set的一个元素则删除该元素并且返回被删除的元素值，否则如果该Set不包含该值，则返回nil\n```swift\nif let removedGenre = favoriteGenres.remove(\"Rock\") {\n    print(\"\\(removedGenre)? I'm over it.\")\n} else {\n    print(\"I never much cared for that.\")\n}\n// 打印 \"Rock? I'm over it.\"\n```\n使用contains(_:)方法去检查Set中是否包含一个特定的值：\n```swift\nif favoriteGenres.contains(\"Funk\") {\n    print(\"I get up on the good foot.\")\n} else {\n    print(\"It's too funky in here.\")\n}\n// 打印 \"It's too funky in here.\"\n```\n### 遍历一个集合\n\n```swift\nfor genre in favoriteGenres {\n    print(\"\\(genre)\")\n}\n// Classical\n// Jazz\n// Hip hop\n```\n\n```swift\nfor genre in favoriteGenres.sort() {\n    print(\"\\(genre)\")\n}\n// prints \"Classical\"\n// prints \"Hip hop\"\n// prints \"Jazz\n```\n\n### 基本集合操作\n\n![](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setVennDiagram_2x.png)\n\n```swift\nlet oddDigits: Set = [1, 3, 5, 7, 9]\nlet evenDigits: Set = [0, 2, 4, 6, 8]\nlet singleDigitPrimeNumbers: Set = [2, 3, 5, 7]\n\noddDigits.union(evenDigits).sort()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\noddDigits.intersect(evenDigits).sort()\n// []\noddDigits.subtract(singleDigitPrimeNumbers).sort()\n// [1, 9]\noddDigits.exclusiveOr(singleDigitPrimeNumbers).sort()\n// [1, 2, 9]\n```\n## 字典\n\n### 创建一个空字典\n```swift\nvar namesOfIntegers = [Int: String]()\n// namesOfIntegers 是一个空的 [Int: String] 字典\n```\n\n### 用字典字面量创建字典\n```\nvar airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]\n```\n\n### 访问和修改字典\n我们可以通过字典的只读属性count来获取某个字典的数据项数量：\n```swift\nprint(\"The dictionary of airports contains \\(airports.count) items.\")\n// 打印 \"The dictionary of airports contains 2 items.\"（这个字典有两个数据项）\n```\n使用布尔属性isEmpty来快捷地检查字典的count属性是否等于0：\n```swift\nif airports.isEmpty {\n    print(\"The airports dictionary is empty.\")\n} else {\n    print(\"The airports dictionary is not empty.\")\n}\n// 打印 \"The airports dictionary is not empty.\"\n```\n\n我们还可以使用下标语法来通过给某个键的对应值赋值为nil来从字典里移除一个键值对：\n```swift\nairports[\"APL\"] = \"Apple Internation\"\n// \"Apple Internation\" 不是真的 APL 机场, 删除它\nairports[\"APL\"] = nil\n// APL 现在被移除了\n```\nupdateValue(_:forKey:)方法会返回对应值的类型的可选值。\n```swift\nif let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {\n    print(\"The old value for DUB was \\(oldValue).\")\n}\n// 输出 \"The old value for DUB was Dublin.\"\n```\nremoveValueForKey(_:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil：\n```swift\nif let removedValue = airports.removeValueForKey(\"DUB\") {\n    print(\"The removed airport's name is \\(removedValue).\")\n} else {\n    print(\"The airports dictionary does not contain a value for DUB.\")\n}\n// prints \"The removed airport's name is Dublin Airport.\"\n```\n\n### 字典遍历\n\n```swift\nfor (airportCode, airportName) in airports {\n    print(\"\\(airportCode): \\(airportName)\")\n}\n// YYZ: Toronto Pearson\n// LHR: London Heathrow\n```\n\n```swift\nfor airportCode in airports.keys {\n    print(\"Airport code: \\(airportCode)\")\n}\n// Airport code: YYZ\n// Airport code: LHR\n\nfor airportName in airports.values {\n    print(\"Airport name: \\(airportName)\")\n}\n// Airport name: Toronto Pearson\n// Airport name: London Heathrow\n```\n\n如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组：\n```swift\nlet airportCodes = [String](airports.keys)\n// airportCodes 是 [\"YYZ\", \"LHR\"]\n\nlet airportNames = [String](airports.values)\n// airportNames 是 [\"Toronto Pearson\", \"London Heathrow\"]\n```","slug":"Swift笔记-集合类型","published":1,"updated":"2017-08-10T12:01:34.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj66edfu0003zwou5im85kea3","content":"<p>Swift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"创建一个空数组\"><a href=\"#创建一个空数组\" class=\"headerlink\" title=\"创建一个空数组\"></a>创建一个空数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someInts = [<span class=\"type\">Int</span>]()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"someInts is of type [Int] with \\(someInts.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"someInts is of type [Int] with 0 items.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建一个带有默认值的数组\"><a href=\"#创建一个带有默认值的数组\" class=\"headerlink\" title=\"创建一个带有默认值的数组\"></a>创建一个带有默认值的数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> threeDoubles = [<span class=\"type\">Double</span>](<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue:<span class=\"number\">0.0</span>)</div><div class=\"line\"><span class=\"comment\">// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"通过两个数组相加创建一个数组\"><a href=\"#通过两个数组相加创建一个数组\" class=\"headerlink\" title=\"通过两个数组相加创建一个数组\"></a>通过两个数组相加创建一个数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherThreeDoubles = <span class=\"type\">Array</span>(<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue: <span class=\"number\">2.5</span>)</div><div class=\"line\"><span class=\"comment\">// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sixDoubles = threeDoubles + anotherThreeDoubles</div><div class=\"line\"><span class=\"comment\">// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]</span></div></pre></td></tr></table></figure>\n<h3 id=\"用字面量构造数组\"><a href=\"#用字面量构造数组\" class=\"headerlink\" title=\"用字面量构造数组\"></a>用字面量构造数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList: [<span class=\"type\">String</span>] = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 已经被构造并且拥有两个初始项。</span></div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div></pre></td></tr></table></figure></p>\n<p>因为所有字面量中的值都是相同的类型，Swift 可以推断出[String]是shoppinglist中变量的正确类型。</p>\n<h3 id=\"访问和修改数组\"><a href=\"#访问和修改数组\" class=\"headerlink\" title=\"访问和修改数组\"></a>访问和修改数组</h3><p>可以使用数组的只读属性count来获取数组中的数据项数量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list contains \\(shoppingList.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The shopping list contains 2 items.\"（这个数组有2个项）</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔值属性isEmpty作为检查count属性的值是否为 0 的捷径：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> shoppingList.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list is empty.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list is not empty.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The shopping list is not empty.\"（shoppinglist 不是空的）</span></div></pre></td></tr></table></figure></p>\n<p>也可以使用append(_:)方法在数组后面添加新的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList.append(<span class=\"string\">\"Flour\"</span>)</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有3个数据项，有人在摊煎饼</span></div></pre></td></tr></table></figure></p>\n<p>使用加法赋值运算符（+=）也可以直接在数组后面添加一个或多个拥有相同类型的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList += [<span class=\"string\">\"Baking Powder\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有四项了</span></div><div class=\"line\">shoppingList += [<span class=\"string\">\"Chocolate Spread\"</span>, <span class=\"string\">\"Cheese\"</span>, <span class=\"string\">\"Butter\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有七项了</span></div></pre></td></tr></table></figure></p>\n<p>可以直接使用下标语法来获取数组中的数据项</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstItem = shoppingList[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"comment\">// 第一项是 \"Eggs\"</span></div></pre></td></tr></table></figure>\n<p>还可以利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把”Chocolate Spread”，”Cheese”，和”Butter”替换为”Bananas”和 “Apples”：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList[<span class=\"number\">4</span>...<span class=\"number\">6</span>] = [<span class=\"string\">\"Bananas\"</span>, <span class=\"string\">\"Apples\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有6项</span></div></pre></td></tr></table></figure></p>\n<p>调用数组的insert(_:atIndex:)方法来在某个具体索引值之前添加数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList.insert(<span class=\"string\">\"Maple Syrup\"</span>, atIndex: <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有7项</span></div><div class=\"line\"><span class=\"comment\">// \"Maple Syrup\" 现在是这个列表中的第一项</span></div></pre></td></tr></table></figure></p>\n<p>类似的我们可以使用removeAtIndex(_:)方法来移除数组中的某一项。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mapleSyrup = shoppingList.removeAtIndex(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// 索引值为0的数据项被移除</span></div><div class=\"line\"><span class=\"comment\">// shoppingList 现在只有6项，而且不包括 Maple Syrup</span></div><div class=\"line\"><span class=\"comment\">// mapleSyrup 常量的值等于被移除数据项的值 \"Maple Syrup\"</span></div></pre></td></tr></table></figure></p>\n<p>如果我们只想把数组中的最后一项移除，可以使用removeLast()方法<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apples = shoppingList.removeLast()</div><div class=\"line\"><span class=\"comment\">// 数组的最后一项被移除了</span></div><div class=\"line\"><span class=\"comment\">// shoppingList 现在只有5项，不包括 cheese</span></div><div class=\"line\"><span class=\"comment\">// apples 常量的值现在等于 \"Apples\" 字符串</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3><p>我们可以使用for-in循环来遍历所有数组中的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Six eggs</span></div><div class=\"line\"><span class=\"comment\">// Milk</span></div><div class=\"line\"><span class=\"comment\">// Flour</span></div><div class=\"line\"><span class=\"comment\">// Baking Powder</span></div><div class=\"line\"><span class=\"comment\">// Bananas</span></div></pre></td></tr></table></figure></p>\n<p>如果我们同时需要每个数据项的值和索引值，可以使用enumerate()方法来进行数组遍历。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> shoppingList.<span class=\"built_in\">enumerate</span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Item \\(String(index + 1)): \\(value)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Item 1: Six eggs</span></div><div class=\"line\"><span class=\"comment\">// Item 2: Milk</span></div><div class=\"line\"><span class=\"comment\">// Item 3: Flour</span></div><div class=\"line\"><span class=\"comment\">// Item 4: Baking Powder</span></div><div class=\"line\"><span class=\"comment\">// Item 5: Bananas</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"创建和构造一个空的集合\"><a href=\"#创建和构造一个空的集合\" class=\"headerlink\" title=\"创建和构造一个空的集合\"></a>创建和构造一个空的集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> letters = <span class=\"type\">Set</span>&lt;<span class=\"type\">Character</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"letters is of type Set&lt;Character&gt; with \\(letters.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"letters is of type Set&lt;Character&gt; with 0 items.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"用数组字面量创建集合\"><a href=\"#用数组字面量创建集合\" class=\"headerlink\" title=\"用数组字面量创建集合\"></a>用数组字面量创建集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> favoriteGenres: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>&gt; = [<span class=\"string\">\"Rock\"</span>, <span class=\"string\">\"Classical\"</span>, <span class=\"string\">\"Hip hop\"</span>]</div><div class=\"line\"><span class=\"comment\">// favoriteGenres 被构造成含有三个初始值的集合</span></div></pre></td></tr></table></figure>\n<h3 id=\"访问和修改一个集合\"><a href=\"#访问和修改一个集合\" class=\"headerlink\" title=\"访问和修改一个集合\"></a>访问和修改一个集合</h3><p>为了找出一个Set中元素的数量，可以使用其只读属性count：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"I have \\(favoriteGenres.count) favorite music genres.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"I have 3 favorite music genres.\"</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> favoriteGenres.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"As far as music goes, I'm not picky.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I have particular music preferences.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"I have particular music preferences.\"</span></div></pre></td></tr></table></figure></p>\n<p>你可以通过调用Set的insert(_:)方法来添加一个新元素：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">favoriteGenres.insert(<span class=\"string\">\"Jazz\"</span>)</div><div class=\"line\"><span class=\"comment\">// favoriteGenres 现在包含4个元素</span></div></pre></td></tr></table></figure></p>\n<p>你可以通过调用Set的remove(_:)方法去删除一个元素，如果该值是该Set的一个元素则删除该元素并且返回被删除的元素值，否则如果该Set不包含该值，则返回nil<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedGenre = favoriteGenres.remove(<span class=\"string\">\"Rock\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(removedGenre)? I'm over it.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I never much cared for that.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Rock? I'm over it.\"</span></div></pre></td></tr></table></figure></p>\n<p>使用contains(_:)方法去检查Set中是否包含一个特定的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> favoriteGenres.<span class=\"built_in\">contains</span>(<span class=\"string\">\"Funk\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I get up on the good foot.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's too funky in here.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"It's too funky in here.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"遍历一个集合\"><a href=\"#遍历一个集合\" class=\"headerlink\" title=\"遍历一个集合\"></a>遍历一个集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> genre <span class=\"keyword\">in</span> favoriteGenres &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(genre)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Classical</span></div><div class=\"line\"><span class=\"comment\">// Jazz</span></div><div class=\"line\"><span class=\"comment\">// Hip hop</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> genre <span class=\"keyword\">in</span> favoriteGenres.<span class=\"built_in\">sort</span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(genre)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"Classical\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Hip hop\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Jazz</span></div></pre></td></tr></table></figure>\n<h3 id=\"基本集合操作\"><a href=\"#基本集合操作\" class=\"headerlink\" title=\"基本集合操作\"></a>基本集合操作</h3><p><img src=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setVennDiagram_2x.png\" alt=\"\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> oddDigits: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> evenDigits: <span class=\"type\">Set</span> = [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> singleDigitPrimeNumbers: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\"></div><div class=\"line\">oddDigits.union(evenDigits).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\">oddDigits.intersect(evenDigits).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// []</span></div><div class=\"line\">oddDigits.subtract(singleDigitPrimeNumbers).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [1, 9]</span></div><div class=\"line\">oddDigits.exclusiveOr(singleDigitPrimeNumbers).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [1, 2, 9]</span></div></pre></td></tr></table></figure>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"创建一个空字典\"><a href=\"#创建一个空字典\" class=\"headerlink\" title=\"创建一个空字典\"></a>创建一个空字典</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> namesOfIntegers = [<span class=\"type\">Int</span>: <span class=\"type\">String</span>]()</div><div class=\"line\"><span class=\"comment\">// namesOfIntegers 是一个空的 [Int: String] 字典</span></div></pre></td></tr></table></figure>\n<h3 id=\"用字典字面量创建字典\"><a href=\"#用字典字面量创建字典\" class=\"headerlink\" title=\"用字典字面量创建字典\"></a>用字典字面量创建字典</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var airports: [String: String] = [&quot;YYZ&quot;: &quot;Toronto Pearson&quot;, &quot;DUB&quot;: &quot;Dublin&quot;]</div></pre></td></tr></table></figure>\n<h3 id=\"访问和修改字典\"><a href=\"#访问和修改字典\" class=\"headerlink\" title=\"访问和修改字典\"></a>访问和修改字典</h3><p>我们可以通过字典的只读属性count来获取某个字典的数据项数量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The dictionary of airports contains \\(airports.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"The dictionary of airports contains 2 items.\"（这个字典有两个数据项）</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔属性isEmpty来快捷地检查字典的count属性是否等于0：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> airports.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary is empty.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary is not empty.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The airports dictionary is not empty.\"</span></div></pre></td></tr></table></figure></p>\n<p>我们还可以使用下标语法来通过给某个键的对应值赋值为nil来从字典里移除一个键值对：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">airports[<span class=\"string\">\"APL\"</span>] = <span class=\"string\">\"Apple Internation\"</span></div><div class=\"line\"><span class=\"comment\">// \"Apple Internation\" 不是真的 APL 机场, 删除它</span></div><div class=\"line\">airports[<span class=\"string\">\"APL\"</span>] = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// APL 现在被移除了</span></div></pre></td></tr></table></figure></p>\n<p>updateValue(_:forKey:)方法会返回对应值的类型的可选值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue = airports.updateValue(<span class=\"string\">\"Dublin Airport\"</span>, forKey: <span class=\"string\">\"DUB\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The old value for DUB was \\(oldValue).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"The old value for DUB was Dublin.\"</span></div></pre></td></tr></table></figure></p>\n<p>removeValueForKey(_:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedValue = airports.removeValueForKey(<span class=\"string\">\"DUB\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The removed airport's name is \\(removedValue).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary does not contain a value for DUB.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"The removed airport's name is Dublin Airport.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"字典遍历\"><a href=\"#字典遍历\" class=\"headerlink\" title=\"字典遍历\"></a>字典遍历</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// YYZ: Toronto Pearson</span></div><div class=\"line\"><span class=\"comment\">// LHR: London Heathrow</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> airportCode <span class=\"keyword\">in</span> airports.keys &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Airport code: \\(airportCode)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport code: YYZ</span></div><div class=\"line\"><span class=\"comment\">// Airport code: LHR</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportName <span class=\"keyword\">in</span> airports.values &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Airport name: \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport name: Toronto Pearson</span></div><div class=\"line\"><span class=\"comment\">// Airport name: London Heathrow</span></div></pre></td></tr></table></figure>\n<p>如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> airportCodes = [<span class=\"type\">String</span>](airports.keys)</div><div class=\"line\"><span class=\"comment\">// airportCodes 是 [\"YYZ\", \"LHR\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> airportNames = [<span class=\"type\">String</span>](airports.values)</div><div class=\"line\"><span class=\"comment\">// airportNames 是 [\"Toronto Pearson\", \"London Heathrow\"]</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>Swift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"创建一个空数组\"><a href=\"#创建一个空数组\" class=\"headerlink\" title=\"创建一个空数组\"></a>创建一个空数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someInts = [<span class=\"type\">Int</span>]()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"someInts is of type [Int] with \\(someInts.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"someInts is of type [Int] with 0 items.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建一个带有默认值的数组\"><a href=\"#创建一个带有默认值的数组\" class=\"headerlink\" title=\"创建一个带有默认值的数组\"></a>创建一个带有默认值的数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> threeDoubles = [<span class=\"type\">Double</span>](<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue:<span class=\"number\">0.0</span>)</div><div class=\"line\"><span class=\"comment\">// threeDoubles 是一种 [Double] 数组，等价于 [0.0, 0.0, 0.0]</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"通过两个数组相加创建一个数组\"><a href=\"#通过两个数组相加创建一个数组\" class=\"headerlink\" title=\"通过两个数组相加创建一个数组\"></a>通过两个数组相加创建一个数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherThreeDoubles = <span class=\"type\">Array</span>(<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue: <span class=\"number\">2.5</span>)</div><div class=\"line\"><span class=\"comment\">// anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sixDoubles = threeDoubles + anotherThreeDoubles</div><div class=\"line\"><span class=\"comment\">// sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]</span></div></pre></td></tr></table></figure>\n<h3 id=\"用字面量构造数组\"><a href=\"#用字面量构造数组\" class=\"headerlink\" title=\"用字面量构造数组\"></a>用字面量构造数组</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList: [<span class=\"type\">String</span>] = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 已经被构造并且拥有两个初始项。</span></div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div></pre></td></tr></table></figure></p>\n<p>因为所有字面量中的值都是相同的类型，Swift 可以推断出[String]是shoppinglist中变量的正确类型。</p>\n<h3 id=\"访问和修改数组\"><a href=\"#访问和修改数组\" class=\"headerlink\" title=\"访问和修改数组\"></a>访问和修改数组</h3><p>可以使用数组的只读属性count来获取数组中的数据项数量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list contains \\(shoppingList.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The shopping list contains 2 items.\"（这个数组有2个项）</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔值属性isEmpty作为检查count属性的值是否为 0 的捷径：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> shoppingList.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list is empty.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The shopping list is not empty.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The shopping list is not empty.\"（shoppinglist 不是空的）</span></div></pre></td></tr></table></figure></p>\n<p>也可以使用append(_:)方法在数组后面添加新的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList.append(<span class=\"string\">\"Flour\"</span>)</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有3个数据项，有人在摊煎饼</span></div></pre></td></tr></table></figure></p>\n<p>使用加法赋值运算符（+=）也可以直接在数组后面添加一个或多个拥有相同类型的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList += [<span class=\"string\">\"Baking Powder\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有四项了</span></div><div class=\"line\">shoppingList += [<span class=\"string\">\"Chocolate Spread\"</span>, <span class=\"string\">\"Cheese\"</span>, <span class=\"string\">\"Butter\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有七项了</span></div></pre></td></tr></table></figure></p>\n<p>可以直接使用下标语法来获取数组中的数据项</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstItem = shoppingList[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"comment\">// 第一项是 \"Eggs\"</span></div></pre></td></tr></table></figure>\n<p>还可以利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把”Chocolate Spread”，”Cheese”，和”Butter”替换为”Bananas”和 “Apples”：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList[<span class=\"number\">4</span>...<span class=\"number\">6</span>] = [<span class=\"string\">\"Bananas\"</span>, <span class=\"string\">\"Apples\"</span>]</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有6项</span></div></pre></td></tr></table></figure></p>\n<p>调用数组的insert(_:atIndex:)方法来在某个具体索引值之前添加数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList.insert(<span class=\"string\">\"Maple Syrup\"</span>, atIndex: <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// shoppingList 现在有7项</span></div><div class=\"line\"><span class=\"comment\">// \"Maple Syrup\" 现在是这个列表中的第一项</span></div></pre></td></tr></table></figure></p>\n<p>类似的我们可以使用removeAtIndex(_:)方法来移除数组中的某一项。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mapleSyrup = shoppingList.removeAtIndex(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// 索引值为0的数据项被移除</span></div><div class=\"line\"><span class=\"comment\">// shoppingList 现在只有6项，而且不包括 Maple Syrup</span></div><div class=\"line\"><span class=\"comment\">// mapleSyrup 常量的值等于被移除数据项的值 \"Maple Syrup\"</span></div></pre></td></tr></table></figure></p>\n<p>如果我们只想把数组中的最后一项移除，可以使用removeLast()方法<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apples = shoppingList.removeLast()</div><div class=\"line\"><span class=\"comment\">// 数组的最后一项被移除了</span></div><div class=\"line\"><span class=\"comment\">// shoppingList 现在只有5项，不包括 cheese</span></div><div class=\"line\"><span class=\"comment\">// apples 常量的值现在等于 \"Apples\" 字符串</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3><p>我们可以使用for-in循环来遍历所有数组中的数据项：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Six eggs</span></div><div class=\"line\"><span class=\"comment\">// Milk</span></div><div class=\"line\"><span class=\"comment\">// Flour</span></div><div class=\"line\"><span class=\"comment\">// Baking Powder</span></div><div class=\"line\"><span class=\"comment\">// Bananas</span></div></pre></td></tr></table></figure></p>\n<p>如果我们同时需要每个数据项的值和索引值，可以使用enumerate()方法来进行数组遍历。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> shoppingList.<span class=\"built_in\">enumerate</span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Item \\(String(index + 1)): \\(value)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Item 1: Six eggs</span></div><div class=\"line\"><span class=\"comment\">// Item 2: Milk</span></div><div class=\"line\"><span class=\"comment\">// Item 3: Flour</span></div><div class=\"line\"><span class=\"comment\">// Item 4: Baking Powder</span></div><div class=\"line\"><span class=\"comment\">// Item 5: Bananas</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"创建和构造一个空的集合\"><a href=\"#创建和构造一个空的集合\" class=\"headerlink\" title=\"创建和构造一个空的集合\"></a>创建和构造一个空的集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> letters = <span class=\"type\">Set</span>&lt;<span class=\"type\">Character</span>&gt;()</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"letters is of type Set&lt;Character&gt; with \\(letters.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"letters is of type Set&lt;Character&gt; with 0 items.\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"用数组字面量创建集合\"><a href=\"#用数组字面量创建集合\" class=\"headerlink\" title=\"用数组字面量创建集合\"></a>用数组字面量创建集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> favoriteGenres: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>&gt; = [<span class=\"string\">\"Rock\"</span>, <span class=\"string\">\"Classical\"</span>, <span class=\"string\">\"Hip hop\"</span>]</div><div class=\"line\"><span class=\"comment\">// favoriteGenres 被构造成含有三个初始值的集合</span></div></pre></td></tr></table></figure>\n<h3 id=\"访问和修改一个集合\"><a href=\"#访问和修改一个集合\" class=\"headerlink\" title=\"访问和修改一个集合\"></a>访问和修改一个集合</h3><p>为了找出一个Set中元素的数量，可以使用其只读属性count：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"I have \\(favoriteGenres.count) favorite music genres.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"I have 3 favorite music genres.\"</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> favoriteGenres.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"As far as music goes, I'm not picky.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I have particular music preferences.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"I have particular music preferences.\"</span></div></pre></td></tr></table></figure></p>\n<p>你可以通过调用Set的insert(_:)方法来添加一个新元素：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">favoriteGenres.insert(<span class=\"string\">\"Jazz\"</span>)</div><div class=\"line\"><span class=\"comment\">// favoriteGenres 现在包含4个元素</span></div></pre></td></tr></table></figure></p>\n<p>你可以通过调用Set的remove(_:)方法去删除一个元素，如果该值是该Set的一个元素则删除该元素并且返回被删除的元素值，否则如果该Set不包含该值，则返回nil<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedGenre = favoriteGenres.remove(<span class=\"string\">\"Rock\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(removedGenre)? I'm over it.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I never much cared for that.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Rock? I'm over it.\"</span></div></pre></td></tr></table></figure></p>\n<p>使用contains(_:)方法去检查Set中是否包含一个特定的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> favoriteGenres.<span class=\"built_in\">contains</span>(<span class=\"string\">\"Funk\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I get up on the good foot.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"It's too funky in here.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"It's too funky in here.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"遍历一个集合\"><a href=\"#遍历一个集合\" class=\"headerlink\" title=\"遍历一个集合\"></a>遍历一个集合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> genre <span class=\"keyword\">in</span> favoriteGenres &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(genre)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Classical</span></div><div class=\"line\"><span class=\"comment\">// Jazz</span></div><div class=\"line\"><span class=\"comment\">// Hip hop</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> genre <span class=\"keyword\">in</span> favoriteGenres.<span class=\"built_in\">sort</span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(genre)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"Classical\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Hip hop\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Jazz</span></div></pre></td></tr></table></figure>\n<h3 id=\"基本集合操作\"><a href=\"#基本集合操作\" class=\"headerlink\" title=\"基本集合操作\"></a>基本集合操作</h3><p><img src=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setVennDiagram_2x.png\" alt=\"\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> oddDigits: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> evenDigits: <span class=\"type\">Set</span> = [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> singleDigitPrimeNumbers: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\"></div><div class=\"line\">oddDigits.union(evenDigits).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\">oddDigits.intersect(evenDigits).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// []</span></div><div class=\"line\">oddDigits.subtract(singleDigitPrimeNumbers).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [1, 9]</span></div><div class=\"line\">oddDigits.exclusiveOr(singleDigitPrimeNumbers).<span class=\"built_in\">sort</span>()</div><div class=\"line\"><span class=\"comment\">// [1, 2, 9]</span></div></pre></td></tr></table></figure>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"创建一个空字典\"><a href=\"#创建一个空字典\" class=\"headerlink\" title=\"创建一个空字典\"></a>创建一个空字典</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> namesOfIntegers = [<span class=\"type\">Int</span>: <span class=\"type\">String</span>]()</div><div class=\"line\"><span class=\"comment\">// namesOfIntegers 是一个空的 [Int: String] 字典</span></div></pre></td></tr></table></figure>\n<h3 id=\"用字典字面量创建字典\"><a href=\"#用字典字面量创建字典\" class=\"headerlink\" title=\"用字典字面量创建字典\"></a>用字典字面量创建字典</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var airports: [String: String] = [&quot;YYZ&quot;: &quot;Toronto Pearson&quot;, &quot;DUB&quot;: &quot;Dublin&quot;]</div></pre></td></tr></table></figure>\n<h3 id=\"访问和修改字典\"><a href=\"#访问和修改字典\" class=\"headerlink\" title=\"访问和修改字典\"></a>访问和修改字典</h3><p>我们可以通过字典的只读属性count来获取某个字典的数据项数量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The dictionary of airports contains \\(airports.count) items.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印 \"The dictionary of airports contains 2 items.\"（这个字典有两个数据项）</span></div></pre></td></tr></table></figure></p>\n<p>使用布尔属性isEmpty来快捷地检查字典的count属性是否等于0：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> airports.isEmpty &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary is empty.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary is not empty.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The airports dictionary is not empty.\"</span></div></pre></td></tr></table></figure></p>\n<p>我们还可以使用下标语法来通过给某个键的对应值赋值为nil来从字典里移除一个键值对：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">airports[<span class=\"string\">\"APL\"</span>] = <span class=\"string\">\"Apple Internation\"</span></div><div class=\"line\"><span class=\"comment\">// \"Apple Internation\" 不是真的 APL 机场, 删除它</span></div><div class=\"line\">airports[<span class=\"string\">\"APL\"</span>] = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// APL 现在被移除了</span></div></pre></td></tr></table></figure></p>\n<p>updateValue(_:forKey:)方法会返回对应值的类型的可选值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oldValue = airports.updateValue(<span class=\"string\">\"Dublin Airport\"</span>, forKey: <span class=\"string\">\"DUB\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The old value for DUB was \\(oldValue).\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"The old value for DUB was Dublin.\"</span></div></pre></td></tr></table></figure></p>\n<p>removeValueForKey(_:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedValue = airports.removeValueForKey(<span class=\"string\">\"DUB\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The removed airport's name is \\(removedValue).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The airports dictionary does not contain a value for DUB.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"The removed airport's name is Dublin Airport.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"字典遍历\"><a href=\"#字典遍历\" class=\"headerlink\" title=\"字典遍历\"></a>字典遍历</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// YYZ: Toronto Pearson</span></div><div class=\"line\"><span class=\"comment\">// LHR: London Heathrow</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> airportCode <span class=\"keyword\">in</span> airports.keys &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Airport code: \\(airportCode)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport code: YYZ</span></div><div class=\"line\"><span class=\"comment\">// Airport code: LHR</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportName <span class=\"keyword\">in</span> airports.values &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Airport name: \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport name: Toronto Pearson</span></div><div class=\"line\"><span class=\"comment\">// Airport name: London Heathrow</span></div></pre></td></tr></table></figure>\n<p>如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> airportCodes = [<span class=\"type\">String</span>](airports.keys)</div><div class=\"line\"><span class=\"comment\">// airportCodes 是 [\"YYZ\", \"LHR\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> airportNames = [<span class=\"type\">String</span>](airports.values)</div><div class=\"line\"><span class=\"comment\">// airportNames 是 [\"Toronto Pearson\", \"London Heathrow\"]</span></div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj66edfrw0007wou5gi4nhaqb","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfs3000dwou5eo2atne5"},{"post_id":"cj66edfrl0001wou5kw8h16cd","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfs5000iwou5ja2bglba"},{"post_id":"cj66edfry0008wou5jevjj41b","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfs7000lwou5g8gnjtta"},{"post_id":"cj66edfs2000cwou5ampmst4k","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfs8000qwou5qw7juit8"},{"post_id":"cj66edfrp0003wou5jdzry7yh","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfsa000twou52a37awot"},{"post_id":"cj66edfru0006wou5hrwvejx8","category_id":"cj66edfrr0004wou58jmml444","_id":"cj66edfsh000ywou5m4xg8fh4"},{"post_id":"cj66edfs4000fwou5mqqizgnu","category_id":"cj66edfs8000owou58qnutp9v","_id":"cj66edfsl0013wou5emu0x4kz"},{"post_id":"cj66edfs6000kwou56y93uye7","category_id":"cj66edfs8000owou58qnutp9v","_id":"cj66edfso001awou50d0vtw1i"},{"post_id":"cj66edfs7000nwou5gevsi4qm","category_id":"cj66edfsl0014wou5aenbyh7w","_id":"cj66edfsq001gwou5zi39p7i5"},{"post_id":"cj66edfs9000swou54z2w3s94","category_id":"cj66edfso001bwou5444ypujf","_id":"cj66edfsu001mwou5c6s6lx5b"},{"post_id":"cj66edfsa000vwou5xwvjr15x","category_id":"cj66edfsr001iwou5364qzagf","_id":"cj66edfsy001uwou5nc6udkyu"},{"post_id":"cj66edfsj0010wou5f3ey9za4","category_id":"cj66edfsr001iwou5364qzagf","_id":"cj66edft00020wou5j51u50hd"},{"post_id":"cj66edfsk0012wou5qv5d27m7","category_id":"cj66edfsr001iwou5364qzagf","_id":"cj66edft40026wou56c9o7prq"},{"post_id":"cj66edfsm0017wou5lo48a3c1","category_id":"cj66edft20023wou521iu12xb","_id":"cj66edft7002dwou5588rsiyr"},{"post_id":"cj66edfsn0019wou5a714f92l","category_id":"cj66edft20023wou521iu12xb","_id":"cj66edftb002jwou5dqp8ia66"},{"post_id":"cj66edfsp001dwou5ehx69ha5","category_id":"cj66edft7002ewou56130d89w","_id":"cj66edfte002qwou52sqpohia"},{"post_id":"cj66edfsp001fwou5srakp686","category_id":"cj66edft7002ewou56130d89w","_id":"cj66edftg002xwou5iucitqq0"},{"post_id":"cj66edfsr001jwou57vnencrl","category_id":"cj66edft7002ewou56130d89w","_id":"cj66edftk0034wou51lxv3qgy"},{"post_id":"cj66edfst001lwou5n01xmus4","category_id":"cj66edft7002ewou56130d89w","_id":"cj66edftn003bwou5yo988smh"},{"post_id":"cj66edfsu001owou57kfv9z2w","category_id":"cj66edftk0035wou56mra6ghz","_id":"cj66edftq003iwou51lpw03zg"},{"post_id":"cj66edfsw001rwou5glvss6tb","category_id":"cj66edfto003ewou5kkrr37yj","_id":"cj66edftt003pwou5qdocmq8p"},{"post_id":"cj66edfsy001vwou5o4eyf0tu","category_id":"cj66edftr003lwou5pnebh4up","_id":"cj66edftz003wwou5v1jlavhr"},{"post_id":"cj66edfsz001ywou5v2miq9a9","category_id":"cj66edftu003rwou5hcxbfow4","_id":"cj66edfu20042wou5j1um7sv7"},{"post_id":"cj66edfu0003zwou5im85kea3","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu30045wou5yhszmkkx"},{"post_id":"cj66edft10021wou5vsk5puyz","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu30047wou5yduqx5l3"},{"post_id":"cj66edft20025wou5q5zzl6oy","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu4004bwou5q0ihkahh"},{"post_id":"cj66edft40027wou52ka01rtl","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu5004fwou57g0094th"},{"post_id":"cj66edft5002awou5proqcwuw","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu7004iwou5aq64adjl"},{"post_id":"cj66edft7002cwou552ox5iwr","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu7004kwou5bs1low5p"},{"post_id":"cj66edft8002gwou5uaswpptc","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfu9004mwou5qe0cnxrq"},{"post_id":"cj66edft9002iwou5f49y6ntb","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfua004owou5jearexhc"},{"post_id":"cj66edftc002nwou5luprr0o8","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfub004qwou5x6puqeqi"},{"post_id":"cj66edftd002pwou50ca8n77x","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuc004swou5p9h6ac2b"},{"post_id":"cj66edftf002uwou58te532dm","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuc004uwou5w2gvqcgx"},{"post_id":"cj66edftg002wwou564f5nuk5","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfud004wwou5mg2gz2j3"},{"post_id":"cj66edfth0031wou5pw8f8vk8","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfue004ywou5vdthnx4w"},{"post_id":"cj66edftj0033wou55ui6m8ts","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfue0050wou5s8q41ij5"},{"post_id":"cj66edftl0038wou5oxag92gm","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuf0052wou5t9ljxn4y"},{"post_id":"cj66edftm003awou5yzg807au","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuf0054wou5wnk5umim"},{"post_id":"cj66edfto003fwou51k2hy6v1","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfug0056wou5kd97tlvy"},{"post_id":"cj66edftp003hwou5uuerbv8y","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuh0058wou5l9u96mbn"},{"post_id":"cj66edftq003kwou5izv2212k","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuh005awou5jozk8eam"},{"post_id":"cj66edfts003nwou5sbm95mho","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfui005cwou580bby3wi"},{"post_id":"cj66edftu003qwou5hjbj472u","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfui005ewou50j6zglno"},{"post_id":"cj66edftv003twou5dwnd8slj","category_id":"cj66edftz003xwou5fjum9kvh","_id":"cj66edfuj005gwou59ucmke9c"},{"post_id":"cj66edftw003vwou5p4tb8onx","category_id":"cj66edfuj005fwou5yeuazok6","_id":"cj66edfuj005hwou5vq98n5fe"}],"PostTag":[{"post_id":"cj66edfrw0007wou5gi4nhaqb","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfs2000bwou53gynuxqg"},{"post_id":"cj66edfrl0001wou5kw8h16cd","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfs3000ewou5jgex3l2b"},{"post_id":"cj66edfry0008wou5jevjj41b","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfs5000jwou55xd5a7dk"},{"post_id":"cj66edfs2000cwou5ampmst4k","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfs7000mwou5qeif9t5u"},{"post_id":"cj66edfrp0003wou5jdzry7yh","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfs9000rwou5g0jorufb"},{"post_id":"cj66edfru0006wou5hrwvejx8","tag_id":"cj66edfru0005wou5rpueklen","_id":"cj66edfsa000uwou5y08e392b"},{"post_id":"cj66edfs9000swou54z2w3s94","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsi000zwou56jmpx6w3"},{"post_id":"cj66edfs4000fwou5mqqizgnu","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsj0011wou5882tuqyt"},{"post_id":"cj66edfsa000vwou5xwvjr15x","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsm0016wou5jgy6qwqp"},{"post_id":"cj66edfsj0010wou5f3ey9za4","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsn0018wou5mpljzo7x"},{"post_id":"cj66edfs6000kwou56y93uye7","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfso001cwou5vgiookza"},{"post_id":"cj66edfsk0012wou5qv5d27m7","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsp001ewou56qzodlb9"},{"post_id":"cj66edfsm0017wou5lo48a3c1","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsq001hwou5q1nn4yda"},{"post_id":"cj66edfs7000nwou5gevsi4qm","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfss001kwou5zi406vw0"},{"post_id":"cj66edfsn0019wou5a714f92l","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsu001nwou515m6481o"},{"post_id":"cj66edfsp001dwou5ehx69ha5","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsw001qwou5a8vo5wrp"},{"post_id":"cj66edfsp001fwou5srakp686","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsx001twou5mbt1f3p2"},{"post_id":"cj66edfsr001jwou57vnencrl","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edfsz001xwou5ttxkipll"},{"post_id":"cj66edfst001lwou5n01xmus4","tag_id":"cj66edfs8000pwou5ybvn62yu","_id":"cj66edft0001zwou5g1z24h53"},{"post_id":"cj66edfsu001owou57kfv9z2w","tag_id":"cj66edfsx001swou5adlnk9qk","_id":"cj66edft20024wou5aqzthpl8"},{"post_id":"cj66edfsw001rwou5glvss6tb","tag_id":"cj66edft10022wou5tm79ora6","_id":"cj66edft6002bwou5v8nqiwqm"},{"post_id":"cj66edfsy001vwou5o4eyf0tu","tag_id":"cj66edft40028wou5ufj14s78","_id":"cj66edft9002hwou57441d8nu"},{"post_id":"cj66edft8002gwou5uaswpptc","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftc002lwou5rcjva48q"},{"post_id":"cj66edfsz001ywou5v2miq9a9","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftd002owou56hvxfrct"},{"post_id":"cj66edft9002iwou5f49y6ntb","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfte002swou5yvgge024"},{"post_id":"cj66edftc002nwou5luprr0o8","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftg002vwou5jkf0uawt"},{"post_id":"cj66edft10021wou5vsk5puyz","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfth002zwou5nz2p053j"},{"post_id":"cj66edftd002pwou50ca8n77x","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfti0032wou5hipnj2py"},{"post_id":"cj66edftf002uwou58te532dm","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftk0036wou5qb8e1lrd"},{"post_id":"cj66edft20025wou5q5zzl6oy","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftm0039wou5m36q51w1"},{"post_id":"cj66edftg002wwou564f5nuk5","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfto003cwou573stvaa0"},{"post_id":"cj66edfth0031wou5pw8f8vk8","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftp003gwou5inyk3mtw"},{"post_id":"cj66edft40027wou52ka01rtl","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftq003jwou5ji8ul03s"},{"post_id":"cj66edftj0033wou55ui6m8ts","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftr003mwou5n7qxk2yr"},{"post_id":"cj66edftl0038wou5oxag92gm","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftt003owou5sx5t0kha"},{"post_id":"cj66edft5002awou5proqcwuw","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftu003swou5du3itowt"},{"post_id":"cj66edftm003awou5yzg807au","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftw003uwou58g1lnhwj"},{"post_id":"cj66edfto003fwou51k2hy6v1","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edftz003ywou515vwk6l8"},{"post_id":"cj66edft7002cwou552ox5iwr","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu10041wou5lddiufy9"},{"post_id":"cj66edftp003hwou5uuerbv8y","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu20043wou5cevnhk9t"},{"post_id":"cj66edftq003kwou5izv2212k","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu30046wou5e87wo05k"},{"post_id":"cj66edfts003nwou5sbm95mho","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu30048wou5ohd6yqq5"},{"post_id":"cj66edftu003qwou5hjbj472u","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu4004awou5gmgvvjbl"},{"post_id":"cj66edftv003twou5dwnd8slj","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu5004cwou5cbuwe1u6"},{"post_id":"cj66edfu0003zwou5im85kea3","tag_id":"cj66edft8002fwou54ru6yf4v","_id":"cj66edfu5004ewou5328rjdtw"},{"post_id":"cj66edftw003vwou5p4tb8onx","tag_id":"cj66edfu10040wou5j7vf4l09","_id":"cj66edfu6004gwou5oo3cz1ne"}],"Tag":[{"name":"ACM","_id":"cj66edfru0005wou5rpueklen"},{"name":"Android","_id":"cj66edfs8000pwou5ybvn62yu"},{"name":"IOS","_id":"cj66edfsx001swou5adlnk9qk"},{"name":"JavaEE","_id":"cj66edft10022wou5tm79ora6"},{"name":"SQL","_id":"cj66edft40028wou5ufj14s78"},{"name":"Swift","_id":"cj66edft8002fwou54ru6yf4v"},{"name":"hexo","_id":"cj66edfu10040wou5j7vf4l09"}]}}